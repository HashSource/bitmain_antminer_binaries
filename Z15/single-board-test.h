/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'single-board-test'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _IO_FILE;
struct _IO_marker;
struct __blake2b_param;
struct __blake2b_state;

/* 1 */
struct Elf32_Sym
{
  unsigned __int32 st_name __offset(OFF32,0x108AC);
  unsigned __int32 st_value __off;
  unsigned __int32 st_size;
  unsigned __int8 st_info;
  unsigned __int8 st_other;
  unsigned __int16 st_shndx;
};

/* 2 */
struct Elf32_Rel
{
  unsigned __int32 r_offset;
  unsigned __int32 r_info;
};

/* 3 */
union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249
{
  unsigned __int32 d_val;
  unsigned __int32 d_ptr;
};

/* 4 */
struct Elf32_Dyn
{
  __int32 d_tag;
  union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 d_un;
};

/* 5 */
struct Elf32_Verneed
{
  unsigned __int16 vn_version;
  unsigned __int16 vn_cnt;
  unsigned __int32 vn_file __offset(OFF32,0x108AC);
  unsigned __int32 vn_aux;
  unsigned __int32 vn_next;
};

/* 6 */
struct Elf32_Vernaux
{
  unsigned __int32 vna_hash;
  unsigned __int16 vna_flags;
  unsigned __int16 vna_other;
  unsigned __int32 vna_name __offset(OFF32,0x108AC);
  unsigned __int32 vna_next;
};

/* 7 */
typedef void _IO_lock_t;

/* 11 */
typedef unsigned __int8 uint8_t;

/* 8 */
struct nonce_verify_info_t
{
  uint8_t work[140];
  uint8_t nonce[4];
  uint8_t sol[1344];
  uint8_t target[32];
  int work_len;
  int nonce_len;
  int sol_len;
  int target_len;
};

/* 9 */
struct asic_data_info_t
{
  int resp_nonce_frame_num;
  int resp_nonce_frame_len;
  int resp_reg_len;
  int resp_pm_len;
  int resp_pt_len;
  int resp_frame_max_len;
  int request_work_len;
};

/* 10 */
typedef unsigned int size_t;

/* 12 */
struct work_list_t
{
  uint8_t workid;
  uint8_t *work;
};

/* 16 */
struct __pthread_internal_slist
{
  __pthread_internal_slist *__next;
};

/* 15 */
typedef __pthread_internal_slist __pthread_slist_t;

/* 85 */
union __pthread_mutex_s::$30DFB618E49C377A3D62C6584A4CBE95
{
  int __spins;
  __pthread_slist_t __list;
};

/* 14 */
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;
  int __kind;
  unsigned int __nusers;
  union
  {
    int __spins;
    __pthread_slist_t __list;
  };
};

/* 13 */
union pthread_mutex_t
{
  __pthread_mutex_s __data;
  char __size[24];
  int __align;
};

/* 19 */
typedef _IO_FILE FILE;

/* 18 */
typedef unsigned int uint32_t;

/* 17 */
struct app_config_t
{
  FILE *dbg_fp;
  char name[16];
  int asic_num;
  int core_num;
  int baudrate;
  int work_mode;
  int *comport;
  int comport_num;
  int *sensor_pos;
  int sensor_num;
  int enable_cp210x;
  int ticket_mask;
  uint32_t core_timeout;
  int pattern_num;
  int chip_alarm_temp;
  int bringup_freq;
  int bringup_voltage;
  int bringup_work_interval_s;
  int *bringup_autojh_volt;
  int *bringup_autojh_freq;
  char pcba_repeat_ctrl[16];
  int pcba_freq;
  int pcba_voltage;
  int pcba_tempture_high;
  int pcba_tempture_low;
  int pcba_only_find_asic;
  int pcba_pattern_pass_rate;
  int send_pattern_timeout;
  int pcba_enable_level;
  double *pcba_level_rate;
  int slt_test_mode;
  char slt_tunel_path[64];
  char slt_cp210x_runtime[64];
  double *slt_bin_rate;
  int slt_delay;
  int slt_freq;
  int slt_work_interval_ms;
  int slt_enable_read_temp;
};

/* 27 */
typedef int __off_t;

/* 28 */
typedef __int64 __quad_t;

/* 26 */
typedef __quad_t __off64_t;

/* 24 */
struct _IO_FILE
{
  int _flags;
  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
  _IO_marker *_markers;
  _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned __int16 _cur_column;
  char _vtable_offset;
  char _shortbuf[1];
  _IO_lock_t *_lock;
  __off64_t _offset;
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
  int _mode;
  char _unused2[40];
};

/* 25 */
struct _IO_marker
{
  _IO_marker *_next;
  _IO_FILE *_sbuf;
  int _pos;
};

/* 22 */
typedef unsigned int pthread_t;

/* 21 */
struct chain_status_t
{
  int fd;
  int comport;
  int baudrate;
  pthread_t p_dispatch;
  int real_asic_num;
  int design_asic_num;
  uint32_t nonce_num_each_asic[3];
  uint32_t nonce_invalid_num_each_asic[3];
  uint32_t nonce_invalid_num_each_asic_type[3][3];
  uint32_t one_work_nonce_each_asic[3];
  uint32_t one_work_invalid_nonce_each_asic[3];
  uint32_t one_work_invalid_nonce_each_asic_type[3][3];
};

/* 20 */
struct runtime_base_t
{
  chain_status_t chain_status[1];
  asic_data_info_t asic_data_info;
  nonce_verify_info_t nonce_verify_info;
  char asic_name[64];
  int chain_id;
  int addr_interval;
  int sensor_pos[256];
  int sensor_num;
  int start_recv;
  int baudrate;
  pthread_t p_scanhash;
  uint8_t total_work;
  bool new_block;
  uint32_t valid_nonce_total;
  uint32_t invalid_nonce_total;
  uint32_t submit_nonce;
  uint32_t nonce_shift;
  int chain_num;
  bool pld_test_txok;
  void (*init_asic)(runtime_base_t *);
  void (*exit_asic)(runtime_base_t *);
  void (*init_algo)(runtime_base_t *);
  void (*exit_algo)(runtime_base_t *);
  void (*read_register)(int, int, uint8_t, uint8_t);
  void (*write_register)(int, int, uint8_t, uint8_t, uint32_t);
  void (*send_work)(int, uint8_t *);
  void (*set_ticket_mask)(int, uint32_t);
  void (*set_core_timeout)(int, uint32_t);
  void (*set_pt_ctrl)(int, int, int);
  void (*set_pt_result)(int, int, int);
  void (*set_txn_data)(int, uint32_t);
  void (*set_baud)(int, int);
  void (*chain_inactive)(int);
  void (*set_address)(int, uint8_t);
  void (*set_frequency)(int, uint32_t);
  void (*set_nonce_shift)(int, uint32_t, uint32_t *);
  void (*set_vmount)(int, int);
  void (*i2c_send)(int, uint8_t, uint8_t, uint8_t, uint8_t *, int);
  int (*i2c_recv)(int, uint8_t, uint8_t, uint8_t, int);
  void (*i2c_enable)(int, uint8_t);
  void (*i2c_status)(int, uint8_t);
  int (*nonce_verify)(nonce_verify_info_t *, int *, uint32_t);
  bool (*nonce_verify_target_match)(unsigned __int8 *, unsigned __int8 *);
  void (*nonce_submit)(uint8_t *, uint8_t *, int, char *);
  void (*pm_handle)(uint8_t *, int, uint8_t);
  void (*pt_handle)(uint8_t *, int, uint8_t);
  void (*reg_handle)(uint8_t *, int, uint8_t);
  int (*nonce_handle)(uint8_t *, int, uint32_t, int);
};

/* 23 */
struct timezone
{
  int tz_minuteswest;
  int tz_dsttime;
};

/* 29 */
struct reg_list_item_t
{
  uint8_t chainid;
  uint8_t chip_addr;
  uint8_t reg_addr;
  uint32_t reg_data;
  int age;
};

/* 30 */
struct nonce_rb_format
{
  uint8_t Nonce[1344];
  uint8_t chip_addr;
  uint8_t work_id;
  uint8_t nonce_id;
  uint8_t diff0;
  uint8_t sha256[4];
  uint8_t chip_nonce[4];
  uint8_t chain_id;
};

/* 31 */
struct sha2_context
{
  uint32_t total[2];
  uint32_t state[8];
  unsigned __int8 buffer[64];
  unsigned __int8 ipad[64];
  unsigned __int8 opad[64];
};

/* 33 */
typedef unsigned __int64 uint64_t;

/* 32 */
struct CSha256
{
  uint32_t state[8];
  uint64_t count;
  uint8_t buffer[64];
};

/* 34 */
struct sha256_ctx
{
  unsigned int tot_len;
  unsigned int len;
  unsigned __int8 block[128];
  uint32_t h[8];
};

/* 35 */
typedef __blake2b_param blake2b_param;

/* 82 */
struct __blake2b_param
{
  uint8_t digest_length;
  uint8_t key_length;
  uint8_t fanout;
  uint8_t depth;
  uint32_t leaf_length;
  uint64_t node_offset;
  uint8_t node_depth;
  uint8_t inner_length;
  uint8_t reserved[14];
  uint8_t salt[16];
  uint8_t personal[16];
};

/* 36 */
typedef __blake2b_state blake2b_state;

/* 83 */
struct __attribute__((aligned(4))) __blake2b_state
{
  uint64_t h[8];
  uint64_t t[2];
  uint64_t f[2];
  uint8_t buf[256];
  size_t buflen;
  uint8_t last_node;
};

/* 40 */
typedef int __time_t;

/* 37 */
typedef __time_t time_t;

/* 38 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  int tm_gmtoff;
  const char *tm_zone;
};

/* 39 */
typedef int __suseconds_t;

/* 41 */
typedef unsigned __int16 uint16_t;

/* 47 */
enum ringbuffer_type : __int32
{
  ringbuffer_type::BLOCK_TYPE = 0x0,
  ringbuffer_type::POLL_TYPE = 0x1,
};

/* 42 */
typedef ringbuffer_type ringbuffer_type_t;

/* 43 */
typedef __int16 int16_t;

/* 84 */
struct __attribute__((aligned(8))) pthread_cond_t::$37B88C9EDD6CA635C8B2267C69E10A67
{
  int __lock;
  unsigned int __futex;
  unsigned __int64 __total_seq;
  unsigned __int64 __wakeup_seq;
  unsigned __int64 __woken_seq;
  void *__mutex;
  unsigned int __nwaiters;
  unsigned int __broadcast_seq;
};

/* 46 */
union pthread_cond_t
{
  pthread_cond_t::$37B88C9EDD6CA635C8B2267C69E10A67 __data;
  char __size[48];
  __int64 __align;
};

/* 44 */
struct __attribute__((aligned(8))) rt_ringbuffer
{
  unsigned __int8 *buffer_ptr;
  unsigned __int16 read_mirror : 1;
  unsigned __int16 read_index : 15;
  unsigned __int16 write_mirror : 1;
  unsigned __int16 write_index : 15;
  int block_flag;
  unsigned __int16 buffer_size;
  pthread_mutex_t ringbuf_lock;
  pthread_cond_t notfull;
  pthread_cond_t notempty;
  ringbuffer_type_t ringbuffer_type;
};

/* 45 */
enum rt_ringbuffer_state : __int32
{
  rt_ringbuffer_state::RT_RINGBUFFER_EMPTY = 0x0,
  rt_ringbuffer_state::RT_RINGBUFFER_FULL = 0x1,
  rt_ringbuffer_state::RT_RINGBUFFER_HALFFULL = 0x2,
};

/* 48 */
struct chain_info
{
  unsigned __int8 which_chain;
  unsigned __int8 which_i2c;
};

/* 49 */
typedef int __ssize_t;

/* 50 */
struct validData
{
  int n;
  int k;
  blake2b_state *digest;
};

/* 51 */
struct bm174x_clk_div_cnt1
{
  unsigned __int32 div_cnt2 : 16;
  unsigned __int32 rst_clk_chg_en : 1;
  unsigned __int32 ln_clk_chg_en : 1;
  unsigned __int32 reserve : 14;
};

/* 52 */
struct bm174x_clk_div_cnt0
{
  unsigned __int32 div_cnt0 : 16;
  unsigned __int32 div_cnt1 : 16;
};

/* 53 */
struct bm174x_ram_para1
{
  unsigned __int32 subcore_ram_para2 : 13;
  unsigned __int32 reserve0 : 3;
  unsigned __int32 top_ram_para : 13;
  unsigned __int32 reserve1 : 3;
};

/* 54 */
struct bm174x_ram_para0
{
  unsigned __int32 subcore_ram_para0 : 13;
  unsigned __int32 reserve0 : 3;
  unsigned __int32 subcore_ram_para1 : 13;
  unsigned __int32 cust_ram_wa : 1;
  unsigned __int32 reserve1 : 2;
};

/* 55 */
struct bm174x_pt_result
{
  unsigned __int32 ptr_rd : 1;
  unsigned __int32 reserved1 : 7;
  unsigned __int32 ptr_grp_num : 4;
  unsigned __int32 reserved2 : 4;
  unsigned __int32 pt_cur_num : 12;
  unsigned __int32 reserved3 : 4;
};

/* 56 */
struct bm174x_pt_ctrl
{
  unsigned __int32 pt_en : 1;
  unsigned __int32 reserved1 : 15;
  unsigned __int32 pt_num : 11;
  unsigned __int32 reserved2 : 5;
};

/* 57 */
struct bm174x_txn_data
{
  unsigned __int32 txn_zero : 1;
  unsigned __int32 txn_shalow : 1;
  unsigned __int32 reaseve : 30;
};

/* 58 */
struct bm174x_start_nonce_offset
{
  uint32_t sno;
};

/* 59 */
struct bm174x_nonce_shift
{
  unsigned __int32 nonce_shift : 5;
  unsigned __int32 reserve : 27;
};

/* 60 */
struct bm174x_bist_status
{
  unsigned __int32 bist_ok : 1;
  unsigned __int32 bist_crc_error : 1;
  unsigned __int32 reserve : 30;
};

/* 61 */
struct bm174x_analog_mux_control
{
  unsigned __int32 diode_vdd_mux_sel : 3;
  unsigned __int32 reserve : 29;
};

/* 62 */
struct bm174x_pmonitor_ctrl
{
  unsigned __int32 coreid : 6;
  unsigned __int32 vtsel : 2;
  unsigned __int32 reserve : 24;
};

/* 63 */
struct bm174x_time_out
{
  unsigned __int32 timeout : 16;
  unsigned __int32 nonce_tx_timeout : 16;
};

/* 64 */
struct bm174x_chip_status
{
  unsigned __int32 crc5err : 8;
  unsigned __int32 crc16err : 8;
  unsigned __int32 ram_empty : 4;
  unsigned __int32 reserve : 11;
  unsigned __int32 clrerr : 1;
};

/* 65 */
struct bm174x_io_drive_strength
{
  unsigned __int32 co_ds : 4;
  unsigned __int32 bo_ds : 4;
  unsigned __int32 nrsto_ds : 4;
  unsigned __int32 clko_ds : 4;
  unsigned __int32 ro_ds : 4;
  unsigned __int32 tf_df : 4;
  unsigned __int32 rf_ds : 4;
  unsigned __int32 txo_ds : 4;
};

/* 66 */
struct bm174x_core_timeout
{
  uint32_t core_timeout;
};

/* 67 */
struct bm174x_nonce_tx_ok
{
  unsigned __int32 nonce_txok : 16;
  unsigned __int32 nid : 8;
  unsigned __int32 reserve : 7;
  unsigned __int32 txok_en : 1;
};

/* 68 */
struct bm174x_general_i2c_command
{
  unsigned __int32 data : 8;
  unsigned __int32 regaddr : 8;
  unsigned __int32 rwctrl : 1;
  unsigned __int32 devaddr : 7;
  unsigned __int32 ravalid : 1;
  unsigned __int32 reserve : 5;
  unsigned __int32 rwfail : 1;
  unsigned __int32 busy : 1;
};

/* 69 */
struct bm174x_misc_control
{
  unsigned __int32 hashrate_tws : 2;
  unsigned __int32 auto_rst_bp : 1;
  unsigned __int32 reserve4 : 2;
  unsigned __int32 tfs : 2;
  unsigned __int32 reserve3 : 1;
  unsigned __int32 bt8d : 5;
  unsigned __int32 invclko : 1;
  unsigned __int32 rfs : 1;
  unsigned __int32 reservex : 1;
  unsigned __int32 reserve2 : 8;
  unsigned __int32 addrpin : 2;
  unsigned __int32 latch_ci : 1;
  unsigned __int32 reserve1 : 5;
};

/* 70 */
struct bm174x_ticket_mask
{
  unsigned __int32 ticket_mask : 8;
  unsigned __int32 reserve : 24;
};

/* 71 */
struct bm174x_blake_ctrl
{
  unsigned __int32 pll_div : 4;
  unsigned __int32 reserve1 : 16;
  unsigned __int32 blake_round9_en : 1;
  unsigned __int32 blake_round5_en : 1;
  unsigned __int32 blake_round9_self_en : 1;
  unsigned __int32 reserve2 : 8;
  unsigned __int32 blake_icg_bypass : 1;
};

/* 72 */
struct bm174x_pll_parameter
{
  unsigned __int32 postdiv2 : 3;
  unsigned __int32 reserve4 : 1;
  unsigned __int32 postdiv1 : 3;
  unsigned __int32 reserve3 : 1;
  unsigned __int32 refdiv : 6;
  unsigned __int32 reserve2 : 2;
  unsigned __int32 fbdiv : 12;
  unsigned __int32 reserve1 : 3;
  unsigned __int32 locked : 1;
};

/* 73 */
struct bm174x_hash_rate
{
  unsigned __int32 hash_rate : 31;
  unsigned __int32 hash_rate_flag : 1;
};

/* 74 */
struct bm174x_chip_addr
{
  unsigned __int32 chip_addr : 8;
  unsigned __int32 reserve2 : 5;
  unsigned __int32 reserve1 : 3;
  unsigned __int32 chip_name : 16;
};

/* 75 */
struct freq_pll_str
{
  unsigned int freq;
  unsigned int fildiv1;
  unsigned int fildiv2;
  unsigned int vilpll;
};

/* 76 */
struct baud_BT8D_value
{
  uint32_t baud;
  uint8_t bt8d;
  int divider_value;
};

/* 77 */
struct reg_respond
{
  uint8_t header_aa;
  uint8_t header_55;
  uint8_t reg_addr;
  uint8_t reg_data[4];
  uint8_t chip_addr;
  unsigned __int8 crc5 : 5;
  unsigned __int8 reserve : 3;
};

/* 78 */
struct pattern_test_respond
{
  uint8_t header_aa;
  uint8_t header_55;
  uint8_t format;
  uint8_t chip_address;
  uint8_t pt_result_data[1024];
  uint16_t crc16;
};

/* 79 */
struct pmonitor_respond
{
  uint8_t header_aa;
  uint8_t header_55;
  uint8_t format;
  uint8_t pm_data[4];
  uint8_t chip_addr;
  unsigned __int8 crc5 : 5;
  unsigned __int8 reserve : 3;
};

/* 80 */
struct base_type_t
{
  uint8_t chip_addr;
  uint8_t all;
  uint8_t addr;
  uint32_t data;
};

/* 81 */
struct work_input
{
  uint8_t header_55;
  uint8_t header_aa;
  unsigned __int8 test_patten : 1;
  unsigned __int8 reserve : 3;
  unsigned __int8 sno_valid : 1;
  unsigned __int8 type : 3;
  uint8_t workid;
  uint8_t work[140];
  uint16_t crc16;
};

/* 86 */
struct patten_info
{
  int asic_num;
  int core_num;
  int work_bin_len;
  int nonce_bin_len;
  int sol_bin_len;
  int patten_num;
  char dir_root[16];
  char dir_algo[16];
  char dir_asic[16];
  char file_core[16];
  unsigned __int8 *patten_start;
  unsigned __int8 *cur_work;
  uint32_t cur_asic;
  uint32_t cur_core;
  uint32_t cur_patten;
  unsigned __int8 *is_nonce_match;
  int recv_nonces;
  int *asic_recv_nonces;
  int total_pattens;
  float total_rate;
  int start;
  pthread_mutex_t patten_mutex;
};

/* 87 */
struct work_list_info_t
{
  work_list_t work_list[10];
  int work_len;
  int work_list_insert_index;
  pthread_mutex_t work_list_mutex;
};

/* 88 */
typedef unsigned int sizetype;

/* 89 */
typedef patten_info patten_info_t;

/* 90 */
struct zcash_work_info
{
  uint8_t target[32];
  char job_id[256];
  uint8_t header[140];
  int fixed_nonce_bytes;
  pthread_mutex_t work_info_mutex;
};

/* 91 */
struct reg_list_t
{
  reg_list_item_t *reg_list_items;
  pthread_mutex_t reg_list_mutex;
  pthread_t p_reg_list;
  int alive;
};

/* 92 */
struct __attribute__((aligned(2))) nonce_buf
{
  uint32_t p_wr;
  uint32_t p_rd;
  uint32_t nonce_num;
  nonce_rb_format nonce_buffer[511];
};

/* 93 */
enum blake2b_constant : __int32
{
  blake2b_constant::BLAKE2B_BLOCKBYTES = 0x80,
  blake2b_constant::BLAKE2B_OUTBYTES = 0x40,
  blake2b_constant::BLAKE2B_KEYBYTES = 0x40,
  blake2b_constant::BLAKE2B_SALTBYTES = 0x10,
  blake2b_constant::BLAKE2B_PERSONALBYTES = 0x10,
};

/* 94 */
enum blake2s_constant : __int32
{
  blake2s_constant::BLAKE2S_BLOCKBYTES = 0x40,
  blake2s_constant::BLAKE2S_OUTBYTES = 0x20,
  blake2s_constant::BLAKE2S_KEYBYTES = 0x20,
  blake2s_constant::BLAKE2S_SALTBYTES = 0x8,
  blake2s_constant::BLAKE2S_PERSONALBYTES = 0x8,
};

/* 95 */
struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};

/* 96 */
typedef rt_ringbuffer_state RINGBUFFER_STATE;

/* 97 */
enum input_cmd_allchip_type_e : __int32
{
  input_cmd_allchip_type_e::CMD_SINGLE_CHIP = 0x0,
  input_cmd_allchip_type_e::CMD_ALL_CHIP = 0x1,
};

/* 98 */
enum bm174x_reg_address : __int32
{
  bm174x_reg_address::REG_CHIP_ADDRESS = 0x0,
  bm174x_reg_address::REG_HASH_RATE = 0x8,
  bm174x_reg_address::REG_PLL_PARAMETER = 0xC,
  bm174x_reg_address::REG_BLAKE_CTRL = 0x10,
  bm174x_reg_address::REG_TICKET_MASK = 0x14,
  bm174x_reg_address::REG_MISC_CONTROL = 0x1C,
  bm174x_reg_address::REG_GENERAL_I2C_COMMAND = 0x20,
  bm174x_reg_address::REG_NONCE_TX_OK = 0x24,
  bm174x_reg_address::REG_CORE_TIMEOUT = 0x28,
  bm174x_reg_address::REG_IO_DRIVE_STRENGTH = 0x30,
  bm174x_reg_address::REG_CHIP_STATUS = 0x34,
  bm174x_reg_address::REG_TIME_OUT = 0x38,
  bm174x_reg_address::REG_PMONITOR_CTRL = 0x3C,
  bm174x_reg_address::REG_ANALOG_MUX_CONTROL = 0x40,
  bm174x_reg_address::REG_CORE_RESET = 0x44,
  bm174x_reg_address::REG_BIST_STATUS = 0x48,
  bm174x_reg_address::REG_NONCE_SEL = 0x50,
  bm174x_reg_address::REG_START_NONCE_OFFSET = 0x54,
  bm174x_reg_address::REG_TXN_DATA = 0x58,
  bm174x_reg_address::REG_PT_CTRL = 0x5C,
  bm174x_reg_address::REG_PT_RESULT = 0x60,
  bm174x_reg_address::REG_RAM_PARA0 = 0x64,
  bm174x_reg_address::REG_RAM_PARA1 = 0x68,
  bm174x_reg_address::REG_CLK_DIV_CNT0 = 0x6C,
  bm174x_reg_address::REG_CLK_DIV_CNT1 = 0x70,
};

/* 99 */
struct cgpu_info
{
  pthread_t send_id;
  pthread_t receive_id;
  pthread_t show_id;
  pthread_t pic_heart_beat_id;
  pthread_t read_temp;
  pthread_t chain_send_id[3];
  int device_fd;
  int lcd_fd;
  int fpga_fd;
  int key_fd;
  int red_led_fd;
  int green_led_fd;
  int beep_fd;
  unsigned int real_asic_num;
  unsigned int asicNum;
  unsigned int core_num;
  unsigned int AsicType;
  unsigned int chain_num;
  unsigned __int16 frequency;
  unsigned int chain_exist[1];
  unsigned int timeout;
  runtime_base_t *runtime;
};

/* 100 */
enum HARDWARE_EXCEPTION_E : __int32
{
  HARDWARE_EXCEPTION_E::PCBA_IDLE = 0x0,
  HARDWARE_EXCEPTION_E::PCBA_HIGH_TEMP_ALARM = 0x1,
};

/* 101 */
typedef __ssize_t ssize_t;

/* 102 */
struct _IO_marker_0
{
  _IO_marker *_next;
  _IO_FILE *_sbuf;
  int _pos;
};

/* 103 */
enum return_type_e : __int32
{
  return_type_e::RET_SUCCESS = 0x0,
  return_type_e::RET_FAIL = 0x1,
};

/* 104 */
union bm174x_reg
{
  bm174x_chip_addr chip_addr;
  bm174x_hash_rate hash_rate;
  bm174x_pll_parameter pll_parameter;
  bm174x_blake_ctrl blake_ctrl;
  bm174x_ticket_mask ticket_mask;
  bm174x_misc_control misc_control;
  bm174x_general_i2c_command general_i2c_command;
  bm174x_nonce_tx_ok nonce_tx_ok;
  bm174x_core_timeout core_timeout;
  bm174x_io_drive_strength io_drive_strength;
  bm174x_chip_status chip_status;
  bm174x_time_out time_out;
  bm174x_pmonitor_ctrl pmonitor_ctrl;
  bm174x_analog_mux_control analog_mux_control;
  bm174x_bist_status bist_status;
  bm174x_nonce_shift nonce_shift;
  bm174x_start_nonce_offset start_nonce_offset;
  bm174x_txn_data txn_data;
  bm174x_pt_ctrl pt_ctrl;
  bm174x_pt_result pt_result;
  bm174x_ram_para0 ram_para0;
  bm174x_ram_para1 ram_para1;
  bm174x_clk_div_cnt0 clk_div_cnt0;
  bm174x_clk_div_cnt1 clk_div_cnt1;
  uint32_t reg_bin;
};

/* 105 */
enum IOCTL_TYPE : __int32
{
  IOCTL_TYPE::IOCTL_GET_REG = 0x0,
  IOCTL_TYPE::IOCTL_SET_REG = 0x1,
  IOCTL_TYPE::IOCTL_SEND_WORK = 0x2,
  IOCTL_TYPE::IOCTL_SET_ADDRESS = 0x3,
  IOCTL_TYPE::IOCTL_CHAIN_INACTIVE = 0x4,
};

/* 106 */
struct chain_inactive_cmd_t
{
  unsigned __int8 cmd : 4;
  unsigned __int8 all : 1;
  unsigned __int8 type : 3;
  uint8_t length;
  uint8_t reserve1;
  uint8_t reserve2;
  unsigned __int8 crc5 : 5;
  unsigned __int8 reserve3 : 3;
};

/* 107 */
struct set_address_cmd_t
{
  unsigned __int8 cmd : 4;
  unsigned __int8 all : 1;
  unsigned __int8 type : 3;
  uint8_t length;
  uint8_t chip_addr;
  uint8_t reserve1;
  unsigned __int8 crc5 : 5;
  unsigned __int8 reserve2 : 3;
};

/* 108 */
struct set_config_cmd_t
{
  unsigned __int8 cmd : 4;
  unsigned __int8 all : 1;
  unsigned __int8 type : 3;
  uint8_t length;
  uint8_t chip_addr;
  uint8_t regaddr;
  uint8_t regdata[4];
  unsigned __int8 crc5 : 5;
  unsigned __int8 reserve : 3;
};

/* 109 */
struct get_status_cmd_t
{
  unsigned __int8 cmd : 4;
  unsigned __int8 all : 1;
  unsigned __int8 type : 3;
  uint8_t length;
  uint8_t chip_addr;
  uint8_t regaddr;
  unsigned __int8 crc5 : 5;
  unsigned __int8 reserve : 3;
};

/* 110 */
enum input_cmd_length_type_e : __int32
{
  input_cmd_length_type_e::INPUT_CMD_LEN_5 = 0x5,
  input_cmd_length_type_e::INPUT_CMD_LEN_9 = 0x9,
};

/* 111 */
enum input_cmd_type_e : __int32
{
  input_cmd_type_e::CMD_SET_ADDRESS = 0x0,
  input_cmd_type_e::CMD_SET_CONFIG = 0x1,
  input_cmd_type_e::CMD_GET_STATUS = 0x2,
  input_cmd_type_e::CMD_CHAIN_INACTIVE = 0x3,
};

/* 112 */
enum input_data_type_e : __int32
{
  input_data_type_e::WORK_INPUT = 0x1,
  input_data_type_e::COMMAND_INPUT = 0x2,
  input_data_type_e::BIST_INPUT = 0x3,
};

/* 113 */
struct bm174x_reg_value_t
{
  uint32_t chip_addr;
  uint32_t hash_rate;
  uint32_t pll_parameter;
  uint32_t blake_ctrl;
  uint32_t ticket_mask;
  uint32_t misc_control;
  uint32_t general_i2c_command;
  uint32_t nonce_tx_ok;
  uint32_t core_timeout;
  uint32_t io_drive_strength;
  uint32_t chip_status;
  uint32_t time_out;
  uint32_t pmonitor_ctrl;
  uint32_t analog_mux_control;
  uint32_t core_reset;
  uint32_t bist_status;
  uint32_t nonce_shift;
  uint32_t start_nonce_offset;
  uint32_t txn_data;
  uint32_t pt_ctrl;
  uint32_t pt_result;
  uint32_t ram_para0;
  uint32_t ram_para1;
  uint32_t clk_div_cnt0;
  uint32_t clk_div_cnt1;
};

/* 114 */
union __attribute__((aligned(8))) __n64
{
  unsigned __int64 n64_u64[1];
  unsigned __int32 n64_u32[2];
  unsigned __int16 n64_u16[4];
  unsigned __int8 n64_u8[8];
  __int64 n64_i64[1];
  __int32 n64_i32[2];
  __int16 n64_i16[4];
  __int8 n64_i8[8];
  float n64_f32[2];
  double n64_f64[1];
};

/* 115 */
union __attribute__((aligned(8))) __n128
{
  unsigned __int64 n128_u64[2];
  unsigned __int32 n128_u32[4];
  unsigned __int16 n128_u16[8];
  unsigned __int8 n128_u8[16];
  __int64 n128_i64[2];
  __int32 n128_i32[4];
  __int16 n128_i16[8];
  __int8 n128_i8[16];
  float n128_f32[4];
  double n128_f64[2];
};

/* 116 */
typedef __n64 int8x8_t;

/* 117 */
typedef __n64 uint8x8_t;

/* 118 */
typedef __n64 int16x4_t;

/* 119 */
typedef __n64 int32x2_t;

/* 120 */
typedef __n64 uint16x4_t;

/* 121 */
typedef __n64 uint32x2_t;

/* 122 */
typedef __n128 int8x16_t;

/* 123 */
typedef __n128 int16x8_t;

/* 124 */
typedef __n128 int32x4_t;

/* 125 */
typedef __n128 int64x2_t;

/* 126 */
typedef __n128 uint8x16_t;

/* 127 */
typedef __n128 uint16x8_t;

/* 128 */
typedef __n128 uint32x4_t;

/* 129 */
typedef __n128 uint64x2_t;

/* 130 */
typedef __n64 poly8x8_t;

/* 131 */
typedef __n64 poly16x4_t;

/* 132 */
typedef __n128 poly16x8_t;

/* 133 */
typedef __n128 poly8x16_t;

/* 134 */
typedef __n64 float16x4_t;

/* 135 */
typedef __n64 float32x2_t;

/* 136 */
typedef __n128 float16x8_t;

/* 137 */
typedef __n128 float32x4_t;

/* 138 */
typedef __n128 float64x2_t;

/* 139 */
typedef __n128 poly128_t;

/* 140 */
typedef int16x4_t int16x2_t;

/* 141 */
typedef uint16x4_t uint16x2_t;

/* 142 */
typedef float16x4_t float16x2_t;


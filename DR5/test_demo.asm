;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : B2CCB3E2D886653690BBB824B49DF6655F17269DD11D9046F0232137E3D7896A
; Input MD5    : 50A18CBDA8A5118EFE1EA8AC553BEBF5
; Input CRC32  : 765EA75D
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/bitmain_antminer_binaries/DR5/test_demo
; Format      : ELF for ARM (Executable)
; Imagebase   : 8000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libpthread.so.0'
; Needed Library 'libc.so.6'
;
; EABI version: 5
;
; Source File : 'main.c'
; Source File : 'crtstuff.c'
; Source File : 'blake2b.c'
; Source File : 'crtstuff.c'

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x8000
CODE32
dword_8000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD _start+1            ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x1908              ; SHT file offset
DCD 0x5000002           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 8                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x1E                ; Number of entries in SHT
DCW 0x1B                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x8034
CODE32
dword_8034 DCD 0x70000001 ; Type: EXIDX
DCD 0x1618              ; File offset
DCD unk_9618            ; Virtual address
DCD 0x9618              ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_8034          ; Virtual address
DCD 0x8034              ; Physical address
DCD 0x100               ; Size in file image
DCD 0x100               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x134               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x8134              ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_8000          ; Virtual address
DCD 0x8000              ; Physical address
DCD 0x1624              ; Size in file image
DCD 0x1624              ; Size in memory image
DCD 5                   ; Flags
DCD 0x8000              ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x1624              ; File offset
DCD __frame_dummy_init_array_entry ; Virtual address
DCD 0x11624             ; Physical address
DCD 0x140               ; Size in file image
DCD 0x150               ; Size in memory image
DCD 6                   ; Flags
DCD 0x8000              ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x1630              ; File offset
DCD _DYNAMIC            ; Virtual address
DCD 0x11630             ; Physical address
DCD 0xF0                ; Size in file image
DCD 0xF0                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x150               ; File offset
DCD dword_8150          ; Virtual address
DCD 0x8150              ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x8134
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_8150 DCD 4        ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 2, 6, 0x1F       ; ABI: Linux 2.6.31
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0xBD, 0xEC, 0xAE, 0x63, 0xEF, 0x22, 0xF1 ; Desc
DCB 0xA1, 0x57, 0x79, 0xAA, 0xB7, 0x4A, 0x73
DCB 0x25, 0x2F, 0x1C, 0x22, 0xDE, 0xA3
; ELF Hash Table
elf_hash_nbucket DCD 3
elf_hash_nchain DCD 0xE
elf_hash_bucket DCD 0xB, 7, 0xD
elf_hash_chain DCD 0, 0, 1, 0, 2, 0, 4, 5, 3, 8, 9, 0xA
DCD 6, 0xC
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aStrtol - byte_82C0, strtol, \ ; "strtol"
           0, 0x12, 0, 0>
Elf32_Sym <aSprintf+1 - byte_82C0, \ ; "printf"
           printf, 0, 0x12, 0, 0>
Elf32_Sym <aMemcpy - byte_82C0, memcpy, \ ; "memcpy"
           0, 0x12, 0, 0>
Elf32_Sym <aIoGetc - byte_82C0, \ ; "_IO_getc"
           _IO_getc, 0, 0x12, 0, 0>
Elf32_Sym <aGettimeofday - byte_82C0, \ ; "gettimeofday"
           gettimeofday, 0, 0x12, 0, 0>
Elf32_Sym <aMalloc - byte_82C0, malloc, \ ; "malloc"
           0, 0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_82C0, \ ; "__libc_start_main"
           __libc_start_main, 0, 0x12, \
           0, 0>
Elf32_Sym <aGmonStart - byte_82C0, 0, 0,\ ; "__gmon_start__"
           0x20, 0, 0>
Elf32_Sym <aStdin - byte_82C0, \ ; "stdin"
           stdin__GLIBC_2.4, 4, 0x11, 0,\
           0x18>
Elf32_Sym <aMemset - byte_82C0, memset, \ ; "memset"
           0, 0x12, 0, 0>
Elf32_Sym <aJvRegisterclas - byte_82C0, \ ; "_Jv_RegisterClasses"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSprintf - byte_82C0, \ ; "sprintf"
           sprintf, 0, 0x12, 0, 0>
Elf32_Sym <aAbort - byte_82C0, abort, 0,\ ; "abort"
           0x12, 0, 0>
; ELF String Table
byte_82C0 DCB 0
aLibpthreadSo0 DCB "libpthread.so.0",0
aJvRegisterclas DCB "_Jv_RegisterClasses",0
aGmonStart DCB "__gmon_start__",0
aLibcSo6 DCB "libc.so.6",0
aSprintf DCB "sprintf",0
aAbort DCB "abort",0
aStdin DCB "stdin",0
aStrtol DCB "strtol",0
aMemset DCB "memset",0
aMemcpy DCB "memcpy",0
aMalloc DCB "malloc",0
aGettimeofday DCB "gettimeofday",0
aIoGetc DCB "_IO_getc",0
aLibcStartMain DCB "__libc_start_main",0
aGlibc24 DCB "GLIBC_2.4",0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; strtol@@GLIBC_2.4
DCW 2                   ; printf@@GLIBC_2.4
DCW 2                   ; memcpy@@GLIBC_2.4
DCW 2                   ; _IO_getc@@GLIBC_2.4
DCW 2                   ; gettimeofday@@GLIBC_2.4
DCW 2                   ; malloc@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; stdin@@GLIBC_2.4
DCW 2                   ; memset@@GLIBC_2.4
DCW 0                   ; local  symbol: _Jv_RegisterClasses
DCW 2                   ; sprintf@@GLIBC_2.4
DCW 2                   ; abort@@GLIBC_2.4
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_82C0, \
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_82C0, 0>
; ELF REL Relocation Table
Elf32_Rel <0x11758, 0x815> ; R_ARM_GLOB_DAT __gmon_start__
Elf32_Rel <0x11768, 0x914> ; R_ARM_COPY stdin
; ELF JMPREL Relocation Table
Elf32_Rel <0x1172C, 0x116> ; R_ARM_JUMP_SLOT strtol
Elf32_Rel <0x11730, 0x216> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x11734, 0x316> ; R_ARM_JUMP_SLOT memcpy
Elf32_Rel <0x11738, 0x416> ; R_ARM_JUMP_SLOT _IO_getc
Elf32_Rel <0x1173C, 0x516> ; R_ARM_JUMP_SLOT gettimeofday
Elf32_Rel <0x11740, 0x616> ; R_ARM_JUMP_SLOT malloc
Elf32_Rel <0x11744, 0x716> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x11748, 0x816> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x1174C, 0xA16> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x11750, 0xC16> ; R_ARM_JUMP_SLOT sprintf
Elf32_Rel <0x11754, 0xD16> ; R_ARM_JUMP_SLOT abort
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x8404
CODE16


; Alternative name is '_init'

; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              call_gmon_start
NOP
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x840E
CODE32
DCW 0
; LOAD ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x8410
CODE32



; void sub_8410()
sub_8410
PUSH            {LR}
LDR             LR, =_GLOBAL_OFFSET_TABLE_ ; PIC mode
NOP
LDR             PC, [LR,#(off_11728 - 0x11720)]!
; End of function sub_8410

off_8420 DCD _GLOBAL_OFFSET_TABLE_
; [0000000C BYTES: COLLAPSED FUNCTION strtol]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION memcpy]
; [0000000C BYTES: COLLAPSED FUNCTION _IO_getc]
; [0000000C BYTES: COLLAPSED FUNCTION gettimeofday]
; [0000000C BYTES: COLLAPSED FUNCTION malloc]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
CODE16
; [00000004 BYTES: COLLAPSED FUNCTION j___gmon_start__]
CODE32
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION sprintf]
; [0000000C BYTES: COLLAPSED FUNCTION abort]

; Segment type: Pure code
AREA .text, CODE
; ORG 0x84AC
CODE16


; Attributes: bp-based frame fpd=0x15C

; int __fastcall main(int argc, const char **argv, const char **envp)
EXPORT main
main

var_1FD= -0x1FD
var_15C= -0x15C
tv= -0x154
var_14C= -0x14C
dest= -0xA8

PUSH.W          {R4-R9,LR}
SUB             SP, SP, #0x15C
ADD             R7, SP, #0
SUB             SP, SP, #0xE0
MOVS            R2, #0xA1 ; n
LDR             R1, =a00280027002600 ; "002800270026002500240023002200210020001"...
ADD.W           R5, SP, #0x23C+var_1FD
ADD.W           R0, R7, #0x15C+dest ; dest
BIC.W           R5, R5, #0x3F ; '?'
MOV.W           R9, #0
MOV             R6, R5
BLX             memcpy
ADD.W           R1, R7, #0x15C+dest ; src
MOVS            R2, #0xA1 ; n
ADD.W           R0, R7, #0x15C+var_14C ; dest
MOVW            R8, #0x4240
BLX             memcpy
MOV             R1, R9  ; c
MOVS            R2, #0x50 ; 'P' ; n
MOV             R0, R5  ; s
STR.W           R9, [R5,#0x80]
STR.W           R9, [R5,#0x84]
MOV             R4, R9
STR.W           R9, [R5,#0x88]
MOVT            R8, #0xF
STR.W           R9, [R5,#0x8C]
STR.W           R9, [R5,#0x90]
STR.W           R9, [R5,#0x94]
STR.W           R9, [R5,#0x98]
STR.W           R9, [R5,#0x9C]
BLX             memset
ADD.W           R1, R7, #0x15C+var_14C
MOV             R0, R5
MOVS            R2, #0xA0
BL              hex2bin
LDR             R3, [R5]
MOV             R1, R9  ; tz
MOV             R0, R7  ; tv
ADDS            R3, #5
STR.W           R3, [R6],#0x80
BLX             gettimeofday

loc_852E
ADDS            R4, #1
MOV             R0, R6
MOV             R1, R5
STR             R4, [R5,#0x20]
BL              blake2b_hash
CMP             R4, R8
BNE             loc_852E
MOVS            R1, #0  ; tz
ADD.W           R0, R7, #0x15C+tv ; tv
BLX             gettimeofday
LDR             R1, [R7,#0x15C+tv.tv_usec]
LDM.W           R7, {R2,R3}
LDR             R0, [R7,#0x15C+tv]
SUBS            R3, R1, R3
MOVW            R1, #0x4240
RSB.W           R2, R2, R0
ITTT MI
ADDMI.W         R3, R3, #0xF4000
ADDMI.W         R3, R3, #0x240
ADDMI.W         R2, R2, #0xFFFFFFFF
MOVT            R1, #0xF
LDR             R0, =format ; "%d %d:%d\n"
BLX             printf
LDR             R3, =stdin__GLIBC_2.4
LDR             R0, [R3] ; fp
BLX             _IO_getc
MOVS            R0, #0
ADD.W           R7, R7, #0x15C
MOV             SP, R7
POP.W           {R4-R9,PC}
; End of function main

ALIGN 4
off_8588 DCD a00280027002600 ; "002800270026002500240023002200210020001"...
off_858C DCD format     ; "%d %d:%d\n"
off_8590 DCD stdin__GLIBC_2.4


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT _start
_start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP.W           {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH.W          {R2}    ; stack_end
PUSH.W          {R0}    ; rtld_fini
LDR.W           R12, =(__libc_csu_fini+1)
PUSH.W          {R12}   ; fini
LDR             R0, =(main+1) ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function _start

ALIGN 0x10
off_85C0 DCD __libc_csu_fini+1
off_85C4 DCD main+1
off_85C8 DCD init+1



; int call_gmon_start()
call_gmon_start
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x85D4)
LDR             R2, =(__gmon_start___ptr_0 - 0x11720)
ADD             R3, PC  ; _GLOBAL_OFFSET_TABLE_
LDR             R3, [R3,R2] ; __imp___gmon_start__
CBZ             R3, locret_85DA
B.W             j___gmon_start__

locret_85DA
BX              LR
; End of function call_gmon_start

off_85DC DCD _GLOBAL_OFFSET_TABLE_ - 0x85D4
off_85E0 DCD __gmon_start___ptr_0 - 0x11720



; void *deregister_tm_clones()
deregister_tm_clones
PUSH            {R3,LR}
LDR             R0, =__TMC_END__
LDR             R3, =unk_11767
SUBS            R3, R3, R0
CMP             R3, #6
BHI             loc_85F2

locret_85F0
POP             {R3,PC}

loc_85F2
LDR             R3, =0
CMP             R3, #0
BEQ             locret_85F0
BLX             R3
B               locret_85F0
; End of function deregister_tm_clones

off_85FC DCD __TMC_END__
off_8600 DCD unk_11767
off_8604 DCD 0



; __int64 register_tm_clones()
register_tm_clones
PUSH            {R3,LR}
LDR             R0, =__TMC_END__
LDR             R3, =__TMC_END__
SUBS            R3, R3, R0
ASRS            R3, R3, #2
ADD.W           R3, R3, R3,LSR#31
ASRS            R1, R3, #1
BNE             loc_861C

locret_861A
POP             {R3,PC}

loc_861C
LDR             R2, =0
CMP             R2, #0
BEQ             locret_861A
BLX             R2
B               locret_861A
; End of function register_tm_clones

ALIGN 4
off_8628 DCD __TMC_END__
off_862C DCD __TMC_END__
off_8630 DCD 0



; void *_do_global_dtors_aux()
__do_global_dtors_aux
PUSH            {R4,LR}
LDR             R4, =completed.8605
LDRB            R3, [R4]
CBNZ            R3, locret_8644
BL              deregister_tm_clones
MOVS            R3, #1
STRB            R3, [R4]

locret_8644
POP             {R4,PC}
; End of function __do_global_dtors_aux

ALIGN 4
off_8648 DCD completed.8605



; __int64 frame_dummy()
frame_dummy
LDR             R0, =__JCR_LIST__
PUSH            {R3,LR}
LDR             R3, [R0]
CBZ             R3, loc_865A
LDR             R3, =0
CBZ             R3, loc_865A
BLX             R3

loc_865A
POP.W           {R3,LR}
B.W             register_tm_clones
; End of function frame_dummy

ALIGN 4
off_8664 DCD __JCR_LIST__
off_8668 DCD 0



; int __fastcall bin2hex(int s, unsigned __int8 *, int)
EXPORT bin2hex
bin2hex
PUSH            {R4-R6,LR}
CBZ             R2, locret_8688
MOV             R4, R1
MOV             R5, R0
ADDS            R6, R1, R2

loc_8676
LDRB.W          R2, [R4],#1
MOV             R0, R5  ; s
LDR             R1, =a02x ; "%02x"
ADDS            R5, #2
BLX             sprintf
CMP             R4, R6
BNE             loc_8676

locret_8688
POP             {R4-R6,PC}
; End of function bin2hex

ALIGN 4
off_868C DCD a02x       ; "%02x"



; void *__fastcall abin2hex(unsigned __int8 *, int)
EXPORT abin2hex
abin2hex
PUSH            {R4-R6,LR}
MOV             R6, R0
LSLS            R0, R1, #1
MOV             R4, R1
ADDS            R0, #1  ; size
BLX             malloc
MOV             R5, R0
CBZ             R0, loc_86AA
MOV             R1, R6
MOV             R2, R4
BL              bin2hex

loc_86AA
MOV             R0, R5
POP             {R4-R6,PC}
; End of function abin2hex

ALIGN 0x10



; bool __fastcall hex2bin(int, unsigned __int8 *, int)
EXPORT hex2bin
hex2bin

var_C= -0xC
var_B= -0xB
var_A= -0xA
endptr= -8

PUSH            {R4-R7,LR}
MOVS            R4, #0
LDRB            R3, [R1]
SUB             SP, SP, #0xC
MOV             R5, R2
STRB.W          R4, [SP,#0xC+var_A]
CMP             R3, #0
BEQ             loc_8724
CMP             R2, #0
BEQ             loc_870C
LDRB            R6, [R1,#1]
CMP             R6, #0
BEQ             loc_8710
MOV             R4, R1
SUBS            R7, R0, #1
B               loc_86DE

loc_86D2
LDRB            R3, [R4,#2]
ADDS            R4, #2
CBZ             R3, loc_871A
CBZ             R5, loc_870C
LDRB            R6, [R4,#1]
CBZ             R6, loc_8710

loc_86DE                ; nptr
MOV             R0, SP
ADD             R1, SP, #0xC+endptr ; endptr
MOVS            R2, #0x10 ; base
STRB.W          R3, [SP,#0xC+var_C]
STRB.W          R6, [SP,#0xC+var_B]
SUBS            R5, #1
BLX             strtol
LDR             R3, [SP,#0xC+endptr]
STRB.W          R0, [R7,#1]!
LDRB            R3, [R3]
CMP             R3, #0
BEQ             loc_86D2
MOV             R1, SP
LDR             R0, =aHex2binFailedO ; "hex2bin failed on '%s'"
BLX             printf
MOVS            R0, #0

loc_8708
ADD             SP, SP, #0xC
POP             {R4-R7,PC}

loc_870C
MOVS            R0, #1
B               loc_8708

loc_8710
LDR             R0, =aHex2binStrTrun ; "hex2bin str truncated"
BLX             printf
MOVS            R0, #0
B               loc_8708

loc_871A
RSBS.W          R0, R5, #1
IT CC
MOVCC           R0, #0
B               loc_8708

loc_8724
SUBS            R3, R2, R4
NEGS            R0, R3
ADCS            R0, R3
B               loc_8708
; End of function hex2bin

off_872C DCD aHex2binFailedO ; "hex2bin failed on '%s'"
off_8730 DCD aHex2binStrTrun ; "hex2bin str truncated"


; Attributes: bp-based frame

; int __fastcall blake2b_hash(_DWORD *, char *)
EXPORT blake2b_hash
blake2b_hash

var_121= -0x121

PUSH.W          {R4-R8,LR}
ADD             R7, SP, #0
SUB             SP, SP, #0x160
MOVS            R2, #0
ADD.W           R6, SP, #0x160+var_121
MOV             R5, R0
BIC.W           R6, R6, #0x3F ; '?'
MOV             R3, R2
MOV             R8, R1
MOV             R0, R6
MOVS            R1, #0x20 ; ' '
ADD.W           R4, R6, #0x100
BL              blake2b_init
MOVS            R2, #0x50 ; 'P'
MOV             R0, R6
MOV             R1, R8
BL              blake2b_update
MOV             R0, R6
MOV             R1, R4
BL              blake2b_final
LDM             R4!, {R0-R3}
STR             R0, [R5]
STR             R1, [R5,#4]
STR             R2, [R5,#8]
STR             R3, [R5,#0xC]
LDM             R4!, {R0-R3}
STR             R0, [R5,#0x10]
STR             R1, [R5,#0x14]
STR             R2, [R5,#0x18]
STR             R3, [R5,#0x1C]
MOV             SP, R7
POP.W           {R4-R8,PC}
; End of function blake2b_hash



; Attributes: bp-based frame fpd=0x18C

; __int64 *__fastcall blake2b_compress(int, int)
blake2b_compress

var_324= -0x324
var_31C= -0x31C
var_314= -0x314
var_30C= -0x30C
var_304= -0x304
var_2FC= -0x2FC
var_2F4= -0x2F4
var_2EC= -0x2EC
var_2E4= -0x2E4
var_2DC= -0x2DC
var_2D4= -0x2D4
var_2CC= -0x2CC
var_2C4= -0x2C4
var_2BC= -0x2BC
var_2B4= -0x2B4
var_2AC= -0x2AC
var_2A4= -0x2A4
var_29C= -0x29C
var_294= -0x294
var_28C= -0x28C
var_284= -0x284
var_27C= -0x27C
var_274= -0x274
var_26C= -0x26C
var_264= -0x264
var_25C= -0x25C
var_254= -0x254
var_24C= -0x24C
var_244= -0x244
var_23C= -0x23C
var_234= -0x234
var_22C= -0x22C
var_224= -0x224
var_220= -0x220
var_21C= -0x21C
var_218= -0x218
var_214= -0x214
var_210= -0x210
var_20C= -0x20C
var_208= -0x208
var_204= -0x204
var_1FC= -0x1FC
var_1F8= -0x1F8
var_1F4= -0x1F4
var_1EC= -0x1EC
var_1E8= -0x1E8
var_1E4= -0x1E4
var_1DC= -0x1DC
var_1D8= -0x1D8
var_1D4= -0x1D4
var_1CC= -0x1CC
var_1C8= -0x1C8
var_1C4= -0x1C4
var_1BC= -0x1BC
var_1B4= -0x1B4
var_1AC= -0x1AC
var_1A4= -0x1A4
var_19C= -0x19C
var_194= -0x194
var_18C= -0x18C
var_184= -0x184
var_17C= -0x17C
var_174= -0x174
var_16C= -0x16C
var_164= -0x164
var_15C= -0x15C
var_154= -0x154
var_14C= -0x14C
var_144= -0x144
var_CC= -0xCC
dest= -0xC4
var_4= -4

PUSH.W          {R4-R11,LR}
SUB.W           SP, SP, #0x324
STR             R0, [SP,#0x324+var_1C8]
MOVS            R2, #0xC0 ; n
ADD             R0, SP, #0x324+dest ; dest
ADD             R7, SP, #0x198
STR             R1, [SP,#0x324+var_2A4]
MOVS            R6, #8
LDR             R1, =unk_9518 ; src
BLX             memcpy
LDR             R3, [SP,#0x324+var_1C8]
ADD.W           R12, SP, #0x324+var_1CC
LDR.W           R9, =unk_95D0
ADD.W           R8, R3, #0x78 ; 'x'

loc_87AC
LDRD.W          R0, R1, [R8,#8]!
SUBS            R6, #1
LDRD.W          R2, R3, [R9,#8]!
STRD.W          R0, R1, [R12,#8]!
STRD.W          R2, R3, [R7,#0x18C+var_184]!
BNE             loc_87AC
LDR             R7, [SP,#0x324+var_1C8]
ADD.W           R8, SP, #0x324+var_164
ADD.W           R12, SP, #0x324+var_15C
LDRD.W          R2, R3, [R8]
LDRD.W          R8, R9, [R12]
LDRD.W          R6, R7, [R7,#0x18C+var_CC]
LDR.W           R12, [SP,#0x324+var_1C8]
STRD.W          R6, R7, [SP,#0x324+var_324]
LDRD.W          R0, R1, [SP,#0x324+var_324]
LDRD.W          R6, R7, [R12,#0xC8]
EORS            R1, R3
LDR             R3, [SP,#0x324+var_2A4]
EORS            R0, R2
ADD             R2, SP, #0x324+var_164
STRD.W          R0, R1, [R2]
ADD             R2, SP, #0x324+var_15C
STRD.W          R0, R1, [SP,#0x324+var_29C]
EOR.W           R0, R6, R8
EOR.W           R1, R7, R9
STRD.W          R0, R1, [SP,#0x324+var_294]
STRD.W          R0, R1, [R2]
CMP             R3, #0
BNE.W           loc_921E
ADD             R7, SP, #0x1D0
LDRD.W          R6, R7, [R7,#0x18C+var_18C]
STRD.W          R6, R7, [SP,#0x324+var_2A4]

loc_8818
LDR             R6, [SP,#0x324+var_1C8]
ADD             R7, SP, #0x1D8
ADD.W           R12, SP, #0x324+var_CC

loc_8820
LDRB            R0, [R6,#2]
MOV.W           R11, #0
LDRB.W          R8, [R6,#1]
MOV             R4, R11
LDRB            R1, [R6,#3]
MOV             R3, R11
LDRB            R2, [R6]
MOV.W           R9, R0,LSR#16
LSLS            R0, R0, #0x10
MOV.W           R11, R8,LSR#24
MOV.W           R10, R8,LSL#8
STR.W           R9, [SP,#0x324+var_2F4+4]
MOV.W           R8, R1,LSR#8
LDRB.W          R9, [R6,#5]
LSLS            R1, R1, #0x18
STR             R0, [SP,#0x324+var_2F4]
STR.W           R8, [SP,#0x324+var_2EC+4]
STR.W           R9, [SP,#0x324+var_304]
LDRB.W          R9, [R6,#6]
STR             R1, [SP,#0x324+var_2EC]
LDRB            R5, [R6,#4]
STR.W           R9, [SP,#0x324+var_30C]
LDRD.W          R8, R9, [SP,#0x324+var_2F4]
STR             R4, [SP,#0x324+var_2D4]
STR             R4, [SP,#0x324+var_2CC]
EOR.W           R1, R11, R9
LDR.W           R9, [SP,#0x324+var_304]
EOR.W           R0, R10, R8
EORS            R3, R1
EORS            R2, R0
LDRB            R1, [R6,#7]
STR             R4, [SP,#0x324+var_2C4]
ADDS            R6, #8
MOV.W           R9, R9,LSL#8
STR.W           R9, [SP,#0x324+var_2D4+4]
LSLS            R1, R1, #0x18
LDRD.W          R8, R9, [SP,#0x324+var_2EC]
STR             R1, [SP,#0x324+var_2C4+4]
EOR.W           R3, R3, R9
LDR.W           R9, [SP,#0x324+var_30C]
EOR.W           R2, R2, R8
EORS            R3, R5
EORS            R2, R4
MOV.W           R9, R9,LSL#16
STR.W           R9, [SP,#0x324+var_2CC+4]
LDRD.W          R8, R9, [SP,#0x324+var_2D4]
EOR.W           R2, R2, R8
EOR.W           R3, R3, R9
LDRD.W          R8, R9, [SP,#0x324+var_2CC]
EOR.W           R2, R2, R8
EOR.W           R3, R3, R9
LDRD.W          R8, R9, [SP,#0x324+var_2C4]
EOR.W           R2, R2, R8
EOR.W           R3, R3, R9
STRD.W          R2, R3, [R7,#0x18C+var_184]!
CMP             R7, R12
BNE             loc_8820
ADD             R7, SP, #0x168
ADD.W           R11, SP, #0x324+var_1C4
LDRD.W          R6, R7, [R7,#0x18C+var_18C]
ADD             R1, SP, #0x324+var_1A4
LDRD.W          R10, R11, [R11]
ADD             R5, SP, #0x324+var_184
LDRD.W          R0, R1, [R1]
ADD             R2, SP, #0x324+var_4
STRD.W          R6, R7, [SP,#0x324+var_2DC]
ADD             R7, SP, #0x1B0
LDRD.W          R6, R7, [R7,#0x18C+var_18C]
ADD             R3, SP, #0x324+var_194
STRD.W          R10, R11, [SP,#0x324+var_2B4]
ADD.W           R11, SP, #0x324+var_19C
STRD.W          R0, R1, [SP,#0x324+var_2C4]
ADD             R1, SP, #0x324+var_1B4
LDRD.W          R4, R5, [R5]
ADD.W           R12, SP, #0x324+var_17C
LDRD.W          R10, R11, [R11]
ADD.W           R9, SP, #0x324+dest
LDRD.W          R0, R1, [R1]
STR             R2, [SP,#0x324+var_1CC]
LDRD.W          R2, R3, [R3]
STRD.W          R6, R7, [SP,#0x324+var_2E4]
ADD             R7, SP, #0x1B8
LDRD.W          R6, R7, [R7,#0x18C+var_18C]
STRD.W          R4, R5, [SP,#0x324+var_314]
LDRD.W          R4, R5, [R12]
MOV             R12, R9
STRD.W          R10, R11, [SP,#0x324+var_2EC]
ADD.W           R11, SP, #0x324+var_1AC
STRD.W          R0, R1, [SP,#0x324+var_30C]
ADD             R1, SP, #0x324+var_18C
STRD.W          R2, R3, [SP,#0x324+var_2D4]
ADD             R3, SP, #0x324+var_14C
LDRD.W          R10, R11, [R11]
LDRD.W          R0, R1, [R1]
LDRD.W          R2, R3, [R3]
STRD.W          R6, R7, [SP,#0x324+var_304]
MOV             R6, R4
MOV             R7, R5
STRD.W          R10, R11, [SP,#0x324+var_2FC]
STRD.W          R0, R1, [SP,#0x324+var_2CC]
STRD.W          R2, R3, [SP,#0x324+var_2F4]
B               loc_8974
off_896C DCD unk_9518
off_8970 DCD unk_95D0

loc_8974
LDRB.W          R3, [R12,#2]
ADD.W           R8, SP, #0x324+var_144
LDRB.W          R11, [R12]
ADD.W           R10, SP, #0x324+var_144
LDRB.W          R0, [R12,#6]
LDRB.W          R1, [R12,#4]
LDRB.W          R4, [R12,#3]
ADD.W           R3, R8, R3,LSL#3
ADD.W           R2, R10, R11,LSL#3
ADD.W           R0, R8, R0,LSL#3
LDRD.W          R8, R9, [R3]
ADD.W           R1, R10, R1,LSL#3
STR             R2, [SP,#0x324+var_2AC]
ADD.W           R4, R10, R4,LSL#3
LDRD.W          R10, R11, [SP,#0x324+var_2EC]
LDRD.W          R2, R3, [SP,#0x324+var_2DC]
LDRD.W          R4, R5, [R4]
ADDS.W          R8, R8, R10
ADC.W           R9, R9, R11
ADDS.W          R8, R8, R2
ADC.W           R9, R9, R3
LDRD.W          R2, R3, [SP,#0x324+var_294]
EOR.W           R2, R2, R8
EOR.W           R3, R3, R9
STR             R3, [SP,#0x324+var_26C]
STR             R2, [SP,#0x324+var_26C+4]
LDRD.W          R2, R3, [SP,#0x324+var_26C]
ADDS.W          R10, R6, R2
ADC.W           R11, R7, R3
MOV             R2, R10
STRD.W          R10, R11, [SP,#0x324+var_2DC]
MOV             R3, R11
LDRD.W          R10, R11, [SP,#0x324+var_2EC]
ADDS.W          R4, R4, R8
LDRD.W          R6, R7, [R0]
ADC.W           R5, R5, R9
LDRD.W          R0, R1, [R1]
EOR.W           R3, R3, R11
EOR.W           R2, R2, R10
MOV.W           R8, R3,LSR#24
LDRD.W          R10, R11, [SP,#0x324+var_2CC]
ORR.W           R8, R8, R2,LSL#8
LSRS            R2, R2, #0x18
ADDS.W          R6, R6, R10
ORR.W           R2, R2, R3,LSL#8
ADC.W           R7, R7, R11
LDRD.W          R10, R11, [SP,#0x324+var_2FC]
STR             R2, [SP,#0x324+var_264]
LDRD.W          R2, R3, [SP,#0x324+var_2D4]
STR.W           R8, [SP,#0x324+var_264+4]
ADDS.W          R8, R6, R10
ADC.W           R9, R7, R11
LDRD.W          R10, R11, [SP,#0x324+var_30C]
ADDS            R0, R0, R2
STRD.W          R8, R9, [SP,#0x324+var_2BC]
ADC.W           R1, R1, R3
LDR             R3, [SP,#0x324+var_2AC]
ADDS.W          R8, R0, R10
ADC.W           R9, R1, R11
LDRD.W          R10, R11, [SP,#0x324+var_264]
LDRD.W          R6, R7, [R3]
LDRD.W          R0, R1, [SP,#0x324+var_2BC]
LDRD.W          R2, R3, [SP,#0x324+var_2F4]
STRD.W          R8, R9, [SP,#0x324+var_2FC]
ADDS.W          R8, R4, R10
ADC.W           R9, R5, R11
EORS            R2, R0
EORS            R3, R1
STRD.W          R8, R9, [SP,#0x324+var_30C]
STR             R3, [SP,#0x324+var_22C]
STR             R2, [SP,#0x324+var_22C+4]
LDRD.W          R4, R5, [SP,#0x324+var_26C]
LDRD.W          R2, R3, [SP,#0x324+var_30C]
LDRD.W          R10, R11, [SP,#0x324+var_22C]
LDRB.W          R8, [R12,#7]
EORS            R3, R5
EORS            R2, R4
LDRD.W          R4, R5, [SP,#0x324+var_2C4]
ADDS            R4, R4, R6
ADC.W           R5, R5, R7
LDRD.W          R6, R7, [SP,#0x324+var_304]
ADDS.W          R6, R6, R10
ADC.W           R7, R7, R11
LDRD.W          R10, R11, [SP,#0x324+var_2B4]
STRD.W          R6, R7, [SP,#0x324+var_2AC]
LSRS            R6, R3, #0x10
ADD             R7, SP, #0x1E0
ADDS.W          R0, R4, R10
ORR.W           R6, R6, R2,LSL#16
ADC.W           R1, R5, R11
LDRD.W          R4, R5, [SP,#0x324+var_2FC]
STRD.W          R0, R1, [SP,#0x324+var_2B4]
LSRS            R2, R2, #0x10
LDRD.W          R0, R1, [SP,#0x324+var_2A4]
STR             R6, [SP,#0x324+var_25C+4]
ORR.W           R2, R2, R3,LSL#16
LDRB.W          R10, [R12,#5]
EORS            R0, R4
EORS            R1, R5
STR             R1, [SP,#0x324+var_24C]
ADD.W           R5, R7, R8,LSL#3
STR             R0, [SP,#0x324+var_24C+4]
LDRD.W          R8, R9, [SP,#0x324+var_2E4]
LDRD.W          R6, R7, [SP,#0x324+var_24C]
STR             R2, [SP,#0x324+var_25C]
LDRD.W          R2, R3, [SP,#0x324+var_29C]
ADDS.W          R8, R8, R6
LDRD.W          R0, R1, [SP,#0x324+var_2AC]
ADC.W           R9, R9, R7
LDRD.W          R6, R7, [SP,#0x324+var_2B4]
STRD.W          R8, R9, [SP,#0x324+var_2E4]
LDRD.W          R8, R9, [SP,#0x324+var_2CC]
EORS            R2, R6
EORS            R3, R7
STR             R3, [SP,#0x324+var_28C]
EOR.W           R1, R1, R9
STR             R2, [SP,#0x324+var_28C+4]
ADD.W           R9, SP, #0x324+var_144
LDRD.W          R6, R7, [SP,#0x324+var_28C]
EOR.W           R0, R0, R8
ADD.W           R10, R9, R10,LSL#3
LDRD.W          R8, R9, [SP,#0x324+var_314]
LSRS            R3, R1, #0x18
LDRB.W          R11, [R12,#1]
ORR.W           R3, R3, R0,LSL#8
LDRB.W          R4, [R12,#0xA]
ADDS.W          R8, R8, R6
MOV.W           R0, R0,LSR#24
ADC.W           R9, R9, R7
STR             R3, [SP,#0x324+var_220]
STRD.W          R8, R9, [SP,#0x324+var_314]
ADD             R7, SP, #0x1E0
LDRD.W          R2, R3, [SP,#0x324+var_2DC]
ADD.W           R11, R7, R11,LSL#3
LDRD.W          R8, R9, [SP,#0x324+var_25C]
ORR.W           R0, R0, R1,LSL#8
ADDS.W          R8, R8, R2
ADC.W           R9, R9, R3
STRD.W          R8, R9, [SP,#0x324+var_2DC]
LDRD.W          R6, R7, [SP,#0x324+var_2D4]
LDRD.W          R8, R9, [SP,#0x324+var_2E4]
LDRD.W          R2, R3, [SP,#0x324+var_2DC]
STR             R0, [SP,#0x324+var_224]
EOR.W           R9, R9, R7
ADD             R7, SP, #0x1E0
EOR.W           R8, R8, R6
ADD.W           R4, R7, R4,LSL#3
LDRD.W          R6, R7, [SP,#0x324+var_264]
MOV.W           R1, R9,LSR#24
ORR.W           R1, R1, R8,LSL#8
EORS            R3, R7
EORS            R2, R6
LDRD.W          R6, R7, [R5]
STR             R1, [SP,#0x324+var_244+4]
STRD.W          R6, R7, [SP,#0x324+var_304]
LDRD.W          R6, R7, [R4]
LDRD.W          R4, R5, [SP,#0x324+var_2BC]
STRD.W          R6, R7, [SP,#0x324+var_31C]
LDRD.W          R6, R7, [SP,#0x324+var_304]
ADDS            R4, R4, R6
ADC.W           R5, R5, R7
LDRD.W          R6, R7, [SP,#0x324+var_31C]
STRD.W          R4, R5, [SP,#0x324+var_304]
LDRD.W          R4, R5, [SP,#0x324+var_30C]
LDRD.W          R0, R1, [SP,#0x324+var_304]
ADDS            R4, R4, R6
LDRB.W          R6, [R12,#8]
ADC.W           R5, R5, R7
ADD             R7, SP, #0x1E0
STRD.W          R4, R5, [SP,#0x324+var_2BC]
LSLS            R4, R3, #1
ADD             R5, SP, #0x324+var_224
ORR.W           R4, R4, R2,LSR#31
LSLS            R2, R2, #1
ADD.W           R6, R7, R6,LSL#3
MOV.W           R7, R8,LSR#24
STR             R4, [SP,#0x324+var_254+4]
ORR.W           R2, R2, R3,LSR#31
LDRD.W          R4, R5, [R5]
ORR.W           R7, R7, R9,LSL#8
STR             R2, [SP,#0x324+var_254]
LDRD.W          R2, R3, [SP,#0x324+var_314]
ADDS            R0, R0, R4
STR             R7, [SP,#0x324+var_244]
ADC.W           R1, R1, R5
LDRD.W          R4, R5, [SP,#0x324+var_2C4]
STRD.W          R0, R1, [SP,#0x324+var_30C]
LDRD.W          R0, R1, [R10]
EORS            R2, R4
EORS            R3, R5
LDRD.W          R4, R5, [R11]
MOV.W           R8, R2,LSR#24
LDRD.W          R10, R11, [SP,#0x324+var_2FC]
ORR.W           R8, R8, R3,LSL#8
LDRD.W          R6, R7, [R6]
ADDS.W          R0, R0, R10
ADC.W           R1, R1, R11
LDRD.W          R10, R11, [SP,#0x324+var_2B4]
STRD.W          R0, R1, [SP,#0x324+var_304]
ADDS.W          R0, R4, R10
MOV.W           R10, R3,LSR#24
ADC.W           R1, R5, R11
LDRD.W          R4, R5, [SP,#0x324+var_244]
STRD.W          R0, R1, [SP,#0x324+var_2FC]
ORR.W           R10, R10, R2,LSL#8
LDRD.W          R0, R1, [SP,#0x324+var_304]
STR.W           R10, [SP,#0x324+var_284+4]
ADDS            R0, R0, R4
ADC.W           R1, R1, R5
STRD.W          R0, R1, [SP,#0x324+var_304]
STR.W           R8, [SP,#0x324+var_284]
LDRD.W          R0, R1, [SP,#0x324+var_30C]
LDRD.W          R8, R9, [SP,#0x324+var_22C]
LDRD.W          R4, R5, [SP,#0x324+var_2FC]
LDRB.W          R10, [R12,#9]
EOR.W           R1, R1, R9
EOR.W           R0, R0, R8
LSRS            R3, R1, #0x10
LDRD.W          R8, R9, [SP,#0x324+var_284]
MOV.W           R11, R0,LSR#16
ORR.W           R3, R3, R0,LSL#16
ADDS.W          R4, R4, R8
ORR.W           R11, R11, R1,LSL#16
ADC.W           R5, R5, R9
STR             R3, [SP,#0x324+var_218]
LDRD.W          R8, R9, [SP,#0x324+var_24C]
LDRD.W          R2, R3, [SP,#0x324+var_304]
STR.W           R11, [SP,#0x324+var_21C]
ADD.W           R11, SP, #0x324+var_21C
EOR.W           R2, R2, R8
ADDS.W          R8, R6, R4
EOR.W           R3, R3, R9
ADC.W           R9, R7, R5
LDRD.W          R6, R7, [SP,#0x324+var_254]
LSRS            R1, R3, #0x10
ORR.W           R1, R1, R2,LSL#16
LSRS            R2, R2, #0x10
ADDS.W          R8, R8, R6
ORR.W           R2, R2, R3,LSL#16
ADC.W           R9, R9, R7
STR             R1, [SP,#0x324+var_23C+4]
ADD             R7, SP, #0x1E0
STR             R2, [SP,#0x324+var_23C]
ADD.W           R0, R7, R10,LSL#3
LDRD.W          R10, R11, [R11]
LDRD.W          R6, R7, [SP,#0x324+var_23C]
ADD             R1, SP, #0x324+var_20C
EOR.W           R2, R8, R10
EOR.W           R3, R9, R11
STR             R3, [SP,#0x324+var_20C]
STR             R2, [SP,#0x324+var_208]
LDRD.W          R2, R3, [SP,#0x324+var_2E4]
LDRD.W          R10, R11, [R1]
ADDS            R6, R6, R2
ADC.W           R7, R7, R3
ADDS.W          R10, R10, R6
ADC.W           R11, R11, R7
STRD.W          R10, R11, [SP,#0x324+var_2E4]
LDRD.W          R10, R11, [SP,#0x324+var_28C]
LDRD.W          R2, R3, [SP,#0x324+var_2E4]
EOR.W           R4, R4, R10
EOR.W           R5, R5, R11
LDRD.W          R10, R11, [SP,#0x324+var_254]
LSRS            R1, R5, #0x10
ORR.W           R1, R1, R4,LSL#16
EOR.W           R3, R3, R11
EOR.W           R2, R2, R10
LDRD.W          R10, R11, [SP,#0x324+var_244]
STR             R1, [SP,#0x324+var_27C+4]
LSRS            R1, R4, #0x10
EOR.W           R6, R6, R10
MOV.W           R10, R3,LSR#24
ORR.W           R1, R1, R5,LSL#16
EOR.W           R7, R7, R11
ORR.W           R10, R10, R2,LSL#8
ADD.W           R11, SP, #0x324+var_21C
LDRD.W          R4, R5, [R0]
LSRS            R2, R2, #0x18
STR             R1, [SP,#0x324+var_27C]
STR.W           R10, [SP,#0x324+var_204+4]
ORR.W           R2, R2, R3,LSL#8
LDRD.W          R0, R1, [R11]
LSLS            R3, R7, #1
LDRD.W          R10, R11, [SP,#0x324+var_2AC]
ORR.W           R3, R3, R6,LSR#31
ADDS.W          R0, R0, R10
ADC.W           R1, R1, R11
LDRD.W          R10, R11, [SP,#0x324+var_27C]
STRD.W          R0, R1, [SP,#0x324+var_2FC]
LDRD.W          R0, R1, [SP,#0x324+var_314]
ADDS.W          R10, R10, R0
ADC.W           R11, R11, R1
ADDS.W          R4, R4, R8
ADC.W           R5, R5, R9
ADD.W           R9, SP, #0x324+var_204
STRD.W          R10, R11, [SP,#0x324+var_314]
STR             R2, [SP,#0x324+var_204]
LDRD.W          R8, R9, [R9]
STR             R3, [SP,#0x324+var_234+4]
LDRB.W          R10, [R12,#0xB]
ADDS.W          R2, R4, R8
LDRB.W          R0, [R12,#0xE]
ADC.W           R3, R5, R9
ADD             R5, SP, #0x324+var_20C
LDRD.W          R4, R5, [R5]
ADD.W           R9, SP, #0x324+var_144
STRD.W          R2, R3, [SP,#0x324+var_2B4]
LDRB.W          R1, [R12,#0xC]
ADD.W           R0, R9, R0,LSL#3
EORS            R3, R5
LSLS            R5, R6, #1
MOV.W           R8, R3,LSR#16
EORS            R2, R4
ORR.W           R5, R5, R7,LSR#31
ADD.W           R4, R9, R10,LSL#3
ORR.W           R8, R8, R2,LSL#16
LSRS            R2, R2, #0x10
STR             R5, [SP,#0x324+var_234]
ADD.W           R1, R9, R1,LSL#3
LDRD.W          R10, R11, [SP,#0x324+var_2BC]
ORR.W           R2, R2, R3,LSL#16
LDRD.W          R6, R7, [SP,#0x324+var_234]
ADD             R3, SP, #0x324+var_224
STR.W           R8, [SP,#0x324+var_2F4+4]
STR             R2, [SP,#0x324+var_2F4]
ADDS.W          R10, R10, R6
LDRD.W          R2, R3, [R3]
LDRD.W          R8, R9, [R4]
ADC.W           R11, R11, R7
LDRD.W          R4, R5, [SP,#0x324+var_2FC]
LDRD.W          R6, R7, [SP,#0x324+var_27C]
STRD.W          R8, R9, [SP,#0x324+var_2AC]
EORS            R5, R3
EORS            R4, R2
EOR.W           R2, R10, R6
LSLS            R6, R5, #1
EOR.W           R3, R11, R7
LDRD.W          R8, R9, [SP,#0x324+var_284]
ORR.W           R6, R6, R4,LSR#31
STR             R3, [SP,#0x324+var_1FC]
STR             R2, [SP,#0x324+var_1F8]
LSLS            R4, R4, #1
LDRD.W          R2, R3, [SP,#0x324+var_314]
STR             R6, [SP,#0x324+var_210]
ORR.W           R4, R4, R5,LSR#31
LDRD.W          R6, R7, [R0]
ADD             R5, SP, #0x324+var_214
EOR.W           R3, R3, R9
EOR.W           R2, R2, R8
LDRD.W          R8, R9, [SP,#0x324+var_2F4]
LSLS            R0, R3, #1
STRD.W          R6, R7, [SP,#0x324+var_31C]
LDRD.W          R6, R7, [SP,#0x324+var_2E4]
ORR.W           R0, R0, R2,LSR#31
LSLS            R2, R2, #1
STR             R0, [SP,#0x324+var_274+4]
ADDS.W          R8, R8, R6
ORR.W           R2, R2, R3,LSR#31
ADC.W           R9, R9, R7
ADD             R7, SP, #0x128
STRD.W          R8, R9, [SP,#0x324+var_2E4]
LDRD.W          R8, R9, [R7,#0x18C+var_18C]
LDRD.W          R6, R7, [SP,#0x324+var_2FC]
ADDS.W          R8, R8, R6
ADC.W           R9, R9, R7
LDRD.W          R6, R7, [SP,#0x324+var_2AC]
STRD.W          R8, R9, [SP,#0x324+var_2BC]
ADDS.W          R8, R10, R6
ADC.W           R9, R11, R7
STRD.W          R8, R9, [SP,#0x324+var_2FC]
LDRD.W          R8, R9, [SP,#0x324+var_30C]
LDRD.W          R6, R7, [SP,#0x324+var_31C]
LDRD.W          R10, R11, [SP,#0x324+var_304]
LDRD.W          R0, R1, [R1]
STR             R4, [SP,#0x324+var_214]
ADDS.W          R6, R6, R8
LDRD.W          R4, R5, [R5]
ADC.W           R7, R7, R9
ADDS.W          R0, R0, R10
STR             R2, [SP,#0x324+var_274]
ADC.W           R1, R1, R11
LDRB.W          R9, [R12,#0xD]
ADDS            R2, R0, R4
LDRB.W          R8, [R12,#0xF]
ADC.W           R3, R1, R5
LDRD.W          R4, R5, [SP,#0x324+var_274]
STRD.W          R2, R3, [SP,#0x324+var_304]
ADD.W           R12, R12, #0x10
ADDS.W          R10, R6, R4
ADC.W           R11, R7, R5
LDRD.W          R6, R7, [SP,#0x324+var_25C]
STRD.W          R10, R11, [SP,#0x324+var_30C]
EOR.W           R0, R2, R6
EOR.W           R1, R3, R7
MOV             R2, R10
MOV             R3, R11
LDRD.W          R10, R11, [SP,#0x324+var_23C]
ADD             R7, SP, #0x148
STR             R1, [SP,#0x324+var_1EC]
STR             R0, [SP,#0x324+var_1E8]
EOR.W           R3, R3, R11
EOR.W           R2, R2, R10
STR             R3, [SP,#0x324+var_1DC]
ADD             R3, SP, #0x324+var_1EC
LDRD.W          R0, R1, [R3]
ADD.W           R10, SP, #0x324+var_144
STR             R2, [SP,#0x324+var_1D8]
ADD.W           R11, SP, #0x324+var_204
LDRD.W          R2, R3, [SP,#0x324+var_314]
ADD.W           R9, R10, R9,LSL#3
LDRD.W          R4, R5, [R7,#0x18C+var_18C]
LDRD.W          R6, R7, [SP,#0x324+var_2DC]
ADDS            R0, R0, R2
LDRD.W          R10, R11, [R11]
ADC.W           R1, R1, R3
LDRD.W          R2, R3, [SP,#0x324+var_2BC]
ADDS            R4, R4, R6
STRD.W          R0, R1, [SP,#0x324+var_314]
ADC.W           R5, R5, R7
LDRD.W          R6, R7, [SP,#0x324+var_2E4]
STRD.W          R4, R5, [SP,#0x324+var_2AC]
ADD             R0, SP, #0x324+var_144
LDRD.W          R4, R5, [SP,#0x324+var_234]
ADD.W           R8, R0, R8,LSL#3
EOR.W           R7, R7, R11
LDRD.W          R0, R1, [SP,#0x324+var_2AC]
ADD.W           R11, SP, #0x324+var_214
EOR.W           R6, R6, R10
EORS            R3, R5
LDRD.W          R10, R11, [R11]
EORS            R2, R4
LDRD.W          R4, R5, [SP,#0x324+var_314]
EOR.W           R5, R5, R11
EOR.W           R4, R4, R10
LDRD.W          R10, R11, [SP,#0x324+var_274]
EOR.W           R0, R0, R10
EOR.W           R1, R1, R11
MOV.W           R10, R7,LSL#1
MOV.W           R11, R3,LSR#24
ORR.W           R10, R10, R6,LSR#31
ORR.W           R11, R11, R2,LSL#8
LSRS            R2, R2, #0x18
STR.W           R11, [SP,#0x324+var_1F4+4]
MOV.W           R11, R5,LSR#24
STR.W           R10, [SP,#0x324+var_2EC+4]
MOV.W           R10, R6,LSL#1
LSRS            R6, R1, #0x18
ORR.W           R2, R2, R3,LSL#8
ORR.W           R10, R10, R7,LSR#31
ORR.W           R11, R11, R4,LSL#8
ORR.W           R6, R6, R0,LSL#8
STR             R2, [SP,#0x324+var_1F4]
ADD             R7, SP, #0x130
LDRD.W          R2, R3, [SP,#0x324+var_2FC]
STR             R6, [SP,#0x324+var_1D4+4]
LSRS            R4, R4, #0x18
LDRD.W          R6, R7, [R7,#0x18C+var_18C]
STR.W           R11, [SP,#0x324+var_1E4+4]
ORR.W           R4, R4, R5,LSL#8
STR.W           R10, [SP,#0x324+var_2EC]
ADDS            R2, R2, R6
LDRD.W          R10, R11, [R9]
ADC.W           R3, R3, R7
ADD             R7, SP, #0x128
STRD.W          R2, R3, [SP,#0x324+var_2DC]
LDRD.W          R2, R3, [SP,#0x324+var_304]
LDRD.W          R6, R7, [R7,#0x18C+var_18C]
STR             R4, [SP,#0x324+var_1E4]
LSRS            R4, R0, #0x18
ADDS.W          R10, R10, R2
ADC.W           R11, R11, R3
LDRD.W          R2, R3, [SP,#0x324+var_2DC]
ORR.W           R4, R4, R1,LSL#8
ADD             R1, SP, #0x324+var_1D4
EORS            R3, R7
EORS            R2, R6
LDRD.W          R6, R7, [R8]
LSRS            R0, R3, #0x10
LDRD.W          R8, R9, [SP,#0x324+var_30C]
ORR.W           R0, R0, R2,LSL#16
STR             R4, [SP,#0x324+var_1D4]
LSRS            R2, R2, #0x10
ADDS.W          R6, R6, R8
STR             R0, [SP,#0x324+var_29C+4]
ADC.W           R7, R7, R9
ADD.W           R9, SP, #0x324+var_1E4
LDRD.W          R8, R9, [R9]
ORR.W           R2, R2, R3,LSL#16
LDRD.W          R0, R1, [R1]
STR             R2, [SP,#0x324+var_29C]
ADDS.W          R4, R10, R8
ADC.W           R5, R11, R9
ADDS.W          R10, R6, R0
ADD.W           R9, SP, #0x324+var_1DC
ADC.W           R11, R7, R1
LDRD.W          R8, R9, [R9]
ADD             R7, SP, #0x138
LDRD.W          R6, R7, [R7,#0x18C+var_18C]
STRD.W          R4, R5, [SP,#0x324+var_30C]
EOR.W           R1, R11, R9
EOR.W           R0, R10, R8
EORS            R5, R7
LSRS            R3, R1, #0x10
LSRS            R2, R5, #0x10
EORS            R4, R6
ORR.W           R3, R3, R0,LSL#16
STRD.W          R10, R11, [SP,#0x324+var_2FC]
ORR.W           R2, R2, R4,LSL#16
LDRD.W          R10, R11, [SP,#0x324+var_29C]
STR             R3, [SP,#0x324+var_2A4+4]
LSRS            R3, R4, #0x10
STR             R2, [SP,#0x324+var_294+4]
LSRS            R2, R0, #0x10
ORR.W           R3, R3, R5,LSL#16
LDRD.W          R4, R5, [SP,#0x324+var_314]
ORR.W           R2, R2, R1,LSL#16
LDRD.W          R0, R1, [SP,#0x324+var_2BC]
STR             R3, [SP,#0x324+var_294]
STR             R2, [SP,#0x324+var_2A4]
LDRD.W          R2, R3, [SP,#0x324+var_294]
ADDS.W          R10, R10, R0
ADC.W           R11, R11, R1
LDRD.W          R8, R9, [SP,#0x324+var_2AC]
STRD.W          R10, R11, [SP,#0x324+var_304]
ADDS            R2, R2, R4
LDRD.W          R6, R7, [SP,#0x324+var_2A4]
ADC.W           R3, R3, R5
MOV             R0, R2
STRD.W          R2, R3, [SP,#0x324+var_314]
MOV             R1, R3
ADD             R3, SP, #0x324+var_1E4
MOV             R5, R11
LDRD.W          R2, R3, [R3]
ADD.W           R11, SP, #0x324+var_1F4
MOV             R4, R10
LDRD.W          R10, R11, [R11]
ADDS.W          R6, R6, R8
EOR.W           R1, R1, R3
ADC.W           R7, R7, R9
EOR.W           R5, R5, R11
MOV.W           R9, R1,LSL#1
ADD.W           R11, SP, #0x324+var_1D4
MOV.W           R8, R5,LSL#1
EOR.W           R4, R4, R10
LDRD.W          R10, R11, [R11]
EORS            R0, R2
ORR.W           R8, R8, R4,LSR#31
ORR.W           R9, R9, R0,LSR#31
LSLS            R0, R0, #1
STR.W           R8, [SP,#0x324+var_2D4+4]
MOV.W           R8, R4,LSL#1
EOR.W           R3, R7, R11
ORR.W           R0, R0, R1,LSR#31
LSLS            R4, R3, #1
EOR.W           R2, R6, R10
STR             R0, [SP,#0x324+var_2CC]
ORR.W           R8, R8, R5,LSR#31
LDR             R0, [SP,#0x324+var_1CC]
ORR.W           R4, R4, R2,LSR#31
LSLS            R2, R2, #1
STR.W           R9, [SP,#0x324+var_2CC+4]
STR.W           R8, [SP,#0x324+var_2D4]
ORR.W           R2, R2, R3,LSR#31
CMP             R12, R0
STR             R4, [SP,#0x324+var_2C4+4]
STR             R2, [SP,#0x324+var_2C4]
BNE.W           loc_8974
MOV             R4, R6
MOV             R5, R7
LDR             R6, [SP,#0x324+var_2B4]
ADD.W           R10, SP, #0x324+var_14C
LDR             R7, [SP,#0x324+var_2B4+4]
ADD.W           R12, SP, #0x324+var_19C
LDRD.W          R8, R9, [SP,#0x324+var_2F4]
ADD             R0, SP, #0x324+var_1C4
STR             R6, [SP,#0x324+var_1C4]
ADD             R1, SP, #0x324+var_184
STR             R7, [SP,#0x324+var_1C4+4]
LDRD.W          R6, R7, [SP,#0x324+var_2E4]
STRD.W          R8, R9, [R10]
ADD.W           R8, SP, #0x324+var_174
LDRD.W          R10, R11, [SP,#0x324+var_2EC]
STRD.W          R6, R7, [R8]
ADD.W           R8, SP, #0x324+var_1BC
LDRD.W          R6, R7, [SP,#0x324+var_2DC]
STRD.W          R10, R11, [R12]
ADD.W           R12, SP, #0x324+var_164
LDRD.W          R10, R11, [SP,#0x324+var_29C]
STRD.W          R6, R7, [R8]
ADD.W           R8, SP, #0x324+var_16C
LDRD.W          R6, R7, [SP,#0x324+var_304]
STRD.W          R10, R11, [R12]
ADD.W           R12, SP, #0x324+var_194
LDRD.W          R10, R11, [SP,#0x324+var_2D4]
STRD.W          R6, R7, [R8]
ADD.W           R8, SP, #0x324+var_1B4
LDRD.W          R6, R7, [SP,#0x324+var_30C]
STRD.W          R10, R11, [R12]
ADD.W           R12, SP, #0x324+var_15C
LDRD.W          R10, R11, [SP,#0x324+var_294]
STRD.W          R6, R7, [R8]
LDR             R6, [SP,#0x324+var_314]
LDR             R7, [SP,#0x324+var_314+4]
LDRD.W          R8, R9, [SP,#0x324+var_2CC]
STRD.W          R10, R11, [R12]
ADD.W           R10, SP, #0x324+var_18C
STR             R6, [SP,#0x324+var_184]
ADD.W           R12, SP, #0x324+var_154
STR             R7, [SP,#0x324+var_184+4]
LDRD.W          R6, R7, [SP,#0x324+var_2FC]
STRD.W          R8, R9, [R10]
ADD.W           R8, SP, #0x324+var_1AC
LDRD.W          R10, R11, [SP,#0x324+var_2A4]
STRD.W          R6, R7, [R8]
ADD             R6, SP, #0x324+var_17C
LDR             R3, [SP,#0x324+var_1C8]
STRD.W          R10, R11, [R12]
ADD.W           R10, SP, #0x324+var_1A4
STRD.W          R4, R5, [R6]
LDRD.W          R8, R9, [SP,#0x324+var_2C4]
ADD.W           R2, R3, #0x80
LDRD.W          R6, R7, [SP,#0x324+var_2B4]
MOVS            R3, #8
STRD.W          R8, R9, [R10]
LDRD.W          R8, R9, [SP,#0x324+var_314]
B               loc_91FA

loc_91F2
LDRD.W          R6, R7, [R0,#8]!
LDRD.W          R8, R9, [R1,#8]!

loc_91FA
LDRD.W          R4, R5, [R2]
EOR.W           R6, R6, R8
EOR.W           R7, R7, R9
SUBS            R3, #1
EOR.W           R4, R4, R6
EOR.W           R5, R5, R7
STRD.W          R4, R5, [R2],#8
BNE             loc_91F2
ADD.W           SP, SP, #0x324
POP.W           {R4-R11,PC}

loc_921E
ADD.W           R8, SP, #0x324+var_154
LDRD.W          R2, R3, [R8]
MVNS            R0, R2
MVNS            R1, R3
STRD.W          R0, R1, [SP,#0x324+var_2A4]
STRD.W          R0, R1, [R8]
B.W             loc_8818
; End of function blake2b_compress

ALIGN 4



; __int64 *__fastcall blake2b_update(__int64 *result, char *, int)
EXPORT blake2b_update
blake2b_update
PUSH.W          {R3-R11,LR}
MOV             R8, R0
CMP             R2, #0
BEQ             locret_92B4
LDR.W           R3, [R0,#0xD0]
MOV             R9, R1
ADD.W           R10, R1, R2
MOVS            R6, #0x7F
MOVS            R7, #0
MOV.W           R11, #0
B               loc_9266

loc_9256
LDRB.W          R1, [R9],#1
STR.W           R3, [R8,#0xD0]
CMP             R9, R10
STRB.W          R1, [R8,R2]
BEQ             locret_92B4

loc_9266
CMP             R3, #0x80
MOV             R2, R3
ADD.W           R3, R3, #1
BNE             loc_9256
LDRD.W          R4, R5, [R8,#0xC0]
MOV             R0, R8
MOVS            R1, #0
ADDS            R4, #0x80
ADC.W           R5, R5, #0
CMP             R7, R5
IT EQ
CMPEQ           R6, R4
STRD.W          R4, R5, [R8,#0xC0]
BCC             loc_9298
LDRD.W          R4, R5, [R8,#0xC8]
ADDS            R4, #1
ADC.W           R5, R5, #0
STRD.W          R4, R5, [R8,#0xC8]

loc_9298
BL              blake2b_compress
STR.W           R11, [R8,#0xD0]
MOVS            R3, #1
LDRB.W          R1, [R9],#1
MOVS            R2, #0
STR.W           R3, [R8,#0xD0]
CMP             R9, R10
STRB.W          R1, [R8,R2]
BNE             loc_9266

locret_92B4
POP.W           {R3-R11,PC}
; End of function blake2b_update




; int __fastcall blake2b_init(int, int, char *, unsigned int)
EXPORT blake2b_init
blake2b_init
PUSH.W          {R4-R10,LR}
MOV             R8, R0
SUBS            R0, R1, #1
CMP             R0, #0x3F ; '?'
BHI             loc_9338
CMP             R3, #0x40 ; '@'
BHI             loc_9338
LDR             R0, =unk_95D0
ADD.W           R6, R8, #0x78 ; 'x'
ADD.W           R7, R0, #0x40 ; '@'

loc_92D2
LDRD.W          R4, R5, [R0,#8]!
CMP             R0, R7
STRD.W          R4, R5, [R6,#8]!
BNE             loc_92D2
EOR.W           R10, R1, #0x1000000
LDRD.W          R4, R5, [R8,#0x80]
EOR.W           R10, R10, #0x10000
MOV.W           R12, #0
EOR.W           R10, R10, R3,LSL#8
MOV             R0, R12
MOV             R9, R3
STR.W           R1, [R8,#0xD4]
EOR.W           R6, R4, R10
MOV             R7, R5
MOVS            R4, #0
MOVS            R5, #0
STRD.W          R6, R7, [R8,#0x80]
STR.W           R12, [R8,#0xD0]
STRD.W          R4, R5, [R8,#0xC0]
STRD.W          R4, R5, [R8,#0xC8]

loc_9314
STRB.W          R0, [R8,R9]
ADD.W           R9, R9, #1
CMP.W           R9, #0x80
BNE             loc_9314
CBZ             R3, loc_9332
MOV             R1, R2
MOV             R0, R8
MOV             R2, R3
BL              blake2b_update
STR.W           R9, [R8,#0xD0]

loc_9332
MOVS            R0, #0
POP.W           {R4-R10,PC}

loc_9338
MOV.W           R0, #0xFFFFFFFF
POP.W           {R4-R10,PC}
; End of function blake2b_init

off_9340 DCD unk_95D0



; __int64 *__fastcall blake2b_final(int, int)
EXPORT blake2b_final
blake2b_final
PUSH            {R3-R7,LR}
MOV             R7, R1
LDRD.W          R4, R5, [R0,#0xC0]
MOVS            R3, #0
MOV             R6, R0
LDR.W           R1, [R0,#0xD0]
ADDS            R4, R4, R1
MOV             R2, R1
ADC.W           R5, R5, R3
CMP             R5, R3
IT EQ
CMPEQ           R4, R2
STRD.W          R4, R5, [R0,#0xC0]
BCS             loc_9376
LDRD.W          R2, R3, [R0,#0xC8]
ADDS            R2, #1
ADC.W           R3, R3, #0
STRD.W          R2, R3, [R0,#0xC8]

loc_9376
CMP             R1, #0x7F
IT LS
MOVLS           R3, #0
BHI             loc_938A

loc_937E
STRB            R3, [R6,R1]
ADDS            R1, #1
CMP             R1, #0x80
BNE             loc_937E
STR.W           R1, [R6,#0xD0]

loc_938A
MOV             R0, R6
MOVS            R1, #1
BL              blake2b_compress
LDR.W           R3, [R6,#0xD4]
CBZ             R3, locret_93D4
MOVS            R3, #0

loc_939A
LSRS            R1, R3, #3
AND.W           R2, R3, #7
LSLS            R2, R2, #3
ADDS            R1, #0x10
ADD.W           R4, R6, R1,LSL#3
LDR.W           R5, [R6,R1,LSL#3]
RSB.W           R0, R2, #0x20 ; ' '
LDR             R4, [R4,#4]
SUB.W           R1, R2, #0x20 ; ' '
LSR.W           R2, R5, R2
LSL.W           R0, R4, R0
LSR.W           R1, R4, R1
ORRS            R2, R0
ORRS            R2, R1
STRB            R2, [R7,R3]
ADDS            R3, #1
LDR.W           R2, [R6,#0xD4]
CMP             R2, R3
BHI             loc_939A
POP             {R3-R7,PC}

locret_93D4
POP             {R3-R7,PC}
; End of function blake2b_final

ALIGN 4



; int __fastcall init(int, int, int)
EXPORT init
init
PUSH.W          {R3-R9,LR}
MOV             R6, R0
LDR             R5, =(__frame_dummy_init_array_entry - 0x93EC)
MOV             R7, R1
LDR.W           R9, =(__do_global_dtors_aux_fini_array_entry - 0x93F2)
MOV             R8, R2
ADD             R5, PC  ; __frame_dummy_init_array_entry
BL              .init_proc
ADD             R9, PC  ; __do_global_dtors_aux_fini_array_entry
RSB.W           R9, R5, R9
MOVS.W          R9, R9,ASR#2
BEQ             locret_9410
SUBS            R5, #4
MOVS            R4, #0

loc_93FE
LDR.W           R3, [R5,#4]!
MOV             R0, R6
MOV             R1, R7
MOV             R2, R8
ADDS            R4, #1
BLX             R3
CMP             R4, R9
BNE             loc_93FE

locret_9410
POP.W           {R3-R9,PC}
; End of function init

off_9414 DCD __frame_dummy_init_array_entry - 0x93EC
off_9418 DCD __do_global_dtors_aux_fini_array_entry - 0x93F2



EXPORT __libc_csu_fini
__libc_csu_fini
BX              LR
; End of function __libc_csu_fini

ALIGN 0x10
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x9420
CODE16


; Alternative name is '_fini'

; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
NOP
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x9426
CODE32
DCW 0
; LOAD ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY, ALIGN=3
; ORG 0x9428
EXPORT _IO_stdin_used
_IO_stdin_used DCB    1
DCB    0
DCB    2
DCB    0
; const char a02x[]
a02x DCB "%02x",0
ALIGN 4
; const char aHex2binStrTrun[]
aHex2binStrTrun DCB "hex2bin str truncated",0
ALIGN 4
; const char aHex2binFailedO[]
aHex2binFailedO DCB "hex2bin failed on '%s'",0
ALIGN 4
; const char format[]
format DCB "%d %d:%d",0xA,0
ALIGN 0x10
a00280027002600 DCB "0028002700260025002400230022002100"
DCB "20001f001e001d001c001b001a00196309"
DCB "9900001600150014001300120011001000"
DCB "0f000e000d000c000b000a000900080007"
DCB "000600050004000300020001",0
ALIGN 8
unk_9518 DCB    0
DCB    1
DCB    2
DCB    3
DCB    4
DCB    5
DCB    6
DCB    7
DCB    8
DCB    9
DCB  0xA
DCB  0xB
DCB  0xC
DCB  0xD
DCB  0xE
DCB  0xF
DCB  0xE
DCB  0xA
DCB    4
DCB    8
DCB    9
DCB  0xF
DCB  0xD
DCB    6
DCB    1
DCB  0xC
DCB    0
DCB    2
DCB  0xB
DCB    7
DCB    5
DCB    3
DCB  0xB
DCB    8
DCB  0xC
DCB    0
DCB    5
DCB    2
DCB  0xF
DCB  0xD
DCB  0xA
DCB  0xE
DCB    3
DCB    6
DCB    7
DCB    1
DCB    9
DCB    4
DCB    7
DCB    9
DCB    3
DCB    1
DCB  0xD
DCB  0xC
DCB  0xB
DCB  0xE
DCB    2
DCB    6
DCB    5
DCB  0xA
DCB    4
DCB    0
DCB  0xF
DCB    8
DCB    9
DCB    0
DCB    5
DCB    7
DCB    2
DCB    4
DCB  0xA
DCB  0xF
DCB  0xE
DCB    1
DCB  0xB
DCB  0xC
DCB    6
DCB    8
DCB    3
DCB  0xD
DCB    2
DCB  0xC
DCB    6
DCB  0xA
DCB    0
DCB  0xB
DCB    8
DCB    3
DCB    4
DCB  0xD
DCB    7
DCB    5
DCB  0xF
DCB  0xE
DCB    1
DCB    9
DCB  0xC
DCB    5
DCB    1
DCB  0xF
DCB  0xE
DCB  0xD
DCB    4
DCB  0xA
DCB    0
DCB    7
DCB    6
DCB    3
DCB    9
DCB    2
DCB    8
DCB  0xB
DCB  0xD
DCB  0xB
DCB    7
DCB  0xE
DCB  0xC
DCB    1
DCB    3
DCB    9
DCB    5
DCB    0
DCB  0xF
DCB    4
DCB    8
DCB    6
DCB    2
DCB  0xA
DCB    6
DCB  0xF
DCB  0xE
DCB    9
DCB  0xB
DCB    3
DCB    0
DCB    8
DCB  0xC
DCB    2
DCB  0xD
DCB    7
DCB    1
DCB    4
DCB  0xA
DCB    5
DCB  0xA
DCB    2
DCB    8
DCB    4
DCB    7
DCB    6
DCB    1
DCB    5
DCB  0xF
DCB  0xB
DCB    9
DCB  0xE
DCB    3
DCB  0xC
DCB  0xD
DCB    0
DCB    0
DCB    1
DCB    2
DCB    3
DCB    4
DCB    5
DCB    6
DCB    7
DCB    8
DCB    9
DCB  0xA
DCB  0xB
DCB  0xC
DCB  0xD
DCB  0xE
DCB  0xF
DCB  0xE
DCB  0xA
DCB    4
DCB    8
DCB    9
DCB  0xF
DCB  0xD
DCB    6
unk_95D0 DCB    1
DCB  0xC
DCB    0
DCB    2
DCB  0xB
DCB    7
DCB    5
DCB    3
blake2b_iv DCB    8
DCB 0xC9
DCB 0xBC
DCB 0xF3
DCB 0x67 ; g
DCB 0xE6
DCB    9
DCB 0x6A ; j
DCB 0x3B ; ;
DCB 0xA7
DCB 0xCA
DCB 0x84
DCB 0x85
DCB 0xAE
DCB 0x67 ; g
DCB 0xBB
DCB 0x2B ; +
DCB 0xF8
DCB 0x94
DCB 0xFE
DCB 0x72 ; r
DCB 0xF3
DCB 0x6E ; n
DCB 0x3C ; <
DCB 0xF1
DCB 0x36 ; 6
DCB 0x1D
DCB 0x5F ; _
DCB 0x3A ; :
DCB 0xF5
DCB 0x4F ; O
DCB 0xA5
DCB 0xD1
DCB 0x82
DCB 0xE6
DCB 0xAD
DCB 0x7F ; 
DCB 0x52 ; R
DCB  0xE
DCB 0x51 ; Q
DCB 0x1F
DCB 0x6C ; l
DCB 0x3E ; >
DCB 0x2B ; +
DCB 0x8C
DCB 0x68 ; h
DCB    5
DCB 0x9B
DCB 0x6B ; k
DCB 0xBD
DCB 0x41 ; A
DCB 0xFB
DCB 0xAB
DCB 0xD9
DCB 0x83
DCB 0x1F
unk_9610 DCB 0x79 ; y
DCB 0x21 ; !
DCB 0x7E ; ~
DCB 0x13
DCB 0x19
DCB 0xCD
DCB 0xE0
DCB 0x5B ; [
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x9618
unk_9618 DCB 0x7C ; |
DCB 0xEF
DCB 0xFF
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x9620
__FRAME_END__ DCB    0
DCB    0
DCB    0
DCB    0
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x11624
__frame_dummy_init_array_entry DCD frame_dummy+1 ; Alternative name is '__init_array_start'
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x11628
__do_global_dtors_aux_fini_array_entry DCD __do_global_dtors_aux+1 ; Alternative name is '__init_array_end'
; .fini_array ends


; Segment type: Pure data
AREA .jcr, DATA
; ORG 0x1162C
__JCR_LIST__ DCD 0      ; Alternative name is '__JCR_END__'
; .jcr ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x11630
_DYNAMIC Elf32_Dyn <1, <1>> ; DT_NEEDED libpthread.so.0
Elf32_Dyn <1, <0x34>>   ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x8405>> ; DT_INIT
Elf32_Dyn <0xD, <0x9421>> ; DT_FINI
Elf32_Dyn <0x19, <0x11624>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x11628>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x8194>> ; DT_HASH
Elf32_Dyn <5, <0x82C0>> ; DT_STRTAB
Elf32_Dyn <6, <0x81E0>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0xA0>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x11720>> ; DT_PLTGOT
Elf32_Dyn <2, <0x58>>   ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x83AC>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x839C>> ; DT_REL
Elf32_Dyn <0x12, <0x10>> ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x837C>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <1>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x8360>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x11720
_GLOBAL_OFFSET_TABLE_ DCD _DYNAMIC
DCD 0
off_11728 DCD 0
strtol_ptr DCD __imp_strtol
printf_ptr DCD __imp_printf
memcpy_ptr DCD __imp_memcpy
_IO_getc_ptr DCD __imp__IO_getc
gettimeofday_ptr DCD __imp_gettimeofday
malloc_ptr DCD __imp_malloc
__libc_start_main_ptr DCD __imp___libc_start_main
__gmon_start___ptr DCD __imp___gmon_start__
memset_ptr DCD __imp_memset
sprintf_ptr DCD __imp_sprintf
abort_ptr DCD __imp_abort
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x1175C
EXPORT __data_start
__data_start ALIGN 0x10
EXPORT __dso_handle
__dso_handle DCB    0
DCB    0
DCB    0
DCB    0
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x11764
EXPORT __TMC_END__
__TMC_END__ % 1
% 1
% 1
unk_11767 % 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA, ALIGN=3
; ORG 0x11768
EXPORT stdin__GLIBC_2.4
stdin__GLIBC_2.4 % 4    ; Alternative name is 'stdin'
                        ; Copy of shared data
completed.8605 % 1
ALIGN 0x10
EXPORT vi
vi % 1
% 1
% 1
% 1
; .bss ends


; Segment type: Zero-length
AREA .prgend, DATA, ALIGN=0
; ORG 0x11774
_end_0
; .prgend ends


; Segment type: Externs
; int strtol(const char *nptr, char **endptr, int base)
IMPORT __imp_strtol
; int printf(const char *format, ...)
IMPORT __imp_printf
; void *memcpy(void *dest, const void *src, size_t n)
IMPORT __imp_memcpy
; int _IO_getc(_IO_FILE *fp)
IMPORT __imp__IO_getc
; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
IMPORT __imp_gettimeofday
; void *malloc(size_t size)
IMPORT __imp_malloc
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
; int sprintf(char *s, const char *format, ...)
IMPORT __imp_sprintf
; void abort(void)
IMPORT __imp_abort
IMPORT __imp___gmon_start__, WEAK
IMPORT _Jv_RegisterClasses, WEAK


; Segment type: Absolute symbols
__bss_start__ = 0x11764
_bss_end__ = 0x11774
_edata = 0x11764
__bss_end__ = 0x11774
_end = 0x11774
__end__ = 0x11774
__bss_start = 0x11764

END _start

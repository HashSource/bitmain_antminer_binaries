;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 00500755F72420E3C084E0EA6ECFE71B7989A219A972C2DB5E34818F3F750AB4
; Input MD5    : F552505DCF1E7C61BE414A40D6352684
; Input CRC32  : 4AC6D9DF
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/bitmain_antminer_binaries/S9SES9KTestJig/bitmain_axi.ko
; Format      : ELF for ARM (Relocatable)
;
; EABI version: 5
;
; Source File : 'axi_fpga.c'
; Source File : 'bitmain_axi.mod.c'

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA .text, CODE
CODE32



; int axi_fpga_dev_open()
axi_fpga_dev_open
; __unwind {
MOV             R0, #0
BX              LR
; } // starts at 0
; End of function axi_fpga_dev_open




; int axi_fpga_dev_release()
axi_fpga_dev_release
; __unwind {
MOV             R0, #0
BX              LR
; } // starts at 8
; End of function axi_fpga_dev_release




; int __fastcall axi_fpga_dev_mmap(int, _DWORD *, int)
axi_fpga_dev_mmap

var_C= -0xC

; __unwind {
PUSH            {R0-R2,LR}
MOV             R0, R1
LDR             R3, [R1,#0x28]
LDR             R2, [R1,#0x24]
ORR             R3, R3, #0x4000000
BIC             R2, R2, #0x3C ; '<'
ORR             R3, R3, #0x44000
STR             R2, [R1,#0x24]
STR             R3, [R1,#0x28]
LDM             R1, {R1,R3}
STR             R2, [SP,#0xC+var_C]
MOV             R2, #0x40000
RSB             R3, R1, R3
BL              remap_pfn_range
CMP             R0, #0
BEQ             loc_5C
LDR             R0, =aAxiFpgaDevMmap ; "axi_fpga_dev_mmap error!\n"
BL              printk
MOV             R0, #0xFFFFFFF5

loc_5C
ADD             SP, SP, #0xC
POP             {PC}
; End of function axi_fpga_dev_mmap

off_64 DCD aAxiFpgaDevMmap ; "axi_fpga_dev_mmap error!\n"
; } // starts at 10
; .text ends


; Segment type: Pure code
AREA .init.text, CODE
; ORG 0x68
CODE32


; Alternative name is 'axi_fpga_dev_init'

; int __fastcall init_module(int, int)
EXPORT init_module
init_module

var_8= -8

PUSH            {R0,R1,R4-R6,LR}
LDR             R4, =axi_fpga_dev_num
LDR             R0, =aInAxiFpgaDrive ; "In axi fpga driver!\n"
BL              printk
MOV             R1, #0
MOV             R0, R4
MOV             R2, #1
LDR             R3, =aAxiFpgaDev ; "axi_fpga_dev"
MOV             R6, R4
BL              alloc_chrdev_region
SUBS            R5, R0, #0
LDRLT           R0, =aAllocAxiFpgaDe ; "alloc axi_fpga_dev fail!\n"
BLT             loc_E8
LDR             R3, =kmalloc_caches
LDR             R1, =0x24000C0
LDR             R0, [R3,#0x18]
BL              kmem_cache_alloc
CMP             R0, #0
STR             R0, [R4,#(p_axi_fpga_dev - 0xC98)]
LDREQ           R0, =aKmallocCdevFai ; "kmalloc cdev fail!\n"
BEQ             loc_11C
LDR             R1, =axi_fpga_dev_fops
BL              cdev_init
LDR             R0, [R4,#(p_axi_fpga_dev - 0xC98)]
LDR             R3, =__this_module
MOV             R2, #1
LDR             R1, [R4]
STR             R3, [R0,#0x24]
BL              cdev_add
SUBS            R5, R0, #0
BEQ             loc_F4
LDR             R0, =aAddAxiFpgaDevF ; "add axi_fpga_dev fail!\n"

loc_E8
BL              printk
MOV             R0, R5
B               loc_1CC

loc_F4
STR             R5, [SP,#8+var_8]
MOV             R1, #0x40000000
LDR             R0, =iomem_resource
MOV             R2, #0x1400
LDR             R3, =aAxiFpgaVirMem ; "axi_fpga_vir_mem"
BL              __request_region
CMP             R0, #0
STR             R0, [R4,#(base_vir_mem_addr - 0xC98)]
BNE             loc_128
LDR             R0, =aRequestMemRegi ; "request_mem_region failed!\n"

loc_11C
BL              printk
MOV             R0, #1
B               loc_1CC

loc_128
LDR             R0, =aRequestMemRegi_0 ; "request_mem_region OK!\n"
BL              printk
MOV             R1, #0x1400
MOV             R0, #0x40000000
BL              ioremap
CMP             R0, #0
MOV             R1, R0
STR             R0, [R4,#(base_vir_addr - 0xC98)]
BNE             loc_164
LDR             R0, =aIoremapFail ; "ioremap fail!\n"
BL              printk
LDR             R1, [R4,#(base_vir_addr - 0xC98)]
LDR             R0, =aBaseVirAddr0xX ; "!!!*base_vir_addr = 0x%x\n"
BL              printk
B               loc_1AC

loc_164
LDR             R0, =aAxiFpgaDevVirt ; "AXI fpga dev virtual address is 0x%x\n"
BL              printk
LDR             R3, [R4,#(base_vir_addr - 0xC98)]
LDR             R1, [R3]
DSB             SY
LDR             R5, =aAxiFpgaDev ; "axi_fpga_dev"
LDR             R4, =axi_fpga_dev_num
LDR             R0, =aBaseVirAddr0xX_0 ; "*base_vir_addr = 0x%x\n"
BL              printk
LDR             R0, =__this_module
MOV             R1, R5
ADD             R2, R4, #0x10
BL              __class_create
CMN             R0, #0x1000
STR             R0, [R6,#(axi_fpga_class - 0xC98)]
BLS             loc_1B4
LDR             R0, =aErrFailedInCre ; "Err:failed in creating axi fpga class."...
BL              printk

loc_1AC
MOV             R0, #0xFFFFFFFF
B               loc_1CC

loc_1B4
MOV             R1, #0
STR             R5, [SP,#8+var_8]
LDR             R2, [R4]
MOV             R3, R1
BL              device_create
MOV             R0, #0

loc_1CC
ADD             SP, SP, #8
POP             {R4-R6,PC}
; End of function init_module

off_1D4 DCD axi_fpga_dev_num
off_1D8 DCD aInAxiFpgaDrive ; "In axi fpga driver!\n"
off_1DC DCD aAxiFpgaDev ; "axi_fpga_dev"
off_1E0 DCD aAllocAxiFpgaDe ; "alloc axi_fpga_dev fail!\n"
off_1E4 DCD kmalloc_caches
dword_1E8 DCD 0x24000C0
off_1EC DCD aKmallocCdevFai ; "kmalloc cdev fail!\n"
off_1F0 DCD axi_fpga_dev_fops
off_1F4 DCD __this_module
off_1F8 DCD aAddAxiFpgaDevF ; "add axi_fpga_dev fail!\n"
off_1FC DCD iomem_resource
off_200 DCD aAxiFpgaVirMem ; "axi_fpga_vir_mem"
off_204 DCD aRequestMemRegi ; "request_mem_region failed!\n"
off_208 DCD aRequestMemRegi_0 ; "request_mem_region OK!\n"
off_20C DCD aIoremapFail ; "ioremap fail!\n"
off_210 DCD aBaseVirAddr0xX ; "!!!*base_vir_addr = 0x%x\n"
off_214 DCD aAxiFpgaDevVirt ; "AXI fpga dev virtual address is 0x%x\n"
off_218 DCD aBaseVirAddr0xX_0 ; "*base_vir_addr = 0x%x\n"
off_21C DCD aErrFailedInCre ; "Err:failed in creating axi fpga class."...
; .init.text ends


; Segment type: Pure code
AREA .exit.text, CODE
; ORG 0x220
CODE32


; Alternative name is 'axi_fpga_dev_exit'

; int cleanup_module()
EXPORT cleanup_module
cleanup_module
PUSH            {R4,LR}
MOV             R1, #1
LDR             R4, =axi_fpga_dev_num
LDR             R0, [R4]
BL              unregister_chrdev_region
LDR             R0, [R4,#(p_axi_fpga_dev - 0xC98)]
BL              cdev_del
LDR             R0, [R4,#(p_axi_fpga_dev - 0xC98)]
BL              kfree
LDR             R0, [R4,#(base_vir_addr - 0xC98)]
BL              iounmap
MOV             R2, #0x1400
LDR             R0, =iomem_resource
MOV             R1, #0x40000000
BL              __release_region
LDR             R0, [R4,#(axi_fpga_class - 0xC98)]
LDR             R1, [R4]
BL              device_destroy
LDR             R0, [R4,#(axi_fpga_class - 0xC98)]
BL              class_destroy
LDR             R0, =aByeByeAxiFpgaD ; "Bye Bye axi fpga driver!\n"
POP             {R4,LR}
B               printk
; End of function cleanup_module

off_27C DCD axi_fpga_dev_num
off_280 DCD iomem_resource
off_284 DCD aByeByeAxiFpgaD ; "Bye Bye axi fpga driver!\n"
; .exit.text ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x288
axi_fpga_dev_fops DCD __this_module
ALIGN 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCD axi_fpga_dev_mmap
DCD axi_fpga_dev_open
DCB    0
DCB    0
DCB    0
DCB    0
DCD axi_fpga_dev_release
ALIGN 0x80
; .rodata ends


; Segment type: Zero-length
AREA .ARM.extab.init.text, DATA, ALIGN=0
; ORG 0x300
; .ARM.extab.init.text ends


; Segment type: Pure data
AREA .ARM.exidx.init.text, DATA, READONLY
; ORG 0x304
DCD (init_module - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCB 0xAA
DCB    3
DCB 0xB1
DCB 0x80
; .ARM.exidx.init.text ends


; Segment type: Zero-length
AREA .ARM.extab.exit.text, DATA, ALIGN=0
; ORG 0x30C
; .ARM.extab.exit.text ends


; Segment type: Pure data
AREA .ARM.exidx.exit.text, DATA, READONLY
; ORG 0x310
DCD (cleanup_module - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCB 0xB0
DCB 0xB0
DCB 0xA8
DCB 0x80
; .ARM.exidx.exit.text ends


; Segment type: Pure data
AREA .modinfo, DATA, READONLY, ALIGN=0
; ORG 0x318
__UNIQUE_ID_license0 DCB "license=Dual BSD/GPL",0
__module_depends DCB "depends=",0
__UNIQUE_ID_vermagic0 DCB "vermagic=4.6.0-xilinx-g20b57cf-dir"
DCB "ty SMP preempt mod_unload modversi"
DCB "ons ARMv7 p2v8 ",0
; .modinfo ends


; Segment type: Pure data
AREA .rodata.str1.1, DATA, READONLY, ALIGN=0
; ORG 0x38A
aAxiFpgaDevMmap DCB "axi_fpga_dev_mmap error!",0xA,0
aInAxiFpgaDrive DCB "In axi fpga driver!",0xA,0
aAxiFpgaDev DCB "axi_fpga_dev",0
aAllocAxiFpgaDe DCB "alloc axi_fpga_dev fail!",0xA,0
aKmallocCdevFai DCB "kmalloc cdev fail!",0xA,0
aAddAxiFpgaDevF DCB "add axi_fpga_dev fail!",0xA,0
aAxiFpgaVirMem DCB "axi_fpga_vir_mem",0
aRequestMemRegi DCB "request_mem_region failed!",0xA,0
aRequestMemRegi_0 DCB "request_mem_region OK!",0xA,0
aIoremapFail DCB "ioremap fail!",0xA,0
aBaseVirAddr0xX DCB "!!!*base_vir_addr = 0x%x",0xA,0
aAxiFpgaDevVirt DCB "AXI fpga dev virtual address is 0x"
DCB "%x",0xA,0
aBaseVirAddr0xX_0 DCB "*base_vir_addr = 0x%x",0xA,0
aErrFailedInCre DCB "Err:failed in creating axi fpga cl"
DCB "ass.",0xA,0
aByeByeAxiFpgaD DCB "Bye Bye axi fpga driver!",0xA,0
; .rodata.str1.1 ends


; Segment type: Pure data
AREA .ARM.extab, DATA, READONLY
; ORG 0x4FC
unk_4FC DCB    7
DCB 0xB1
DCB    1
DCB 0x81
DCB 0xB0
DCB 0xB0
DCB    0
DCB 0x84
DCB    0
DCB    0
DCB    0
DCB    0
; .ARM.extab ends


; Segment type: Zero-length
AREA .data, DATA, ALIGN=0
; ORG 0x508
; .data ends


; Segment type: Pure data
AREA .gnu.linkonce.this_module, DATA, ALIGN=6
; ORG 0x540
EXPORT __this_module
__this_module DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x74 ; t
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x78 ; x
DCB 0x69 ; i
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCD init_module
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCD cleanup_module
ALIGN 0x20
; .gnu.linkonce.this_module ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x700
DCD (axi_fpga_dev_open - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCB 0xB0
DCB 0xB0
DCB 0xB0
DCB 0x80
DCD (axi_fpga_dev_release - .) AND 0x7FFFFFFF
DCB 0xB0
DCB 0xB0
DCB 0xB0
DCB 0x80
DCD (axi_fpga_dev_mmap - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCD (unk_4FC - .) AND 0x7FFFFFFF
; .ARM.exidx ends


; Segment type: Pure data
AREA __versions, DATA, READONLY
; ORG 0x718
____versions DCB 0xC8
DCB 0xAD
DCB 0x9D
DCB 0x6C ; l
DCB 0x6D ; m
DCB 0x6F ; o
DCB 0x64 ; d
DCB 0x75 ; u
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x6C ; l
DCB 0x61 ; a
DCB 0x79 ; y
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x74 ; t
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE1
DCB 0x16
DCB 0x94
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x71 ; q
DCB 0x75 ; u
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x56 ; V
DCB 0xD7
DCB 0xF9
DCB  0xB
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x6C ; l
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5D ; ]
DCB 0xEA
DCB 0x57 ; W
DCB 0xEE
DCB 0x6B ; k
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x65 ; e
DCB 0x73 ; s
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x94
DCB 0x97
DCB  0xC
DCB 0x22 ; "
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x69 ; i
DCB 0x74 ; t
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC6
DCB 0x10
DCB 0x58 ; X
DCB 0x2E ; .
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x5F ; _
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x77 ; w
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x70 ; p
DCB 0x70 ; p
DCB 0x5F ; _
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x31 ; 1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0xF7
DCB 0x85
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x72 ; r
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2A ; *
DCB 0x4F ; O
DCB 0x75 ; u
DCB 0xB7
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x79 ; y
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5E ; ^
DCB 0xE1
DCB 0x85
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x49 ; I
DCB 0xA0
DCB 0xE1
DCB 0x27 ; '
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0xA9
DCB 0xC5
DCB 0x79 ; y
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x70 ; p
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE5
DCB 0xF6
DCB 0xC4
DCB 0x8B
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5B ; [
DCB 0x4A ; J
DCB 0x53 ; S
DCB 0x5D ; ]
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x64 ; d
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC5
DCB 0x6A ; j
DCB 0x50 ; P
DCB 0x17
DCB 0x6B ; k
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x63 ; c
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9D
DCB 0xCC
DCB 0xB3
DCB 0x2A ; *
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBA
DCB  0xC
DCB 0x7A ; z
DCB    3
DCB 0x6B ; k
DCB 0x66 ; f
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC5
DCB 0x29 ; )
DCB 0x88
DCB 0xF7
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x70 ; p
DCB 0x5F ; _
DCB 0x70 ; p
DCB 0x66 ; f
DCB 0x6E ; n
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x67 ; g
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x39 ; 9
DCB 0xC0
DCB 0xED
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x70 ; p
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x51 ; Q
DCB 0xDB
DCB 0x5C ; \
DCB 0x37 ; 7
DCB 0x63 ; c
DCB 0x6C ; l
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x5F ; _
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x79 ; y
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    6
DCB 0xCF
DCB 0xD6
DCB 0xEF
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x5F ; _
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x77 ; w
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x70 ; p
DCB 0x70 ; p
DCB 0x5F ; _
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x73 ; s
DCB    9
DCB 0x4F ; O
DCB 0xB7
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x6C ; l
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9E
DCB 0x7C ; |
DCB 0x53 ; S
DCB 0x29 ; )
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; __versions ends


; Segment type: Uninitialized
AREA .bss, DATA
; ORG 0xC98
EXPORT axi_fpga_dev_num
axi_fpga_dev_num % 4
EXPORT p_axi_fpga_dev
p_axi_fpga_dev % 4
EXPORT base_vir_mem_addr
base_vir_mem_addr % 4
EXPORT base_vir_addr
base_vir_addr % 4
EXPORT axi_fpga_class
axi_fpga_class % 4      ; Alternative name is '__key.26868'
; .bss ends


; Segment type: Externs
; int __fastcall alloc_chrdev_region(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
IMPORT alloc_chrdev_region
; int __fastcall _class_create(_DWORD, _DWORD, _DWORD)
IMPORT __class_create
IMPORT __aeabi_unwind_cpp_pr0
; int __fastcall class_destroy(_DWORD)
IMPORT class_destroy
; int __fastcall iounmap(_DWORD)
IMPORT iounmap
; int __fastcall remap_pfn_range(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
IMPORT remap_pfn_range
; int __fastcall kfree(_DWORD)
IMPORT kfree
; int __fastcall _release_region(_DWORD, _DWORD, _DWORD)
IMPORT __release_region
; int __fastcall kmem_cache_alloc(_DWORD, _DWORD)
IMPORT kmem_cache_alloc
; int cdev_add(void)
IMPORT cdev_add
; int __fastcall device_create(_DWORD)
IMPORT device_create
; int __fastcall ioremap(_DWORD, _DWORD)
IMPORT ioremap
; int printk(const char *, ...)
IMPORT printk
; int __fastcall unregister_chrdev_region(_DWORD, _DWORD)
IMPORT unregister_chrdev_region
; int __fastcall device_destroy(_DWORD, _DWORD)
IMPORT device_destroy
IMPORT iomem_resource
IMPORT __aeabi_unwind_cpp_pr1
; int __fastcall cdev_init(_DWORD, _DWORD)
IMPORT cdev_init
; _DWORD kmalloc_caches[7]
IMPORT kmalloc_caches
; int __fastcall cdev_del(_DWORD)
IMPORT cdev_del
; int __fastcall _request_region(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
IMPORT __request_region

END

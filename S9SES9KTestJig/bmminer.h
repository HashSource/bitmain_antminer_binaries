/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'bmminer'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct thr_info;
struct cgpu_info;
struct hashtable_bucket;
struct json_error_t;
struct _IO_FILE;
struct _IO_marker;
struct timespec;
struct pool;
struct thread_q;
struct device_drv;
struct api_data;
struct UT_hash_table;
struct UT_hash_bucket;
struct sockaddr;
struct k_item;
struct io_data;
struct hashtable_pair;
struct k_list;
struct siginfo;

/* 1 */
struct Elf32_Sym
{
  unsigned __int32 st_name __offset(OFF32,0x9154);
  unsigned __int32 st_value __off;
  unsigned __int32 st_size;
  unsigned __int8 st_info;
  unsigned __int8 st_other;
  unsigned __int16 st_shndx;
};

/* 2 */
struct Elf32_Rel
{
  unsigned __int32 r_offset;
  unsigned __int32 r_info;
};

/* 3 */
union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249
{
  unsigned __int32 d_val;
  unsigned __int32 d_ptr;
};

/* 4 */
struct Elf32_Dyn
{
  __int32 d_tag;
  union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249 d_un;
};

/* 5 */
struct Elf32_Verneed
{
  unsigned __int16 vn_version;
  unsigned __int16 vn_cnt;
  unsigned __int32 vn_file __offset(OFF32,0x9154);
  unsigned __int32 vn_aux;
  unsigned __int32 vn_next;
};

/* 6 */
struct Elf32_Vernaux
{
  unsigned __int32 vna_hash;
  unsigned __int16 vna_flags;
  unsigned __int16 vna_other;
  unsigned __int32 vna_name __offset(OFF32,0x9154);
  unsigned __int32 vna_next;
};

/* 7 */
struct __va_list
{
  void *__ap;
};

/* 8 */
typedef void _IO_lock_t;

/* 81 */
typedef unsigned __int64 uint64_t;

/* 108 */
typedef int __time_t;

/* 107 */
typedef int __suseconds_t;

/* 70 */
struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};

/* 19 */
typedef unsigned int size_t;

/* 92 */
struct UT_hash_handle
{
  UT_hash_table *tbl;
  void *prev;
  void *next;
  UT_hash_handle *hh_prev;
  UT_hash_handle *hh_next;
  void *key;
  unsigned int keylen;
  unsigned int hashv;
};

/* 9 */
struct work
{
  unsigned __int8 data[128];
  unsigned __int8 midstate[32];
  unsigned __int8 target[32];
  unsigned __int8 hash[32];
  double device_diff;
  uint64_t share_diff;
  int rolls;
  int drv_rolllimit;
  unsigned int nonce;
  thr_info *thr;
  int thr_id;
  pool *pool;
  timeval tv_staged;
  bool mined;
  bool clone;
  bool cloned;
  int rolltime;
  bool longpoll;
  bool stale;
  bool mandatory;
  bool block;
  bool stratum;
  char *job_id;
  uint64_t nonce2;
  size_t nonce2_len;
  char *ntime;
  double sdiff;
  char *nonce1;
  bool gbt;
  char *coinbase;
  int gbt_txns;
  unsigned int work_block;
  unsigned int id;
  UT_hash_handle hh;
  double work_difficulty;
  int subid;
  bool devflag;
  timeval tv_stamp;
  timeval tv_getwork;
  timeval tv_getwork_reply;
  timeval tv_cloned;
  timeval tv_work_start;
  timeval tv_work_found;
  char getwork_mode;
  int version;
};

/* 79 */
typedef unsigned int pthread_t;

/* 158 */
union sem_t
{
  char __size[16];
  int __align;
};

/* 64 */
typedef sem_t cgsem_t;

/* 10 */
struct thr_info
{
  int id;
  int device_thread;
  bool primary_thread;
  pthread_t pth;
  cgsem_t sem;
  thread_q *q;
  cgpu_info *cgpu;
  void *cgpu_data;
  timeval last;
  timeval sick;
  bool pause;
  bool getwork;
  bool work_restart;
  bool work_update;
};

/* 67 */
typedef __int64 int64_t;

/* 85 */
enum pool_enable : __int32
{
  pool_enable::POOL_DISABLED = 0x0,
  pool_enable::POOL_ENABLED = 0x1,
  pool_enable::POOL_REJECTING = 0x2,
};

/* 73 */
typedef int proxytypes_t;

/* 105 */
struct __pthread_internal_slist
{
  __pthread_internal_slist *__next;
};

/* 104 */
typedef __pthread_internal_slist __pthread_slist_t;

/* 170 */
union __pthread_mutex_s::$30DFB618E49C377A3D62C6584A4CBE95
{
  int __spins;
  __pthread_slist_t __list;
};

/* 103 */
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;
  int __kind;
  unsigned int __nusers;
  union
  {
    int __spins;
    __pthread_slist_t __list;
  };
};

/* 76 */
union pthread_mutex_t
{
  __pthread_mutex_s __data;
  char __size[24];
  int __align;
};

/* 167 */
struct pthread_rwlock_t::$FA90A502063B9F6125FA068844E6D607
{
  int __lock;
  unsigned int __nr_readers;
  unsigned int __readers_wakeup;
  unsigned int __writer_wakeup;
  unsigned int __nr_readers_queued;
  unsigned int __nr_writers_queued;
  unsigned __int8 __flags;
  unsigned __int8 __shared;
  unsigned __int8 __pad1;
  unsigned __int8 __pad2;
  int __writer;
};

/* 75 */
union pthread_rwlock_t
{
  pthread_rwlock_t::$FA90A502063B9F6125FA068844E6D607 __data;
  char __size[32];
  int __align;
};

/* 181 */
struct cglock
{
  pthread_mutex_t mutex;
  pthread_rwlock_t rwlock;
};

/* 74 */
typedef cglock cglock_t;

/* 166 */
struct __attribute__((aligned(8))) pthread_cond_t::$37B88C9EDD6CA635C8B2267C69E10A67
{
  int __lock;
  unsigned int __futex;
  unsigned __int64 __total_seq;
  unsigned __int64 __wakeup_seq;
  unsigned __int64 __woken_seq;
  void *__mutex;
  unsigned int __nwaiters;
  unsigned int __broadcast_seq;
};

/* 84 */
union pthread_cond_t
{
  pthread_cond_t::$37B88C9EDD6CA635C8B2267C69E10A67 __data;
  char __size[48];
  __int64 __align;
};

/* 77 */
struct list_head
{
  list_head *next;
  list_head *prev;
};

/* 83 */
typedef __time_t time_t;

/* 12 */
struct cgminer_stats
{
  unsigned int getwork_calls;
  timeval getwork_wait;
  timeval getwork_wait_max;
  timeval getwork_wait_min;
};

/* 82 */
struct cgminer_pool_stats
{
  unsigned int getwork_calls;
  unsigned int getwork_attempts;
  timeval getwork_wait;
  timeval getwork_wait_max;
  timeval getwork_wait_min;
  double getwork_wait_rolling;
  bool hadrolltime;
  bool canroll;
  bool hadexpire;
  unsigned int rolltime;
  double min_diff;
  double max_diff;
  double last_diff;
  unsigned int min_diff_count;
  unsigned int max_diff_count;
  uint64_t times_sent;
  uint64_t bytes_sent;
  uint64_t net_bytes_sent;
  uint64_t times_received;
  uint64_t bytes_received;
  uint64_t net_bytes_received;
};

/* 80 */
struct stratum_work
{
  char *job_id;
  unsigned __int8 **merkle_bin;
  bool clean;
  double diff;
};

/* 86 */
typedef char CURL;

/* 78 */
struct __attribute__((aligned(8))) pool
{
  int pool_no;
  int prio;
  int64_t accepted;
  int64_t rejected;
  int seq_rejects;
  int seq_getfails;
  int solved;
  int64_t diff1;
  char diff[8];
  int quota;
  int quota_gcd;
  int quota_used;
  int works;
  double diff_accepted;
  double diff_rejected;
  double diff_stale;
  bool check_asicboost_over;
  bool support_asicboost;
  bool submit_fail;
  bool idle;
  bool lagging;
  bool probed;
  pool_enable enabled;
  bool submit_old;
  bool removed;
  bool lp_started;
  bool blocking;
  char *hdr_path;
  char *lp_url;
  unsigned int getwork_requested;
  unsigned int stale_shares;
  unsigned int discarded_work;
  unsigned int getfail_occasions;
  unsigned int remotefail_occasions;
  timeval tv_idle;
  double utility;
  int last_shares;
  int shares;
  char *rpc_req;
  char *rpc_url;
  char *rpc_userpass;
  char *rpc_user;
  char *rpc_pass;
  proxytypes_t rpc_proxytype;
  char *rpc_proxy;
  pthread_mutex_t pool_lock;
  cglock_t data_lock;
  thread_q *submit_q;
  thread_q *getwork_q;
  pthread_t longpoll_thread;
  pthread_t test_thread;
  bool testing;
  int curls;
  pthread_cond_t cr_cond;
  list_head curlring;
  time_t last_share_time;
  double last_share_diff;
  uint64_t best_diff;
  uint64_t bad_work;
  cgminer_stats cgminer_stats;
  cgminer_pool_stats cgminer_pool_stats;
  char prev_block[32];
  char *stratum_url;
  bool extranonce_subscribe;
  char *stratum_port;
  int sock;
  char *sockbuf;
  size_t sockbuf_size;
  char *sockaddr_url;
  char *sockaddr_proxy_url;
  char *sockaddr_proxy_port;
  char *nonce1;
  unsigned __int8 *nonce1bin;
  uint64_t nonce2;
  unsigned int n2size;
  char *sessionid;
  bool has_stratum;
  bool stratum_active;
  bool stratum_init;
  bool stratum_notify;
  bool support_vil;
  int version_num;
  int version[4];
  stratum_work swork;
  pthread_t stratum_sthread;
  pthread_t stratum_rthread;
  pthread_mutex_t stratum_lock;
  thread_q *stratum_q;
  int sshares;
  bool has_gbt;
  cglock_t gbt_lock;
  unsigned __int8 previousblockhash[32];
  unsigned __int8 gbt_target[32];
  char *coinbasetxn;
  char *longpollid;
  char *gbt_workid;
  int gbt_expires;
  unsigned int gbt_version;
  unsigned int curtime;
  unsigned int gbt_bits;
  unsigned __int8 *txn_hashes;
  int gbt_txns;
  int height;
  bool gbt_solo;
  unsigned __int8 merklebin[512];
  int transactions;
  char *txn_data;
  unsigned __int8 scriptsig_base[100];
  unsigned __int8 script_pubkey[28];
  int nValue;
  CURL *gbt_curl;
  bool gbt_curl_inuse;
  size_t n1_len;
  unsigned __int8 *coinbase;
  unsigned int coinbase_len;
  int nonce2_offset;
  unsigned __int8 header_bin[128];
  int merkles;
  char prev_hash[68];
  char bbversion[12];
  char nbit[12];
  char ntime[12];
  double next_diff;
  double sdiff;
  unsigned int current_height;
  timeval tv_lastwork;
};

/* 94 */
typedef int ptrdiff_t;

/* 93 */
struct UT_hash_table
{
  UT_hash_bucket *buckets;
  unsigned int num_buckets;
  unsigned int log2_num_buckets;
  unsigned int num_items;
  UT_hash_handle *tail;
  ptrdiff_t hho;
  unsigned int ideal_chain_maxlen;
  unsigned int nonideal_items;
  unsigned int ineff_expands;
  unsigned int noexpand;
  unsigned int signature;
};

/* 87 */
struct thread_q
{
  list_head q;
  bool frozen;
  pthread_mutex_t mutex;
  pthread_cond_t cond;
};

/* 14 */
enum dev_enable : __int32
{
  dev_enable::DEV_ENABLED = 0x0,
  dev_enable::DEV_DISABLED = 0x1,
  dev_enable::DEV_RECOVER = 0x2,
};

/* 90 */
enum alive : __int32
{
  alive::LIFE_WELL = 0x0,
  alive::LIFE_SICK = 0x1,
  alive::LIFE_DEAD = 0x2,
  alive::LIFE_NOSTART = 0x3,
  alive::LIFE_INIT = 0x4,
};

/* 13 */
enum dev_reason : __int32
{
  dev_reason::REASON_THREAD_FAIL_INIT = 0x0,
  dev_reason::REASON_THREAD_ZERO_HASH = 0x1,
  dev_reason::REASON_THREAD_FAIL_QUEUE = 0x2,
  dev_reason::REASON_DEV_SICK_IDLE_60 = 0x3,
  dev_reason::REASON_DEV_DEAD_IDLE_600 = 0x4,
  dev_reason::REASON_DEV_NOSTART = 0x5,
  dev_reason::REASON_DEV_OVER_HEAT = 0x6,
  dev_reason::REASON_DEV_THERMAL_CUTOFF = 0x7,
  dev_reason::REASON_DEV_COMMS_ERROR = 0x8,
  dev_reason::REASON_DEV_THROTTLE = 0x9,
};

/* 15 */
struct __attribute__((aligned(8))) cgpu_info
{
  int cgminer_id;
  device_drv *drv;
  int device_id;
  char *name;
  char *device_path;
  void *device_data;
  void *dup_data;
  char *unique_id;
  dev_enable deven;
  int accepted;
  int rejected;
  int hw_errors;
  double rolling;
  double rolling1;
  double rolling5;
  double rolling15;
  double total_mhashes;
  double utility;
  alive status;
  char init[40];
  timeval last_message_tv;
  int threads;
  thr_info **thr;
  int64_t max_hashes;
  const char *kname;
  bool new_work;
  double temp;
  int cutofftemp;
  int64_t diff1;
  double diff_accepted;
  double diff_rejected;
  int last_share_pool;
  time_t last_share_pool_time;
  double last_share_diff;
  time_t last_device_valid_work;
  unsigned int last_nonce;
  time_t device_last_well;
  time_t device_last_not_well;
  dev_reason device_not_well_reason;
  int thread_fail_init_count;
  int thread_zero_hash_count;
  int thread_fail_queue_count;
  int dev_sick_idle_60_count;
  int dev_dead_idle_600_count;
  int dev_nostart_count;
  int dev_over_heat_count;
  int dev_thermal_cutoff_count;
  int dev_comms_error_count;
  int dev_throttle_count;
  cgminer_stats cgminer_stats;
  pthread_rwlock_t qlock;
  work *queued_work;
  work *unqueued_work;
  unsigned int queued_count;
  bool shutdown;
  timeval dev_start_tv;
  int hidiff;
  int lodiff;
  int direction;
};

/* 95 */
struct UT_hash_bucket
{
  UT_hash_handle *hh_head;
  unsigned int count;
  unsigned int expand_mult;
};

/* 91 */
enum drv_driver : __int32
{
  drv_driver::DRIVER_bitforce = 0x0,
  drv_driver::DRIVER_modminer = 0x1,
  drv_driver::DRIVER_bitmain = 0x2,
  drv_driver::DRIVER_bitmain_soc = 0x3,
  drv_driver::DRIVER_MAX = 0x4,
};

/* 88 */
struct device_drv
{
  drv_driver drv_id;
  char *dname;
  char *name;
  void (*drv_detect)(bool);
  void (*reinit_device)(cgpu_info *);
  void (*get_statline_before)(char *, size_t, cgpu_info *);
  void (*get_statline)(char *, size_t, cgpu_info *);
  api_data *(*get_api_stats)(cgpu_info *);
  bool (*get_stats)(cgpu_info *);
  void (*identify_device)(cgpu_info *);
  char *(*set_device)(cgpu_info *, char *, char *, char *);
  bool (*thread_prepare)(thr_info *);
  unsigned int (*can_limit_work)(thr_info *);
  bool (*thread_init)(thr_info *);
  bool (*prepare_work)(thr_info *, work *);
  void (*hash_work)(thr_info *);
  int64_t (*scanhash)(thr_info *, work *, int64_t);
  int64_t (*scanwork)(thr_info *);
  bool (*queue_full)(cgpu_info *);
  void (*flush_work)(cgpu_info *);
  void (*update_work)(cgpu_info *);
  void (*hw_error)(thr_info *);
  void (*thread_shutdown)(thr_info *);
  void (*thread_enable)(thr_info *);
  void (*zero_stats)(cgpu_info *);
  bool copy;
  double max_diff;
  double min_diff;
};

/* 11 */
enum api_data_type : __int32
{
  api_data_type::API_ESCAPE = 0x0,
  api_data_type::API_STRING = 0x1,
  api_data_type::API_CONST = 0x2,
  api_data_type::API_UINT8 = 0x3,
  api_data_type::API_INT16 = 0x4,
  api_data_type::API_UINT16 = 0x5,
  api_data_type::API_INT = 0x6,
  api_data_type::API_UINT = 0x7,
  api_data_type::API_UINT32 = 0x8,
  api_data_type::API_HEX32 = 0x9,
  api_data_type::API_UINT64 = 0xA,
  api_data_type::API_INT64 = 0xB,
  api_data_type::API_DOUBLE = 0xC,
  api_data_type::API_ELAPSED = 0xD,
  api_data_type::API_BOOL = 0xE,
  api_data_type::API_TIMEVAL = 0xF,
  api_data_type::API_TIME = 0x10,
  api_data_type::API_MHS = 0x11,
  api_data_type::API_MHTOTAL = 0x12,
  api_data_type::API_TEMP = 0x13,
  api_data_type::API_UTILITY = 0x14,
  api_data_type::API_FREQ = 0x15,
  api_data_type::API_VOLTS = 0x16,
  api_data_type::API_HS = 0x17,
  api_data_type::API_DIFF = 0x18,
  api_data_type::API_PERCENT = 0x19,
  api_data_type::API_AVG = 0x1A,
};

/* 89 */
struct api_data
{
  api_data_type type;
  char *name;
  void *data;
  bool data_was_malloc;
  api_data *prev;
  api_data *next;
};

/* 98 */
typedef unsigned int in_addr_t;

/* 16 */
struct in_addr
{
  in_addr_t s_addr;
};

/* 58 */
typedef unsigned __int16 uint16_t;

/* 17 */
typedef uint16_t in_port_t;

/* 162 */
union in6_addr::$F501D2DA2BF0EFFBB7647B60AA051C0C
{
  unsigned __int8 __u6_addr8[16];
  uint16_t __u6_addr16[8];
  unsigned int __u6_addr32[4];
};

/* 18 */
struct in6_addr
{
  in6_addr::$F501D2DA2BF0EFFBB7647B60AA051C0C __in6_u;
};

/* 20 */
typedef unsigned int rpl_memchr::longword;

/* 21 */
typedef unsigned int uint32_t;

/* 28 */
enum json_type : __int32
{
  JSON_OBJECT = 0x0,
  JSON_ARRAY = 0x1,
  JSON_STRING = 0x2,
  JSON_INTEGER = 0x3,
  JSON_REAL = 0x4,
  JSON_TRUE = 0x5,
  JSON_FALSE = 0x6,
  JSON_NULL = 0x7,
};

/* 32 */
struct json_t
{
  json_type type;
  size_t refcount;
};

/* 22 */
struct json_real_t
{
  json_t json;
  double value;
};

/* 23 */
typedef __int64 json_int_t;

/* 24 */
struct json_integer_t
{
  json_t json;
  json_int_t value;
};

/* 25 */
struct json_string_t
{
  json_t json;
  char *value;
  size_t length;
};

/* 26 */
struct json_array_t
{
  json_t json;
  size_t size;
  size_t entries;
  json_t **table;
  int visited;
};

/* 31 */
struct hashtable_list
{
  hashtable_list *prev;
  hashtable_list *next;
};

/* 163 */
struct hashtable
{
  size_t size;
  hashtable_bucket *buckets;
  size_t order;
  hashtable_list list;
  hashtable_list ordered_list;
};

/* 29 */
typedef hashtable hashtable_t;

/* 27 */
struct json_object_t
{
  json_t json;
  hashtable_t hashtable;
  int visited;
};

/* 30 */
struct hashtable_bucket
{
  hashtable_list *first;
  hashtable_list *last;
};

/* 33 */
typedef int int32_t;

/* 34 */
struct strbuffer_t
{
  char *value;
  size_t length;
  size_t size;
};

/* 39 */
typedef __va_list __gnuc_va_list;

/* 35 */
typedef __gnuc_va_list va_list;

/* 38 */
struct __attribute__((aligned(4))) token_t
{
  int line;
  int column;
  size_t pos;
  char token;
};

/* 36 */
struct scanner_t
{
  const char *start;
  const char *fmt;
  token_t prev_token;
  token_t token;
  token_t next_token;
  json_error_t *error;
  size_t flags;
  int line;
  int column;
  size_t pos;
};

/* 37 */
struct json_error_t
{
  int line;
  int column;
  int position;
  char source[80];
  char text[160];
};

/* 40 */
typedef void (*json_free_t)(void *);

/* 41 */
typedef void *(*json_malloc_t)(size_t);

/* 42 */
typedef size_t (*json_load_callback_t)(void *, size_t, void *);

/* 43 */
struct callback_data_t
{
  char data[1024];
  size_t len;
  size_t pos;
  json_load_callback_t callback;
  void *arg;
};

/* 44 */
typedef _IO_FILE FILE;

/* 53 */
typedef int __off_t;

/* 54 */
typedef __int64 __quad_t;

/* 52 */
typedef __quad_t __off64_t;

/* 50 */
struct _IO_FILE
{
  int _flags;
  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
  _IO_marker *_markers;
  _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned __int16 _cur_column;
  char _vtable_offset;
  char _shortbuf[1];
  _IO_lock_t *_lock;
  __off64_t _offset;
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
  int _mode;
  char _unused2[40];
};

/* 51 */
struct _IO_marker
{
  _IO_marker *_next;
  _IO_FILE *_sbuf;
  int _pos;
};

/* 45 */
struct buffer_data_t
{
  const char *data;
  size_t len;
  size_t pos;
};

/* 46 */
struct string_data_t
{
  const char *data;
  int pos;
};

/* 47 */
typedef int (*get_func)(void *);

/* 49 */
struct stream_t
{
  get_func get;
  void *data;
  char buffer[5];
  size_t buffer_pos;
  int state;
  int line;
  int column;
  int last_column;
  size_t position;
};

/* 179 */
struct lex_t::$BD4887B8155239BFEFA5AB9A7B453162::$187604EA7C5609CC783974FAB9764C1D
{
  char *val;
  size_t len;
};

/* 180 */
union lex_t::$BD4887B8155239BFEFA5AB9A7B453162
{
  lex_t::$BD4887B8155239BFEFA5AB9A7B453162::$187604EA7C5609CC783974FAB9764C1D string;
  json_int_t integer;
  double real;
};

/* 48 */
struct lex_t
{
  stream_t stream;
  strbuffer_t saved_text;
  size_t flags;
  size_t depth;
  int token;
  lex_t::$BD4887B8155239BFEFA5AB9A7B453162 value;
};

/* 55 */
typedef hashtable_pair pair_t;

/* 164 */
struct __attribute__((aligned(4))) hashtable_pair
{
  hashtable_list list;
  hashtable_list ordered_list;
  size_t hash;
  json_t *value;
  char key[1];
};

/* 56 */
typedef hashtable_bucket bucket_t;

/* 57 */
typedef hashtable_list list_t;

/* 59 */
typedef unsigned __int8 uint8_t;

/* 60 */
typedef int (*json_dump_callback_t)(const char *, size_t, void *);

/* 62 */
enum __bitmask opt_type : __int32
{
  opt_type::OPT_NOARG = 0x1,
  opt_type::OPT_HASARG = 0x2,
  opt_type::OPT_PROCESSARG = 0x4,
  opt_type::OPT_SUBTABLE = 0x8,
  opt_type::OPT_END = 0x10,
};

/* 165 */
union opt_table::$E59A6B864CBE004D1CCF35FB265C4519
{
  const void *carg;
  void *arg;
  size_t tlen;
};

/* 61 */
struct opt_table
{
  const char *names;
  opt_type type;
  char *(*cb)(void *);
  char *(*cb_arg)(const char *, void *);
  void (*show)(char *, const void *);
  opt_table::$E59A6B864CBE004D1CCF35FB265C4519 u;
  const char *desc;
};

/* 63 */
struct cg_completion
{
  cgsem_t cgsem;
  void (*fn)(void *);
  void *fnarg;
};

/* 109 */
typedef int __ssize_t;

/* 65 */
typedef __ssize_t ssize_t;

/* 106 */
typedef int __fd_mask;

/* 66 */
struct fd_set
{
  __fd_mask fds_bits[32];
};

/* 68 */
typedef timespec cgtimer_t;

/* 69 */
struct timespec
{
  __time_t tv_sec;
  int tv_nsec;
};

/* 71 */
union pthread_attr_t
{
  char __size[36];
  int __align;
};

/* 72 */
struct tq_ent
{
  void *data;
  list_head q_node;
};

/* 102 */
typedef unsigned int __socklen_t;

/* 97 */
typedef __socklen_t socklen_t;

/* 96 */
struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  sockaddr *ai_addr;
  char *ai_canonname;
  addrinfo *ai_next;
};

/* 100 */
typedef unsigned __int16 sa_family_t;

/* 101 */
struct sockaddr
{
  sa_family_t sa_family;
  char sa_data[14];
};

/* 159 */
typedef uint32_t in_addr_t_0;

/* 160 */
struct in_addr_0
{
  in_addr_t_0 s_addr;
};

/* 99 */
struct sockaddr_in
{
  sa_family_t sin_family;
  in_port_t sin_port;
  in_addr_0 sin_addr;
  unsigned __int8 sin_zero[8];
};

/* 110 */
struct sha2_context
{
  unsigned int total[2];
  unsigned int state[8];
  unsigned __int8 buffer[64];
  unsigned __int8 ipad[64];
  unsigned __int8 opad[64];
};

/* 111 */
struct sha256_ctx
{
  unsigned int tot_len;
  unsigned int len;
  unsigned __int8 block[128];
  unsigned int h[8];
};

/* 112 */
typedef k_item K_ITEM;

/* 115 */
struct k_item
{
  const char *name;
  k_item *prev;
  k_item *next;
  void *data;
};

/* 114 */
typedef k_list K_LIST;

/* 113 */
struct dupdata
{
  int timelimit;
  K_LIST *nfree_list;
  K_LIST *nonce_list;
  uint64_t checked;
  uint64_t dups;
};

/* 169 */
struct k_list
{
  const char *name;
  bool is_store;
  cglock_t *lock;
  k_item *head;
  k_item *tail;
  size_t siz;
  int total;
  int count;
  int count_up;
  int allocate;
  int limit;
  bool do_tail;
  int item_mem_count;
  void **item_memory;
  int data_mem_count;
  void **data_memory;
};

/* 116 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  int tm_gmtoff;
  const char *tm_zone;
};

/* 128 */
typedef __int16 int16_t;

/* 122 */
typedef char int8_t;

/* 117 */
struct all_parameters
{
  unsigned int *current_job_start_address;
  unsigned int pwm_value;
  unsigned int chain_exist[16];
  unsigned int timeout;
  unsigned int fan_exist_map;
  unsigned int temp_sensor_map;
  unsigned int nonce_error;
  unsigned int chain_asic_exist[16][8];
  unsigned int chain_asic_status[16][8];
  char chain_asic_temp_num[16];
  unsigned __int8 TempChipType[16][8];
  unsigned __int8 TempChipAddr[16][8];
  int16_t chain_asic_temp[16][8][4];
  int16_t chain_asic_maxtemp[16][4];
  int16_t chain_asic_mintemp[16][4];
  int8_t chain_asic_iic[108];
  unsigned int chain_hw[16];
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t chain_asic_nonce[16][128];
  char chain_asic_status_string[16][136];
  __attribute__((packed)) __attribute__((aligned(1))) unsigned __int64 total_nonce_num;
  unsigned __int8 fan_exist[8];
  unsigned int fan_speed_value[8];
  int temp[16];
  unsigned __int8 chain_asic_num[16];
  unsigned __int8 check_bit;
  unsigned __int8 pwm_percent;
  unsigned __int8 chain_num;
  unsigned __int8 fan_num;
  unsigned __int8 temp_num;
  __attribute__((packed)) __attribute__((aligned(1))) unsigned int fan_speed_top1;
  __attribute__((packed)) __attribute__((aligned(1))) unsigned int fan_speed_low1;
  __attribute__((packed)) __attribute__((aligned(1))) int temp_top1[4];
  __attribute__((packed)) __attribute__((aligned(1))) int temp_low1[4];
  __attribute__((packed)) __attribute__((aligned(1))) int temp_top1_last;
  unsigned __int8 corenum;
  unsigned __int8 addrInterval;
  unsigned __int8 max_asic_num_in_one_chain;
  unsigned __int8 baud;
  unsigned __int8 diff;
  unsigned __int8 fan_eft;
  unsigned __int8 fan_pwm;
  unsigned __int16 frequency;
  char frequency_t[10];
  unsigned __int16 freq[16];
};

/* 120 */
struct reg_content
{
  unsigned int reg_value;
  unsigned __int8 crc;
  unsigned __int8 chip_address;
  unsigned __int8 reg_address;
  unsigned __int8 chain_number;
};

/* 118 */
struct reg_buf
{
  unsigned int p_wr;
  unsigned int p_rd;
  unsigned int reg_value_num;
  reg_content reg_buffer[511];
};

/* 130 */
struct __attribute__((packed)) __attribute__((aligned(4))) nonce_content
{
  unsigned int job_id;
  unsigned int work_id;
  unsigned int header_version;
  uint64_t nonce2;
  unsigned int nonce3;
  unsigned int chain_num;
  unsigned __int8 midstate[32];
};

/* 119 */
struct nonce_buf
{
  unsigned int p_wr;
  unsigned int p_rd;
  unsigned int nonce_num;
  nonce_content nonce_buffer[511];
};

/* 121 */
struct high_pll_out
{
  unsigned int freq;
  unsigned __int8 divider;
  unsigned int pll_out;
};

/* 123 */
struct freq_pll
{
  int freq;
  unsigned int fildiv1;
  unsigned int fildiv2;
  unsigned int vilpll;
};

/* 126 */
struct init_config
{
  unsigned __int8 token_type;
  unsigned __int8 version;
  uint16_t length;
  unsigned __int8 reset : 1;
  unsigned __int8 fan_eft : 1;
  unsigned __int8 timeout_eft : 1;
  unsigned __int8 frequency_eft : 1;
  unsigned __int8 voltage_eft : 1;
  unsigned __int8 chain_check_time_eft : 1;
  unsigned __int8 chip_config_eft : 1;
  unsigned __int8 hw_error_eft : 1;
  unsigned __int8 beeper_ctrl : 1;
  unsigned __int8 temp_ctrl : 1;
  unsigned __int8 chain_freq_eft : 1;
  unsigned __int8 reserved1 : 5;
  unsigned __int8 reserved2[2];
  unsigned __int8 chain_num;
  unsigned __int8 asic_num;
  unsigned __int8 fan_pwm_percent;
  unsigned __int8 temperature;
  uint16_t frequency;
  unsigned __int8 voltage[2];
  unsigned __int8 chain_check_time_integer;
  unsigned __int8 chain_check_time_fractions;
  unsigned __int8 timeout_data_integer;
  unsigned __int8 timeout_data_fractions;
  unsigned int reg_data;
  unsigned __int8 chip_address;
  unsigned __int8 reg_address;
  uint16_t chain_min_freq;
  uint16_t chain_max_freq;
  uint16_t crc;
};

/* 124 */
struct __attribute__((aligned(4))) bitmain_soc_info
{
  cglock_t update_lock;
  unsigned __int8 data_type;
  unsigned __int8 version;
  uint16_t length;
  unsigned __int8 chip_value_eft : 1;
  unsigned __int8 reserved1 : 7;
  unsigned __int8 chain_num;
  uint16_t reserved2;
  unsigned __int8 fan_num;
  unsigned __int8 temp_num;
  unsigned __int8 reserved3[2];
  unsigned int fan_exist;
  unsigned int temp_exist;
  uint16_t diff;
  uint16_t reserved4;
  unsigned int reg_value;
  unsigned int chain_asic_exist[16][4];
  unsigned int chain_asic_status[16][4];
  unsigned __int8 chain_asic_num[16];
  unsigned __int8 temp[16];
  unsigned __int8 fan_speed_value[8];
  uint16_t freq[16];
  thr_info *thr;
  pthread_t read_nonce_thr;
  pthread_mutex_t lock;
  init_config soc_config;
  int pool_no;
  pool pool0;
  pool pool1;
  pool pool2;
  unsigned int pool0_given_id;
  unsigned int pool1_given_id;
  unsigned int pool2_given_id;
  uint16_t crc;
};

/* 125 */
struct part_of_job
{
  unsigned __int8 token_type;
  unsigned __int8 version;
  uint16_t reserved;
  unsigned int length;
  unsigned __int8 pool_nu;
  unsigned __int8 new_block : 1;
  unsigned __int8 asic_diff_valid : 1;
  unsigned __int8 reserved1 : 6;
  unsigned __int8 asic_diff;
  unsigned __int8 reserved2[1];
  unsigned int job_id;
  unsigned int bbversion;
  unsigned __int8 prev_hash[32];
  unsigned int ntime;
  unsigned int nbit;
  uint16_t coinbase_len;
  uint16_t nonce2_offset;
  uint16_t nonce2_bytes_num;
  uint16_t merkles_num;
  uint64_t nonce2_start_value;
};

/* 127 */
struct core_cmd
{
  unsigned __int8 chain;
  unsigned __int8 chip_addr;
  unsigned __int8 mode;
  unsigned __int8 core_mode;
  unsigned __int8 core_id;
  unsigned __int8 cmd_type;
  unsigned __int8 rw_falg;
  unsigned __int8 reserved;
  unsigned int reg_data;
};

/* 129 */
struct SCAN_FREQ_WORK
{
  int id;
  unsigned int nonce;
  unsigned __int8 data[12];
  unsigned __int8 midstate[32];
  unsigned int is_nonce_return_back[16];
};

/* 131 */
struct strategies
{
  const char *s;
};

/* 132 */
struct benchfile_layout
{
  int length;
  char *name;
};

/* 133 */
struct _cgpu_devid_counter
{
  char name[4];
  int lastid;
  UT_hash_handle hh;
};

/* 134 */
struct curl_ent
{
  CURL *curl;
  list_head node;
  timeval tv;
};

/* 135 */
struct stratum_share
{
  UT_hash_handle hh;
  bool block;
  work *work;
  int id;
  time_t sshare_time;
  time_t sshare_sent;
};

/* 136 */
struct block
{
  char hash[68];
  UT_hash_handle hh;
  int block_no;
};

/* 137 */
struct schedtime
{
  bool enable;
  tm tm;
};

/* 138 */
enum pool_strategy : __int32
{
  pool_strategy::POOL_FAILOVER = 0x0,
  pool_strategy::POOL_ROUNDROBIN = 0x1,
  pool_strategy::POOL_ROTATE = 0x2,
  pool_strategy::POOL_LOADBALANCE = 0x3,
  pool_strategy::POOL_BALANCE = 0x4,
};

/* 139 */
struct JE
{
  char *buf;
  JE *next;
};

/* 140 */
struct __sigset_t
{
  unsigned int __val[32];
};

/* 141 */
typedef siginfo siginfo_t;

/* 145 */
typedef int __pid_t;

/* 144 */
typedef unsigned int __uid_t;

/* 172 */
struct siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$DDF278A5B88F81FEC3CBEE828E282CB3
{
  __pid_t si_pid;
  __uid_t si_uid;
};

/* 147 */
union sigval
{
  int sival_int;
  void *sival_ptr;
};

/* 146 */
typedef sigval sigval_t;

/* 173 */
struct siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$F43D85AC31CEBD8CC07B08111ABDF065
{
  int si_tid;
  int si_overrun;
  sigval_t si_sigval;
};

/* 174 */
struct siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$002955E8B5DE3B92E30DFEF7AB65BFE2
{
  __pid_t si_pid;
  __uid_t si_uid;
  sigval_t si_sigval;
};

/* 143 */
typedef int __clock_t;

/* 175 */
struct siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$353EAF26536A4016665766004ADC0BD6
{
  __pid_t si_pid;
  __uid_t si_uid;
  int si_status;
  __clock_t si_utime;
  __clock_t si_stime;
};

/* 176 */
struct siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$394784BEE55B7018BCA7354475FB2ABC
{
  void *si_addr;
};

/* 177 */
struct siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$534EC22A0813C1325C3E7D3262B5A8D3
{
  int si_band;
  int si_fd;
};

/* 178 */
union siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB
{
  int _pad[29];
  siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$DDF278A5B88F81FEC3CBEE828E282CB3 _kill;
  siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$F43D85AC31CEBD8CC07B08111ABDF065 _timer;
  siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$002955E8B5DE3B92E30DFEF7AB65BFE2 _rt;
  siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$353EAF26536A4016665766004ADC0BD6 _sigchld;
  siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$394784BEE55B7018BCA7354475FB2ABC _sigfault;
  siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB::$534EC22A0813C1325C3E7D3262B5A8D3 _sigpoll;
};

/* 171 */
struct siginfo
{
  int si_signo;
  int si_errno;
  int si_code;
  siginfo::$62EB5BE97A9F3E7317C19C75C1F0BEAB _sifields;
};

/* 142 */
typedef void (*__sighandler_t)(int);

/* 148 */
struct __attribute__((aligned(4))) CMDS
{
  char *name;
  void (*func)(io_data *, int, char *, bool, char);
  bool iswritemode;
  bool joinable;
};

/* 154 */
struct __attribute__((aligned(4))) io_data
{
  size_t siz;
  char *ptr;
  char *cur;
  bool sock;
  bool close;
};

/* 149 */
struct APIGROUPS
{
  char *commands;
};

/* 156 */
enum code_severity : __int32
{
  code_severity::SEVERITY_ERR = 0x0,
  code_severity::SEVERITY_WARN = 0x1,
  code_severity::SEVERITY_INFO = 0x2,
  code_severity::SEVERITY_SUCC = 0x3,
  code_severity::SEVERITY_FAIL = 0x4,
};

/* 155 */
enum code_parameters : __int32
{
  code_parameters::PARAM_PGA = 0x0,
  code_parameters::PARAM_ASC = 0x1,
  code_parameters::PARAM_PID = 0x2,
  code_parameters::PARAM_PGAMAX = 0x3,
  code_parameters::PARAM_ASCMAX = 0x4,
  code_parameters::PARAM_PMAX = 0x5,
  code_parameters::PARAM_POOLMAX = 0x6,
  code_parameters::PARAM_DMAX = 0x7,
  code_parameters::PARAM_CMD = 0x8,
  code_parameters::PARAM_POOL = 0x9,
  code_parameters::PARAM_STR = 0xA,
  code_parameters::PARAM_BOTH = 0xB,
  code_parameters::PARAM_BOOL = 0xC,
  code_parameters::PARAM_SET = 0xD,
  code_parameters::PARAM_INT = 0xE,
  code_parameters::PARAM_NONE = 0xF,
};

/* 150 */
struct CODES
{
  const code_severity severity;
  const int code;
  const code_parameters params;
  const char *description;
};

/* 151 */
struct __attribute__((aligned(4))) IPACCESS
{
  in6_addr ip;
  in6_addr mask;
  char group;
};

/* 152 */
struct sockaddr_storage
{
  sa_family_t ss_family;
  unsigned int __ss_align;
  char __ss_padding[120];
};

/* 153 */
struct io_list
{
  io_data *io_data;
  io_list *prev;
  io_list *next;
};

/* 157 */
typedef int __jmp_buf[64];

/* 161 */
struct sbitem
{
  char *buf;
  size_t siz;
  size_t tot;
};

/* 168 */
struct nitem
{
  unsigned int work_id;
  unsigned int nonce;
  timeval when;
};

/* 182 */
typedef unsigned int sizetype;

/* 183 */
struct _IO_marker_0
{
  _IO_marker *_next;
  _IO_FILE *_sbuf;
  int _pos;
};

/* 184 */
enum send_ret : __int32
{
  send_ret::SEND_OK = 0x0,
  send_ret::SEND_SELECTFAIL = 0x1,
  send_ret::SEND_SENDFAIL = 0x2,
  send_ret::SEND_INACTIVE = 0x3,
};

/* 185 */
struct UT_hash_table_0
{
  UT_hash_bucket *buckets;
  unsigned int num_buckets;
  unsigned int log2_num_buckets;
  unsigned int num_items;
  UT_hash_handle *tail;
  ptrdiff_t hho;
  unsigned int ideal_chain_maxlen;
  unsigned int nonideal_items;
  unsigned int ineff_expands;
  unsigned int noexpand;
  unsigned int signature;
};

/* 186 */
enum __socket_type : __int32
{
  __socket_type::SOCK_STREAM = 0x1,
  __socket_type::SOCK_DGRAM = 0x2,
  __socket_type::SOCK_RAW = 0x3,
  __socket_type::SOCK_RDM = 0x4,
  __socket_type::SOCK_SEQPACKET = 0x5,
  __socket_type::SOCK_DCCP = 0x6,
  __socket_type::SOCK_PACKET = 0xA,
  __socket_type::SOCK_CLOEXEC = 0x80000,
  __socket_type::SOCK_NONBLOCK = 0x800,
};

/* 187 */
struct lldiv_t
{
  __int64 quot;
  __int64 rem;
};

/* 188 */
typedef nitem NITEM;

/* 189 */
struct SCAN_FREQ_INFO
{
  int AsicNum;
  int CoreNum;
  int AsicWorkCount;
  int RequiredChainNonce;
  int RequiredAsicNonce;
  float PassNonceRate;
  char workdataPathPrefix[64];
  char workdataFilePrefix[64];
  FILE *fps[65536];
  SCAN_FREQ_WORK *works[256];
  int MAX_INDEX;
  int MIN_INDEX;
  int scan_index[64];
  int freq_index_max[16];
  int freq_index_min[16];
  int current_index[16];
  int scan_freq_index_record[16][64];
  float scan_noncerate_record[16][64];
  int scan_record_count[16];
  bool current_is_pass[16];
  bool scan_finished[16];
  int pass_freq_index[16];
  float pass_noncerate[16];
  bool scan_success[16];
  bool all_chain_scan_success;
  int scan_pic_voltage[16];
  int16_t chain_max_pcb_temp[16];
  SCAN_FREQ_WORK send_work[128];
  int send_work_num[16];
  int ret_nonce_num[16];
  int repeated_nonce_num[16];
  int other_nonce_num[16];
  int HW_nonce_num[16];
  int valid_nonce_num[16];
  int asic_nonce_num[16][256];
  int asic_core_nonce_num[16][256][256];
  int asic_core_enabled_flag[16][256][256];
};

/* 190 */
enum Temp_Type_E : __int32
{
  TEMP_BOTTOM = 0x0,
  TEMP_MIDDLE = 0x1,
};

/* 191 */
struct vil_work_1387
{
  unsigned __int8 work_type;
  unsigned __int8 chain_id;
  unsigned __int8 reserved1[2];
  unsigned int work_count;
  unsigned __int8 data[12];
  unsigned __int8 midstate[32];
};

/* 192 */
struct vil_work
{
  unsigned __int8 type;
  unsigned __int8 length;
  unsigned __int8 wc_base;
  unsigned __int8 mid_num;
  unsigned __int8 midstate[32];
  unsigned __int8 data2[12];
};

/* 193 */
struct work_0
{
  unsigned __int8 data[128];
  unsigned __int8 midstate[32];
  unsigned __int8 target[32];
  unsigned __int8 hash[32];
  double device_diff;
  uint64_t share_diff;
  int rolls;
  int drv_rolllimit;
  unsigned int nonce;
  thr_info *thr;
  int thr_id;
  pool *pool;
  timeval tv_staged;
  bool mined;
  bool clone;
  bool cloned;
  int rolltime;
  bool longpoll;
  bool stale;
  bool mandatory;
  bool block;
  bool stratum;
  char *job_id;
  uint64_t nonce2;
  size_t nonce2_len;
  char *ntime;
  double sdiff;
  char *nonce1;
  bool gbt;
  char *coinbase;
  int gbt_txns;
  unsigned int work_block;
  unsigned int id;
  UT_hash_handle hh;
  double work_difficulty;
  int subid;
  bool devflag;
  timeval tv_stamp;
  timeval tv_getwork;
  timeval tv_getwork_reply;
  timeval tv_cloned;
  timeval tv_work_start;
  timeval tv_work_found;
  char getwork_mode;
  int version;
};

/* 194 */
struct sysinfo
{
  int uptime;
  unsigned int loads[3];
  unsigned int totalram;
  unsigned int freeram;
  unsigned int sharedram;
  unsigned int bufferram;
  unsigned int totalswap;
  unsigned int freeswap;
  unsigned __int16 procs;
  unsigned __int16 pad;
  unsigned int totalhigh;
  unsigned int freehigh;
  unsigned int mem_unit;
  char _f[8];
};

/* 195 */
enum benchwork : __int32
{
  benchwork::BENCHWORK_VERSION = 0x0,
  benchwork::BENCHWORK_MERKLEROOT = 0x1,
  benchwork::BENCHWORK_PREVHASH = 0x2,
  benchwork::BENCHWORK_DIFFBITS = 0x3,
  benchwork::BENCHWORK_NONCETIME = 0x4,
  benchwork::BENCHWORK_COUNT = 0x5,
};

/* 197 */
union sigaction::$A0D7C018272EA30F374433AF4EA79BEE
{
  __sighandler_t sa_handler;
  void (*sa_sigaction)(int, siginfo_t *, void *);
};

/* 196 */
struct sigaction
{
  sigaction::$A0D7C018272EA30F374433AF4EA79BEE __sigaction_handler;
  __sigset_t sa_mask;
  int sa_flags;
  void (*sa_restorer)(void);
};

/* 198 */
typedef __sighandler_t sighandler_t;

/* 199 */
typedef sbitem SBITEM;

/* 200 */
struct ipv6_mreq
{
  in6_addr ipv6mr_multiaddr;
  unsigned int ipv6mr_interface;
};

/* 201 */
struct ip_mreq
{
  in_addr imr_multiaddr;
  in_addr imr_interface;
};

/* 202 */
struct sockaddr_in6
{
  sa_family_t sin6_family;
  in_port_t sin6_port;
  unsigned int sin6_flowinfo;
  in6_addr sin6_addr;
  unsigned int sin6_scope_id;
};

/* 203 */
struct sockaddr_in_0
{
  sa_family_t sin_family;
  in_port_t sin_port;
  in_addr sin_addr;
  unsigned __int8 sin_zero[8];
};

/* 205 */
struct __attribute__((aligned(8))) __pthread_unwind_buf_t::$C277420EBC3478189FF06E3E7E99E2B1
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

/* 204 */
struct __pthread_unwind_buf_t
{
  __pthread_unwind_buf_t::$C277420EBC3478189FF06E3E7E99E2B1 __cancel_jmp_buf[1];
  void *__pad[4];
};

/* 206 */
union $C3A5E62BD3479D440C63A6482DBEA85A
{
  const void *ptr;
  size_t i;
};

/* 207 */
struct $8BF8CEFDD07FC02C86A88CD42330C887
{
  const char *name;
  proxytypes_t proxytype;
};

/* 208 */
union __attribute__((aligned(8))) __n64
{
  unsigned __int64 n64_u64[1];
  unsigned __int32 n64_u32[2];
  unsigned __int16 n64_u16[4];
  unsigned __int8 n64_u8[8];
  __int64 n64_i64[1];
  __int32 n64_i32[2];
  __int16 n64_i16[4];
  __int8 n64_i8[8];
  float n64_f32[2];
  double n64_f64[1];
};

/* 209 */
union __attribute__((aligned(8))) __n128
{
  unsigned __int64 n128_u64[2];
  unsigned __int32 n128_u32[4];
  unsigned __int16 n128_u16[8];
  unsigned __int8 n128_u8[16];
  __int64 n128_i64[2];
  __int32 n128_i32[4];
  __int16 n128_i16[8];
  __int8 n128_i8[16];
  float n128_f32[4];
  double n128_f64[2];
};

/* 210 */
typedef __n64 int8x8_t;

/* 211 */
typedef __n64 uint8x8_t;

/* 212 */
typedef __n64 int16x4_t;

/* 213 */
typedef __n64 int32x2_t;

/* 214 */
typedef __n64 uint16x4_t;

/* 215 */
typedef __n64 uint32x2_t;

/* 216 */
typedef __n128 int8x16_t;

/* 217 */
typedef __n128 int16x8_t;

/* 218 */
typedef __n128 int32x4_t;

/* 219 */
typedef __n128 int64x2_t;

/* 220 */
typedef __n128 uint8x16_t;

/* 221 */
typedef __n128 uint16x8_t;

/* 222 */
typedef __n128 uint32x4_t;

/* 223 */
typedef __n128 uint64x2_t;

/* 224 */
typedef __n64 poly8x8_t;

/* 225 */
typedef __n64 poly16x4_t;

/* 226 */
typedef __n128 poly16x8_t;

/* 227 */
typedef __n128 poly8x16_t;

/* 228 */
typedef __n64 float16x4_t;

/* 229 */
typedef __n64 float32x2_t;

/* 230 */
typedef __n128 float16x8_t;

/* 231 */
typedef __n128 float32x4_t;

/* 232 */
typedef __n128 float64x2_t;

/* 233 */
typedef __n128 poly128_t;

/* 234 */
typedef int16x4_t int16x2_t;

/* 235 */
typedef uint16x4_t uint16x2_t;

/* 236 */
typedef float16x4_t float16x2_t;


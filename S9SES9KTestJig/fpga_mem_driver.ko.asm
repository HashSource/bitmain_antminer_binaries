;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 2EC39EDA2D5B691C07475B73797C335949A56EB6DF9B0A5D83881474BFFF0C3F
; Input MD5    : 95DBE2C935094D35DE44A4F53E694D62
; Input CRC32  : 6FA2AC7B
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/bitmain_antminer_binaries/S9SES9KTestJig/fpga_mem_driver.ko
; Format      : ELF for ARM (Relocatable)
;
; EABI version: 5
;
; Source File : 'fpga_mem.c'
; Source File : 'fpga_mem_driver.mod.c'

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA .text, CODE
CODE32



; int fpga_mem_open()
fpga_mem_open
; __unwind {
MOV             R0, #0
BX              LR
; } // starts at 0
; End of function fpga_mem_open




; int fpga_mem_release()
fpga_mem_release
; __unwind {
MOV             R0, #0
BX              LR
; } // starts at 8
; End of function fpga_mem_release




; int __fastcall fpga_mem_mmap(int, _DWORD *, int)
fpga_mem_mmap

var_C= -0xC

; __unwind {
PUSH            {R0-R2,LR}
MOV             R0, R1
LDR             R3, [R1,#0x28]
LDR             R12, [R1,#0x24]
ORR             R3, R3, #0x4000000
ORR             R3, R3, #0x44000
STR             R3, [R1,#0x28]
LDR             R3, =fpga_mem_offset_addr
BIC             R12, R12, #0x3C ; '<'
STR             R12, [R1,#0x24]
LDR             R1, [R1]
LDR             R2, [R3]
LDR             R3, [R0,#4]
STR             R12, [SP,#0xC+var_C]
MOV             R2, R2,ASR#12
RSB             R3, R1, R3
BL              remap_pfn_range
CMP             R0, #0
BEQ             loc_68
LDR             R0, =aFpgaMemMmapErr ; "fpga_mem_mmap error!\n"
BL              printk
MOV             R0, #0xFFFFFFF7

loc_68
ADD             SP, SP, #0xC
POP             {PC}
; End of function fpga_mem_mmap

off_70 DCD fpga_mem_offset_addr
off_74 DCD aFpgaMemMmapErr ; "fpga_mem_mmap error!\n"
; } // starts at 10
; .text ends


; Segment type: Pure code
AREA .init.text, CODE
; ORG 0x78
CODE32


; Alternative name is 'fpga_mem_init'

; int __fastcall init_module(int, int)
EXPORT init_module
init_module

var_8= -8

PUSH            {R0,R1,R4-R8,LR}
LDR             R4, =fpga_mem_num
LDR             R6, =aFpgaMem ; "fpga_mem"
LDR             R0, =aInFpgaMemDrive ; "In fpga mem driver!\n"
BL              printk
MOV             R0, R4
MOV             R1, #0
MOV             R2, #1
MOV             R3, R6
BL              alloc_chrdev_region
SUBS            R5, R0, #0
BGE             loc_B4
LDR             R0, =aAllocFpgaMemFa ; "alloc fpga_mem fail!\n"
BL              printk
B               loc_1D8

loc_B4
LDR             R3, =kmalloc_caches
LDR             R1, =0x24000C0
LDR             R0, [R3,#0x18]
BL              kmem_cache_alloc
CMP             R0, #0
STR             R0, [R4,#(p_fpga_mem - 0xCD8)]
BNE             loc_E0
LDR             R0, =aKmallocCdevFai ; "kmalloc cdev fail!\n"
BL              printk
MOV             R0, #0xFFFFFFF6
B               loc_1DC

loc_E0
LDR             R1, =fpga_mem_fops
BL              cdev_init
LDR             R7, =__this_module
LDR             R0, [R4,#(p_fpga_mem - 0xCD8)]
MOV             R2, #1
LDR             R1, [R4]
STR             R7, [R0,#0x24]
BL              cdev_add
SUBS            R5, R0, #0
BEQ             loc_118
LDR             R0, =aAddFpgaMemFail ; "add fpga_mem fail!\n"
BL              printk
MOV             R0, #0xFFFFFFF5
B               loc_1DC

loc_118
LDR             R8, =fpga_mem_offset_addr
MOV             R2, #0x1000000
STR             R5, [SP,#8+var_8]
LDR             R0, =iomem_resource
LDR             R1, [R8]
LDR             R3, =aFpgaVirMem ; "fpga_vir_mem"
BL              __request_region
CMP             R0, #0
STR             R0, [R4,#(base_vir_mem_addr - 0xCD8)]
BNE             loc_150
LDR             R0, =aRequestMemRegi ; "request_mem_region failed!\n"
BL              printk
MOV             R0, #0xFFFFFFF4
B               loc_1DC

loc_150
LDR             R0, =aRequestMemRegi_0 ; "request_mem_region OK!\n"
BL              printk
MOV             R1, #0x1000000
LDR             R0, [R8]
BL              ioremap
CMP             R0, #0
MOV             R1, R0
STR             R0, [R4,#(base_vir_addr - 0xCD8)]
BNE             loc_190
LDR             R0, =aIoremapFail ; "ioremap fail!\n"
BL              printk
LDR             R0, =aBaseVirAddr0xX ; "!!!*base_vir_addr = 0x%x\n"
LDR             R1, [R4,#(base_vir_addr - 0xCD8)]
BL              printk
MOV             R0, #0xFFFFFFF3
B               loc_1DC

loc_190
LDR             R0, =aFpgaMemVirtual ; "fpga mem virtual address is 0x%x\n"
BL              printk
MOV             R0, R7
MOV             R1, R6
ADD             R2, R4, #0x10
BL              __class_create
CMN             R0, #0x1000
STR             R0, [R4,#(fpga_mem_class - 0xCD8)]
BLS             loc_1C4
LDR             R0, =aErrFailedInCre ; "Err:failed in creating fpga mem class."...
BL              printk
MOV             R0, #0xFFFFFFF2
B               loc_1DC

loc_1C4
STR             R6, [SP,#8+var_8]
MOV             R1, R5
LDR             R2, [R4]
MOV             R3, R5
BL              device_create

loc_1D8
MOV             R0, R5

loc_1DC
ADD             SP, SP, #8
POP             {R4-R8,PC}
; End of function init_module

off_1E4 DCD fpga_mem_num
off_1E8 DCD aFpgaMem    ; "fpga_mem"
off_1EC DCD aInFpgaMemDrive ; "In fpga mem driver!\n"
off_1F0 DCD aAllocFpgaMemFa ; "alloc fpga_mem fail!\n"
off_1F4 DCD kmalloc_caches
dword_1F8 DCD 0x24000C0
off_1FC DCD aKmallocCdevFai ; "kmalloc cdev fail!\n"
off_200 DCD fpga_mem_fops
off_204 DCD __this_module
off_208 DCD aAddFpgaMemFail ; "add fpga_mem fail!\n"
off_20C DCD fpga_mem_offset_addr
off_210 DCD iomem_resource
off_214 DCD aFpgaVirMem ; "fpga_vir_mem"
off_218 DCD aRequestMemRegi ; "request_mem_region failed!\n"
off_21C DCD aRequestMemRegi_0 ; "request_mem_region OK!\n"
off_220 DCD aIoremapFail ; "ioremap fail!\n"
off_224 DCD aBaseVirAddr0xX ; "!!!*base_vir_addr = 0x%x\n"
off_228 DCD aFpgaMemVirtual ; "fpga mem virtual address is 0x%x\n"
off_22C DCD aErrFailedInCre ; "Err:failed in creating fpga mem class."...
; .init.text ends


; Segment type: Pure code
AREA .exit.text, CODE
; ORG 0x230
CODE32


; Alternative name is 'fpga_mem_exit'

; int cleanup_module()
EXPORT cleanup_module
cleanup_module
PUSH            {R4,LR}
MOV             R1, #1
LDR             R4, =fpga_mem_num
LDR             R0, [R4]
BL              unregister_chrdev_region
LDR             R0, [R4,#(p_fpga_mem - 0xCD8)]
BL              cdev_del
LDR             R0, [R4,#(p_fpga_mem - 0xCD8)]
BL              kfree
LDR             R0, [R4,#(base_vir_addr - 0xCD8)]
BL              iounmap
LDR             R3, =fpga_mem_offset_addr
MOV             R2, #0x1000000
LDR             R0, =iomem_resource
LDR             R1, [R3]
BL              __release_region
LDR             R0, [R4,#(fpga_mem_class - 0xCD8)]
LDR             R1, [R4]
BL              device_destroy
LDR             R0, [R4,#(fpga_mem_class - 0xCD8)]
BL              class_destroy
LDR             R0, =aByeByeFpgaMemD ; "Bye Bye fpga mem driver!\n"
POP             {R4,LR}
B               printk
; End of function cleanup_module

off_290 DCD fpga_mem_num
off_294 DCD fpga_mem_offset_addr
off_298 DCD iomem_resource
off_29C DCD aByeByeFpgaMemD ; "Bye Bye fpga mem driver!\n"
; .exit.text ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x2A0
fpga_mem_fops DCD __this_module
ALIGN 8
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCD fpga_mem_mmap
DCD fpga_mem_open
DCB    0
DCB    0
DCB    0
DCB    0
DCD fpga_mem_release
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
__param_str_fpga_mem_offset_addr DCB "fpga_mem_offset_addr",0
ALIGN 0x10
; .rodata ends


; Segment type: Zero-length
AREA .ARM.extab.init.text, DATA, ALIGN=0
; ORG 0x330
; .ARM.extab.init.text ends


; Segment type: Pure data
AREA .ARM.exidx.init.text, DATA, READONLY
; ORG 0x334
DCD (init_module - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCB 0xAC
DCB    3
DCB 0xB1
DCB 0x80
; .ARM.exidx.init.text ends


; Segment type: Zero-length
AREA .ARM.extab.exit.text, DATA, ALIGN=0
; ORG 0x33C
; .ARM.extab.exit.text ends


; Segment type: Pure data
AREA .ARM.exidx.exit.text, DATA, READONLY
; ORG 0x340
DCD (cleanup_module - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCB 0xB0
DCB 0xB0
DCB 0xA8
DCB 0x80
; .ARM.exidx.exit.text ends


; Segment type: Pure data
AREA .modinfo, DATA, READONLY, ALIGN=0
; ORG 0x348
__UNIQUE_ID_license1 DCB "license=Dual BSD/GPL",0
__UNIQUE_ID_fpga_mem_offset_addrtype0 DCB "parmtype=fpga_mem_offset_addr:int",0
__module_depends DCB "depends=",0
__UNIQUE_ID_vermagic0 DCB "vermagic=4.6.0-xilinx-g20b57cf-dir"
DCB "ty SMP preempt mod_unload modversi"
DCB "ons ARMv7 p2v8 ",0
; .modinfo ends


; Segment type: Pure data
AREA .rodata.str1.1, DATA, READONLY, ALIGN=0
; ORG 0x3DC
aFpgaMemMmapErr DCB "fpga_mem_mmap error!",0xA,0
aInFpgaMemDrive DCB "In fpga mem driver!",0xA,0
aFpgaMem DCB "fpga_mem",0
aAllocFpgaMemFa DCB "alloc fpga_mem fail!",0xA,0
aKmallocCdevFai DCB "kmalloc cdev fail!",0xA,0
aAddFpgaMemFail DCB "add fpga_mem fail!",0xA,0
aFpgaVirMem DCB "fpga_vir_mem",0
aRequestMemRegi DCB "request_mem_region failed!",0xA,0
aRequestMemRegi_0 DCB "request_mem_region OK!",0xA,0
aIoremapFail DCB "ioremap fail!",0xA,0
aBaseVirAddr0xX DCB "!!!*base_vir_addr = 0x%x",0xA,0
aFpgaMemVirtual DCB "fpga mem virtual address is 0x%x",0xA
DCB 0
aErrFailedInCre DCB "Err:failed in creating fpga mem cl"
DCB "ass.",0xA,0
aByeByeFpgaMemD DCB "Bye Bye fpga mem driver!",0xA,0
; .rodata.str1.1 ends


; Segment type: Pure data
AREA __param, DATA, READONLY
; ORG 0x51C
__param_fpga_mem_offset_addr DCD __param_str_fpga_mem_offset_addr ; "fpga_mem_offset_addr"
DCD __this_module
DCD param_ops_int
DCB 0x24 ; $
DCB    1
DCB 0xFF
DCB    0
DCD fpga_mem_offset_addr
; __param ends


; Segment type: Pure data
AREA .ARM.extab, DATA, READONLY
; ORG 0x530
unk_530 DCB    7
DCB 0xB1
DCB    1
DCB 0x81
DCB 0xB0
DCB 0xB0
DCB    0
DCB 0x84
DCB    0
DCB    0
DCB    0
DCB    0
; .ARM.extab ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x53C
EXPORT fpga_mem_offset_addr
fpga_mem_offset_addr DCD 0xF000000
; .data ends


; Segment type: Pure data
AREA .gnu.linkonce.this_module, DATA, ALIGN=6
; ORG 0x540
EXPORT __this_module
__this_module DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x66 ; f
DCB 0x70 ; p
DCB 0x67 ; g
DCB 0x61 ; a
DCB 0x5F ; _
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x5F ; _
DCB 0x64 ; d
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x76 ; v
DCB 0x65 ; e
DCB 0x72 ; r
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCD init_module
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCD cleanup_module
ALIGN 0x20
; .gnu.linkonce.this_module ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x700
DCD (fpga_mem_open - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCB 0xB0
DCB 0xB0
DCB 0xB0
DCB 0x80
DCD (fpga_mem_release - .) AND 0x7FFFFFFF
DCB 0xB0
DCB 0xB0
DCB 0xB0
DCB 0x80
DCD (fpga_mem_mmap - .) AND 0x7FFFFFFF ; dependencies between sections in translation phase
DCD (unk_530 - .) AND 0x7FFFFFFF
; .ARM.exidx ends


; Segment type: Pure data
AREA __versions, DATA, READONLY
; ORG 0x718
____versions DCB 0xC8
DCB 0xAD
DCB 0x9D
DCB 0x6C ; l
DCB 0x6D ; m
DCB 0x6F ; o
DCB 0x64 ; d
DCB 0x75 ; u
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x6C ; l
DCB 0x61 ; a
DCB 0x79 ; y
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x74 ; t
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xD8
DCB 0xE1
DCB 0x16
DCB 0x94
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x71 ; q
DCB 0x75 ; u
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x56 ; V
DCB 0xD7
DCB 0xF9
DCB  0xB
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x6C ; l
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5D ; ]
DCB 0xEA
DCB 0x57 ; W
DCB 0xEE
DCB 0x6B ; k
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x65 ; e
DCB 0x73 ; s
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x94
DCB 0x97
DCB  0xC
DCB 0x22 ; "
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x69 ; i
DCB 0x74 ; t
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2F ; /
DCB 0x8B
DCB 0x88
DCB 0xA5
DCB 0x70 ; p
DCB 0x61 ; a
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x6D ; m
DCB 0x5F ; _
DCB 0x6F ; o
DCB 0x70 ; p
DCB 0x73 ; s
DCB 0x5F ; _
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC6
DCB 0x10
DCB 0x58 ; X
DCB 0x2E ; .
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x5F ; _
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x77 ; w
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x70 ; p
DCB 0x70 ; p
DCB 0x5F ; _
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x31 ; 1
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x4B ; K
DCB 0xF7
DCB 0x85
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x72 ; r
DCB 0x63 ; c
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x2A ; *
DCB 0x4F ; O
DCB 0x75 ; u
DCB 0xB7
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x79 ; y
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5E ; ^
DCB 0xE1
DCB 0x85
DCB 0x74 ; t
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x65 ; e
DCB 0x72 ; r
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x49 ; I
DCB 0xA0
DCB 0xE1
DCB 0x27 ; '
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x74 ; t
DCB 0x6B ; k
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xF0
DCB 0xA9
DCB 0xC5
DCB 0x79 ; y
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x70 ; p
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xE5
DCB 0xF6
DCB 0xC4
DCB 0x8B
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x69 ; i
DCB 0x63 ; c
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x5B ; [
DCB 0x4A ; J
DCB 0x53 ; S
DCB 0x5D ; ]
DCB 0x63 ; c
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x64 ; d
DCB 0x64 ; d
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC5
DCB 0x6A ; j
DCB 0x50 ; P
DCB 0x17
DCB 0x6B ; k
DCB 0x6D ; m
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x61 ; a
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x63 ; c
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9D
DCB 0xCC
DCB 0xB3
DCB 0x2A ; *
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6C ; l
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x65 ; e
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xBA
DCB  0xC
DCB 0x7A ; z
DCB    3
DCB 0x6B ; k
DCB 0x66 ; f
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0xC5
DCB 0x29 ; )
DCB 0x88
DCB 0xF7
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x70 ; p
DCB 0x5F ; _
DCB 0x70 ; p
DCB 0x66 ; f
DCB 0x6E ; n
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x61 ; a
DCB 0x6E ; n
DCB 0x67 ; g
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x53 ; S
DCB 0x39 ; 9
DCB 0xC0
DCB 0xED
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x6D ; m
DCB 0x61 ; a
DCB 0x70 ; p
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x51 ; Q
DCB 0xDB
DCB 0x5C ; \
DCB 0x37 ; 7
DCB 0x63 ; c
DCB 0x6C ; l
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x5F ; _
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x73 ; s
DCB 0x74 ; t
DCB 0x72 ; r
DCB 0x6F ; o
DCB 0x79 ; y
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    6
DCB 0xCF
DCB 0xD6
DCB 0xEF
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x61 ; a
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x62 ; b
DCB 0x69 ; i
DCB 0x5F ; _
DCB 0x75 ; u
DCB 0x6E ; n
DCB 0x77 ; w
DCB 0x69 ; i
DCB 0x6E ; n
DCB 0x64 ; d
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x70 ; p
DCB 0x70 ; p
DCB 0x5F ; _
DCB 0x70 ; p
DCB 0x72 ; r
DCB 0x30 ; 0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x73 ; s
DCB    9
DCB 0x4F ; O
DCB 0xB7
DCB 0x5F ; _
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x6C ; l
DCB 0x61 ; a
DCB 0x73 ; s
DCB 0x73 ; s
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x61 ; a
DCB 0x74 ; t
DCB 0x65 ; e
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB 0x9E
DCB 0x7C ; |
DCB 0x53 ; S
DCB 0x29 ; )
DCB 0x61 ; a
DCB 0x6C ; l
DCB 0x6C ; l
DCB 0x6F ; o
DCB 0x63 ; c
DCB 0x5F ; _
DCB 0x63 ; c
DCB 0x68 ; h
DCB 0x72 ; r
DCB 0x64 ; d
DCB 0x65 ; e
DCB 0x76 ; v
DCB 0x5F ; _
DCB 0x72 ; r
DCB 0x65 ; e
DCB 0x67 ; g
DCB 0x69 ; i
DCB 0x6F ; o
DCB 0x6E ; n
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; __versions ends


; Segment type: Uninitialized
AREA .bss, DATA
; ORG 0xCD8
EXPORT fpga_mem_num
fpga_mem_num % 4
EXPORT p_fpga_mem
p_fpga_mem % 4
EXPORT base_vir_mem_addr
base_vir_mem_addr % 4
EXPORT base_vir_addr
base_vir_addr % 4
EXPORT fpga_mem_class
fpga_mem_class % 4      ; Alternative name is '__key.26893'
; .bss ends


; Segment type: Externs
; int __fastcall alloc_chrdev_region(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
IMPORT alloc_chrdev_region
; int __fastcall _class_create(_DWORD, _DWORD, _DWORD)
IMPORT __class_create
IMPORT __aeabi_unwind_cpp_pr0
; int __fastcall class_destroy(_DWORD)
IMPORT class_destroy
; int __fastcall iounmap(_DWORD)
IMPORT iounmap
; int __fastcall remap_pfn_range(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
IMPORT remap_pfn_range
; int __fastcall kfree(_DWORD)
IMPORT kfree
; int __fastcall _release_region(_DWORD, _DWORD, _DWORD)
IMPORT __release_region
; int __fastcall kmem_cache_alloc(_DWORD, _DWORD)
IMPORT kmem_cache_alloc
; int cdev_add(void)
IMPORT cdev_add
; int __fastcall device_create(_DWORD)
IMPORT device_create
; int __fastcall ioremap(_DWORD, _DWORD)
IMPORT ioremap
; int printk(const char *, ...)
IMPORT printk
; int __fastcall unregister_chrdev_region(_DWORD, _DWORD)
IMPORT unregister_chrdev_region
; int __fastcall device_destroy(_DWORD, _DWORD)
IMPORT device_destroy
IMPORT iomem_resource
IMPORT __aeabi_unwind_cpp_pr1
IMPORT param_ops_int
; int __fastcall cdev_init(_DWORD, _DWORD)
IMPORT cdev_init
; _DWORD kmalloc_caches[7]
IMPORT kmalloc_caches
; int __fastcall cdev_del(_DWORD)
IMPORT cdev_del
; int __fastcall _request_region(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD)
IMPORT __request_region

END

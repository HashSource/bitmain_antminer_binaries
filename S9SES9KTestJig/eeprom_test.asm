;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 0BDD22CCCC987430F8A3C75C9E797547AB48411694E99FC34A8E9AB1CE225F15
; Input MD5    : F16BAABEDF17D4C66BE8379227A21A8F
; Input CRC32  : 950968EC
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/bitmain_antminer_binaries/S9SES9KTestJig/eeprom_test
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libm.so.6'
; Needed Library 'librt.so.1'
; Needed Library 'libpthread.so.0'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;
; Source File : '/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabihf/_build/builds/x86_64-unknown-linux-gnu/arm-linux-gnueabihf/glibc.git~linaro~2.21~master/csu/abi-note.o'
; Source File : '/home/tcwg-buildslave/workspace/tcwg-make-release/builder_arch/amd64/label/tcwg-x86_64-build/target/arm-linux-gnueabihf/_build/builds/x86_64-unknown-linux-gnu/arm-linux-gnueabihf/glibc.git~linaro~2.21~master/csu/start.o'
; Source File : 'init.c'
; Source File : '/media/qpan/BKUP/xilinx/gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf/bin/../arm-linux-gnueabihf/libc/usr/lib/crti.o'
; Source File : '/media/qpan/BKUP/xilinx/gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf/bin/../arm-linux-gnueabihf/libc/usr/lib/crtn.o'
; Source File : 'crtstuff.c'
; Source File : 'eeprom_test.c'
; Source File : 'eeprom.c'
; Source File : 'eeprom_conf_file_grep.c'
; Source File : 'elf-init.c'
; Source File : 'crtstuff.c'

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD _start+1            ; Entry point
DCD 0x34                ; PHT file offset
DCD 0xA590              ; SHT file offset
DCD 0x5000402           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 8                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x26                ; Number of entries in SHT
DCW 0x23                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0x3BBC              ; File offset
DCD unk_13BBC           ; Virtual address
DCD 0x13BBC             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x100               ; Size in file image
DCD 0x100               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x134               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10134             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0x3BC8              ; Size in file image
DCD 0x3BC8              ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0x3BC8              ; File offset
DCD __frame_dummy_init_array_entry ; Virtual address
DCD 0x23BC8             ; Physical address
DCD 0x1A6               ; Size in file image
DCD 0x20C               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0x3BD4              ; File offset
DCD _DYNAMIC            ; Virtual address
DCD 0x23BD4             ; Physical address
DCD 0x100               ; Size in file image
DCD 0x100               ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x150               ; File offset
DCD dword_10150         ; Virtual address
DCD 0x10150             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10134
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10150 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 2, 6, 0x20       ; ABI: Linux 2.6.32
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0xF5, 0xF5, 0x38, 0x5B, 0x90, 0x6C, 4 ; Desc
DCB 0x5A, 0x58, 0x7E, 0x5C, 0x50, 0xCC, 0xDE
DCB 0xD5, 0xBF, 0xEA, 0xEA, 0xDF, 0x95
; ELF Hash Table
elf_hash_nbucket DCD 0x11
elf_hash_nchain DCD 0x24
elf_hash_bucket DCD 2, 0, 0xE, 0x23, 0x16, 0x1C, 0x1A, 0x13
DCD 0xA, 0x21, 0x22, 7, 0xF, 0x1F, 0x19
DCD 0x17, 9
elf_hash_chain DCD 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 0xB
DCD 0, 0xC, 8, 0, 0, 6, 0x10, 0, 0x12, 0x11
DCD 0x14, 0, 1, 3, 0, 0, 0x1B, 0x15, 0x18
DCD 0x1D, 0xD, 0x1E, 0x20
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aPthreadMutexUn - byte_104B0,\ ; "pthread_mutex_unlock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aStrstr - byte_104B0, 0, 0, \ ; "strstr"
           0x12, 0, 0>
Elf32_Sym <aStrcmp - byte_104B0, 0, 0, \ ; "strcmp"
           0x12, 0, 0>
Elf32_Sym <aItmDeregistert - byte_104B0,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSprintf+1 - byte_104B0, 0, \ ; "printf"
           0, 0x12, 0, 0>
Elf32_Sym <aFopen - byte_104B0, 0, 0, \ ; "fopen"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexDe - byte_104B0,\ ; "pthread_mutex_destroy"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aFree - byte_104B0, 0, 0, \ ; "free"
           0x12, 0, 0>
Elf32_Sym <aPthreadMutexLo - byte_104B0,\ ; "pthread_mutex_lock"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aMemcpy - byte_104B0, 0, 0, \ ; "memcpy"
           0x12, 0, 0>
Elf32_Sym <aFtell - byte_104B0, 0, 0, \ ; "ftell"
           0x12, 0, 0>
Elf32_Sym <aMemcmp - byte_104B0, 0, 0, \ ; "memcmp"
           0x12, 0, 0>
Elf32_Sym <aPerror - byte_104B0, 0, 0, \ ; "perror"
           0x12, 0, 0>
Elf32_Sym <aUsleep - byte_104B0, 0, 0, \ ; "usleep"
           0x12, 0, 0>
Elf32_Sym <aStrcpy - byte_104B0, 0, 0, \ ; "strcpy"
           0x12, 0, 0>
Elf32_Sym <aFread - byte_104B0, 0, 0, \ ; "fread"
           0x12, 0, 0>
Elf32_Sym <aPuts - byte_104B0, 0, 0, \ ; "puts"
           0x12, 0, 0>
Elf32_Sym <aMalloc - byte_104B0, 0, 0, \ ; "malloc"
           0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_104B0, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_104B0, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aFopen+1 - byte_104B0, 0, 0, \ ; "open"
           0x12, 0, 0>
Elf32_Sym <aStrlen - byte_104B0, 0, 0, \ ; "strlen"
           0x12, 0, 0>
Elf32_Sym <aMmap - byte_104B0, 0, 0, \ ; "mmap"
           0x12, 0, 0>
Elf32_Sym <aMemset - byte_104B0, 0, 0, \ ; "memset"
           0x12, 0, 0>
Elf32_Sym <aPutchar - byte_104B0, 0, 0, \ ; "putchar"
           0x12, 0, 0>
Elf32_Sym <aStrncpy - byte_104B0, 0, 0, \ ; "strncpy"
           0x12, 0, 0>
Elf32_Sym <aFclose - byte_104B0, 0, 0, \ ; "fclose"
           0x12, 0, 0>
Elf32_Sym <aMunmap - byte_104B0, 0, 0, \ ; "munmap"
           0x12, 0, 0>
Elf32_Sym <aJvRegisterclas - byte_104B0,\ ; "_Jv_RegisterClasses"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aSprintf - byte_104B0, 0, 0, \ ; "sprintf"
           0x12, 0, 0>
Elf32_Sym <aAtoi - byte_104B0, 0, 0, \ ; "atoi"
           0x12, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_104B0,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aFseek - byte_104B0, 0, 0, \ ; "fseek"
           0x12, 0, 0>
Elf32_Sym <aAbort - byte_104B0, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aFclose+1 - byte_104B0, 0, 0,\ ; "close"
           0x12, 0, 0>
; ELF String Table
byte_104B0 DCB 0
aLibmSo6 DCB "libm.so.6",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aGmonStart DCB "__gmon_start__",0
aJvRegisterclas DCB "_Jv_RegisterClasses",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aLibrtSo1 DCB "librt.so.1",0
aLibpthreadSo0 DCB "libpthread.so.0",0
aPthreadMutexUn DCB "pthread_mutex_unlock",0
aPthreadMutexLo DCB "pthread_mutex_lock",0
aPthreadMutexDe DCB "pthread_mutex_destroy",0
aLibcSo6 DCB "libc.so.6",0
aStrcpy DCB "strcpy",0
aSprintf DCB "sprintf",0
aFopen DCB "fopen",0
aPerror DCB "perror",0
aFtell DCB "ftell",0
aStrncpy DCB "strncpy",0
aPuts DCB "puts",0
aPutchar DCB "putchar",0
aAbort DCB "abort",0
aMmap DCB "mmap",0
aStrlen DCB "strlen",0
aMemset DCB "memset",0
aStrstr DCB "strstr",0
aFseek DCB "fseek",0
aMemcmp DCB "memcmp",0
aMemcpy DCB "memcpy",0
aFclose DCB "fclose",0
aMalloc DCB "malloc",0
aMunmap DCB "munmap",0
aUsleep DCB "usleep",0
aFread DCB "fread",0
aAtoi DCB "atoi",0
aStrcmp DCB "strcmp",0
aLibcStartMain DCB "__libc_start_main",0
aFree DCB "free",0
aGlibc24 DCB "GLIBC_2.4",0
DCB 0
; ELF GNU Symbol Version Table
DCW 0
DCW 2                   ; pthread_mutex_unlock@@GLIBC_2.4
DCW 3                   ; strstr@@GLIBC_2.4
DCW 3                   ; strcmp@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 3                   ; printf@@GLIBC_2.4
DCW 3                   ; fopen@@GLIBC_2.4
DCW 2                   ; pthread_mutex_destroy@@GLIBC_2.4
DCW 3                   ; free@@GLIBC_2.4
DCW 2                   ; pthread_mutex_lock@@GLIBC_2.4
DCW 3                   ; memcpy@@GLIBC_2.4
DCW 3                   ; ftell@@GLIBC_2.4
DCW 3                   ; memcmp@@GLIBC_2.4
DCW 3                   ; perror@@GLIBC_2.4
DCW 3                   ; usleep@@GLIBC_2.4
DCW 3                   ; strcpy@@GLIBC_2.4
DCW 3                   ; fread@@GLIBC_2.4
DCW 3                   ; puts@@GLIBC_2.4
DCW 3                   ; malloc@@GLIBC_2.4
DCW 3                   ; __libc_start_main@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 2                   ; open@@GLIBC_2.4
DCW 3                   ; strlen@@GLIBC_2.4
DCW 3                   ; mmap@@GLIBC_2.4
DCW 3                   ; memset@@GLIBC_2.4
DCW 3                   ; putchar@@GLIBC_2.4
DCW 3                   ; strncpy@@GLIBC_2.4
DCW 3                   ; fclose@@GLIBC_2.4
DCW 3                   ; munmap@@GLIBC_2.4
DCW 0                   ; local  symbol: _Jv_RegisterClasses
DCW 3                   ; sprintf@@GLIBC_2.4
DCW 3                   ; atoi@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 3                   ; fseek@@GLIBC_2.4
DCW 3                   ; abort@@GLIBC_2.4
DCW 2                   ; close@@GLIBC_2.4
DCW 0
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_104B0, \
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 3, \ ; "GLIBC_2.4"
               aGlibc24 - byte_104B0, 0>
Elf32_Verneed <1, 1, \  ; "libpthread.so.0"
               aLibpthreadSo0 - byte_104B0,\
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_104B0, 0>
; ELF REL Relocation Table
Elf32_Rel <0x23D60, 0x1415> ; R_ARM_GLOB_DAT __gmon_start__
; ELF JMPREL Relocation Table
Elf32_Rel <0x23CE0, 0x116> ; R_ARM_JUMP_SLOT pthread_mutex_unlock
Elf32_Rel <0x23CE4, 0x216> ; R_ARM_JUMP_SLOT strstr
Elf32_Rel <0x23CE8, 0x316> ; R_ARM_JUMP_SLOT strcmp
Elf32_Rel <0x23CEC, 0x516> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x23CF0, 0x616> ; R_ARM_JUMP_SLOT fopen
Elf32_Rel <0x23CF4, 0x716> ; R_ARM_JUMP_SLOT pthread_mutex_destroy
Elf32_Rel <0x23CF8, 0x816> ; R_ARM_JUMP_SLOT free
Elf32_Rel <0x23CFC, 0x916> ; R_ARM_JUMP_SLOT pthread_mutex_lock
Elf32_Rel <0x23D00, 0xA16> ; R_ARM_JUMP_SLOT memcpy
Elf32_Rel <0x23D04, 0xB16> ; R_ARM_JUMP_SLOT ftell
Elf32_Rel <0x23D08, 0xC16> ; R_ARM_JUMP_SLOT memcmp
Elf32_Rel <0x23D0C, 0xD16> ; R_ARM_JUMP_SLOT perror
Elf32_Rel <0x23D10, 0xE16> ; R_ARM_JUMP_SLOT usleep
Elf32_Rel <0x23D14, 0xF16> ; R_ARM_JUMP_SLOT strcpy
Elf32_Rel <0x23D18, 0x1016> ; R_ARM_JUMP_SLOT fread
Elf32_Rel <0x23D1C, 0x1116> ; R_ARM_JUMP_SLOT puts
Elf32_Rel <0x23D20, 0x1216> ; R_ARM_JUMP_SLOT malloc
Elf32_Rel <0x23D24, 0x1316> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x23D28, 0x1416> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x23D2C, 0x1516> ; R_ARM_JUMP_SLOT open
Elf32_Rel <0x23D30, 0x1616> ; R_ARM_JUMP_SLOT strlen
Elf32_Rel <0x23D34, 0x1716> ; R_ARM_JUMP_SLOT mmap
Elf32_Rel <0x23D38, 0x1816> ; R_ARM_JUMP_SLOT memset
Elf32_Rel <0x23D3C, 0x1916> ; R_ARM_JUMP_SLOT putchar
Elf32_Rel <0x23D40, 0x1A16> ; R_ARM_JUMP_SLOT strncpy
Elf32_Rel <0x23D44, 0x1B16> ; R_ARM_JUMP_SLOT fclose
Elf32_Rel <0x23D48, 0x1C16> ; R_ARM_JUMP_SLOT munmap
Elf32_Rel <0x23D4C, 0x1E16> ; R_ARM_JUMP_SLOT sprintf
Elf32_Rel <0x23D50, 0x1F16> ; R_ARM_JUMP_SLOT atoi
Elf32_Rel <0x23D54, 0x2116> ; R_ARM_JUMP_SLOT fseek
Elf32_Rel <0x23D58, 0x2216> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x23D5C, 0x2316> ; R_ARM_JUMP_SLOT close
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x107C4
CODE32


; Alternative name is '_init'

; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              call_weak_fn
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x107D0
CODE32



; void sub_107D0()
sub_107D0
PUSH            {LR}
LDR             LR, =_GLOBAL_OFFSET_TABLE_ ; PIC mode
NOP
LDR             PC, [LR,#(off_23CDC - 0x23CD4)]!
; End of function sub_107D0

off_107E0 DCD _GLOBAL_OFFSET_TABLE_
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_unlock]
; [0000000C BYTES: COLLAPSED FUNCTION strstr]
; [0000000C BYTES: COLLAPSED FUNCTION strcmp]
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION fopen]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_destroy]
; [0000000C BYTES: COLLAPSED FUNCTION free]
; [0000000C BYTES: COLLAPSED FUNCTION pthread_mutex_lock]
; [0000000C BYTES: COLLAPSED FUNCTION memcpy]
; [0000000C BYTES: COLLAPSED FUNCTION ftell]
; [0000000C BYTES: COLLAPSED FUNCTION memcmp]
; [0000000C BYTES: COLLAPSED FUNCTION perror]
; [0000000C BYTES: COLLAPSED FUNCTION usleep]
; [0000000C BYTES: COLLAPSED FUNCTION strcpy]
; [0000000C BYTES: COLLAPSED FUNCTION fread]
; [0000000C BYTES: COLLAPSED FUNCTION puts]
; [0000000C BYTES: COLLAPSED FUNCTION malloc]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION open]
; [0000000C BYTES: COLLAPSED FUNCTION strlen]
; [0000000C BYTES: COLLAPSED FUNCTION mmap]
; [0000000C BYTES: COLLAPSED FUNCTION memset]
; [0000000C BYTES: COLLAPSED FUNCTION putchar]
; [0000000C BYTES: COLLAPSED FUNCTION strncpy]
; [0000000C BYTES: COLLAPSED FUNCTION fclose]
; [0000000C BYTES: COLLAPSED FUNCTION munmap]
; [0000000C BYTES: COLLAPSED FUNCTION sprintf]
; [0000000C BYTES: COLLAPSED FUNCTION atoi]
; [0000000C BYTES: COLLAPSED FUNCTION fseek]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION close]

; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10964
CODE32
ALIGN 8
; LOAD ends


; Segment type: Pure code
AREA .text, CODE, ALIGN=3
; ORG 0x10968
CODE16


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT _start
_start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(__libc_csu_fini+1)
PUSH.W          {R12}   ; fini
LDR             R0, =(main+1) ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function _start

off_1098C DCD __libc_csu_fini+1
off_10990 DCD main+1
off_10994 DCD init+1
CODE32



; int call_weak_fn()
call_weak_fn
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x109A8)
LDR             R2, =(__gmon_start___ptr_0 - 0x23CD4)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function call_weak_fn

off_109B4 DCD _GLOBAL_OFFSET_TABLE_ - 0x109A8
off_109B8 DCD __gmon_start___ptr_0 - 0x23CD4
CODE16



; char *deregister_tm_clones()
deregister_tm_clones
LDR             R3, =0x23D73
MOV             R0, #__TMC_END__
SUBS            R3, R3, R0
CMP             R3, #6
BLS             locret_109D8
MOV             R3, #0
CBZ             R3, locret_109D8
BX              R3

locret_109D8
BX              LR
; End of function deregister_tm_clones

ALIGN 4
dword_109DC DCD 0x23D73



; __int64 register_tm_clones()
register_tm_clones
MOVW            R3, #:lower16:__TMC_END__
MOVW            R0, #:lower16:__TMC_END__
MOVT            R3, #:upper16:__TMC_END__
MOVT            R0, #:upper16:__TMC_END__
SUBS            R1, R3, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_10A08
MOV             R3, #0
CBZ             R3, locret_10A08
BX              R3

locret_10A08
BX              LR
; End of function register_tm_clones

ALIGN 4



; char *_do_global_dtors_aux()
__do_global_dtors_aux
PUSH            {R4,LR}
MOV             R4, #__TMC_END__
LDRB            R3, [R4]
CBNZ            R3, locret_10A22
BL              deregister_tm_clones
MOVS            R3, #1
STRB            R3, [R4]

locret_10A22
POP             {R4,PC}
; End of function __do_global_dtors_aux




; __int64 frame_dummy()
frame_dummy
MOVW            R0, #:lower16:__JCR_LIST__
PUSH            {R3,LR}
MOVT            R0, #:upper16:__JCR_LIST__
LDR             R3, [R0]
CBNZ            R3, loc_10A38

loc_10A32
POP.W           {R3,LR}
B               register_tm_clones

loc_10A38
MOV             R3, #0
CMP             R3, #0
BEQ             loc_10A32
BLX             R3
B               loc_10A32
; End of function frame_dummy



; Attributes: bp-based frame

; void print_usage()
EXPORT print_usage
print_usage
PUSH            {R7,LR}
ADD             R7, SP, #0
MOV             R0, #aEepromTestHelp ; "eeprom_test help:"
BLX             puts
MOV             R0, #aDChainDumpEepr ; " -d [chain]                         dum"...
BLX             puts
MOV             R0, #aLChainTraverse ; " -l [chain]                         tra"...
BLX             puts
MOV             R0, #aIConfigFilePat ; " -i [config file path]              ini"...
BLX             puts
MOV             R0, #aEChainEraseEep ; " -e [chain]                         era"...
BLX             puts
MOV             R0, #aWChainEepromAd ; " -w [chain] [eeprom addr] [data0 ...]  "...
BLX             puts
MOV             R0, #aRChainEepromAd ; " -r [chain] [eeprom addr] [length]  rea"...
BLX             puts
MOV             R0, #aPChainPcbVerBo ; " -p [chain] [pcb_ver] [bom_ver]      up"...
BLX             puts
NOP
POP             {R7,PC}
; End of function print_usage



; Attributes: bp-based frame fpd=8

; int __cdecl dump_eeprom(uint8_t chain)
EXPORT dump_eeprom
dump_eeprom

chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#8+chain]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_10AE2
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE ; "chain[%d] does not exist!\n"
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10AEC

loc_10AE2
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_dump_raw
MOVS            R3, #0

loc_10AEC
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function dump_eeprom



; Attributes: bp-based frame fpd=8

; int __cdecl tarverse_eeprom(uint8_t chain)
EXPORT tarverse_eeprom
tarverse_eeprom

chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#8+chain]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_10B26
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE ; "chain[%d] does not exist!\n"
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10B2E

loc_10B26
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_dump

loc_10B2E
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function tarverse_eeprom

ALIGN 4


; Attributes: bp-based frame fpd=0x10

; int __cdecl init_eeprom_all(char *path)
EXPORT init_eeprom_all
init_eeprom_all

path= -0xC
ret= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
STR             R0, [R7,#0x10+path]
LDR             R0, [R7,#0x10+path] ; path
BL              eeprom_init
MOV             R3, R0
STRB            R3, [R7,#0x10+ret]
LDRB            R3, [R7,#0x10+ret]
EOR.W           R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
BEQ             loc_10B5C
MOV.W           R3, #0xFFFFFFFF
B               loc_10B5E

loc_10B5C
MOVS            R3, #0

loc_10B5E
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function init_eeprom_all

ALIGN 4


; Attributes: bp-based frame fpd=0x14

; int __cdecl update_version_info(uint8_t chain, uint8_t pcb, uint8_t bom)
EXPORT update_version_info
update_version_info

bom= -0xF
pcb= -0xE
chain= -0xD
ret= -5

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x14
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x14+chain]
MOV             R3, R1
STRB            R3, [R7,#0x14+pcb]
MOV             R3, R2
STRB            R3, [R7,#0x14+bom]
LDRB            R2, [R7,#0x14+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_10BA2
LDRB            R3, [R7,#0x14+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE ; "chain[%d] does not exist!\n"
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10BD0

loc_10BA2
LDRB            R2, [R7,#0x14+pcb]
LDRB            R3, [R7,#0x14+chain]
MOV             R1, R2  ; pcb_version
MOV             R0, R3  ; chain
BL              eeprom_set_pcb_version
MOV             R3, R0
STRB            R3, [R7,#0x14+ret]
LDRB            R4, [R7,#0x14+ret]
LDRB            R2, [R7,#0x14+bom]
LDRB            R3, [R7,#0x14+chain]
MOV             R1, R2  ; bom_version
MOV             R0, R3  ; chain
BL              eeprom_set_bom_version
MOV             R3, R0
ANDS            R3, R4
CMP             R3, #0
ITE NE
MOVNE           R3, #1
MOVEQ           R3, #0
STRB            R3, [R7,#0x14+ret]
LDRB            R3, [R7,#0x14+ret]

loc_10BD0
MOV             R0, R3
ADDS            R7, #0x14
MOV             SP, R7
POP             {R4,R7,PC}
; End of function update_version_info



; Attributes: bp-based frame fpd=8

; int __cdecl erase_eeprom(uint8_t chain)
EXPORT erase_eeprom
erase_eeprom

chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#8+chain]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_10C0A
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE ; "chain[%d] does not exist!\n"
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10C14

loc_10C0A
LDRB            R3, [R7,#8+chain]
MOV             R0, R3
BL              eeprom_erase_all
MOVS            R3, #0

loc_10C14
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function erase_eeprom



; Attributes: bp-based frame fpd=0x1C

; int __cdecl write_eeprom(uint8_t chain, int addr, uint8_t *buf, int len)
EXPORT write_eeprom
write_eeprom

len= -0x1C
buf= -0x18
addr= -0x14
chain= -0xD
ret= -9
i= -8

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x1C
ADD             R7, SP, #0
STR             R1, [R7,#0x1C+addr]
STR             R2, [R7,#0x1C+buf]
STR             R3, [R7,#0x1C+len]
MOV             R3, R0
STRB            R3, [R7,#0x1C+chain]
LDRB            R2, [R7,#0x1C+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_10C54
LDRB            R3, [R7,#0x1C+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE ; "chain[%d] does not exist!\n"
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10CDA

loc_10C54               ; addr
LDR             R1, [R7,#0x1C+addr]
LDR             R3, [R7,#0x1C+len] ; len
LDRB            R0, [R7,#0x1C+chain] ; chain
LDR             R2, [R7,#0x1C+buf] ; buf
BL              eeprom_write
MOV             R3, R0
STRB            R3, [R7,#0x1C+ret]
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R4, [R7,#0x1C+ret]
LDR             R1, [R7,#0x1C+addr] ; addr
LDR             R3, [R7,#0x1C+len] ; len
LDRB            R0, [R7,#0x1C+chain] ; chain
LDR             R2, [R7,#0x1C+buf] ; buf
BL              eeprom_write
MOV             R3, R0
ANDS            R3, R4
CMP             R3, #0
ITE NE
MOVNE           R3, #1
MOVEQ           R3, #0
STRB            R3, [R7,#0x1C+ret]
LDRB            R3, [R7,#0x1C+ret]
EOR.W           R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
BEQ             loc_10CA6
MOV             R0, #aWriteError ; "write error!"
BLX             puts
MOV.W           R3, #0xFFFFFFFF
B               loc_10CDA

loc_10CA6
MOVS            R3, #0
STR             R3, [R7,#0x1C+i]
B               loc_10CD0

loc_10CAC
LDRB            R1, [R7,#0x1C+chain]
LDR             R2, [R7,#0x1C+addr]
LDR             R3, [R7,#0x1C+i]
ADDS            R0, R2, R3
LDR             R3, [R7,#0x1C+i]
LDR             R2, [R7,#0x1C+buf]
ADD             R3, R2
LDRB            R3, [R3]
MOV             R2, R0
MOV             R0, #aChainD0x02x0x0 ; "[chain%d] [0x%02x] : 0x%02x\n"
BLX             printf
LDR             R3, [R7,#0x1C+i]
ADDS            R3, #1
STR             R3, [R7,#0x1C+i]

loc_10CD0
LDR             R2, [R7,#0x1C+i]
LDR             R3, [R7,#0x1C+len]
CMP             R2, R3
BLT             loc_10CAC
MOVS            R3, #0

loc_10CDA
MOV             R0, R3
ADDS            R7, #0x1C
MOV             SP, R7
POP             {R4,R7,PC}
; End of function write_eeprom

ALIGN 4


; Attributes: bp-based frame fpd=0x118

; int __cdecl read_eeprom(uint8_t chain, int addr, int len)
EXPORT read_eeprom
read_eeprom

len= -0x114
addr= -0x110
chain= -0x109
buf= -0x108
ret= -5
i= -4

PUSH            {R4,R5,R7,LR}
SUB             SP, SP, #0x118
ADD             R7, SP, #0
ADD.W           R3, R7, #0x118+addr
STR             R1, [R3]
ADDS            R3, R7, #0x118+len
STR             R2, [R3]
ADD.W           R3, R7, #0x118+chain
MOV             R2, R0
STRB            R2, [R3]
ADD.W           R3, R7, #0x118+chain
LDRB            R2, [R3]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_10D2C
ADD.W           R3, R7, #0x118+chain
LDRB            R3, [R3]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE ; "chain[%d] does not exist!\n"
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10DEE

loc_10D2C
ADD.W           R3, R7, #0x118+addr
LDR             R1, [R3] ; addr
ADDS            R3, R7, #0x118+len
LDR             R4, [R3]
ADD.W           R2, R7, #0x118+buf ; buf
ADD.W           R3, R7, #0x118+chain
LDRB            R0, [R3] ; chain
MOV             R3, R4  ; len
BL              eeprom_read
MOV             R3, R0
STRB.W          R3, [R7,#0x118+ret]
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB.W          R4, [R7,#0x118+ret]
ADD.W           R3, R7, #0x118+addr
LDR             R1, [R3] ; addr
ADDS            R3, R7, #0x118+len
LDR             R5, [R3]
ADD.W           R2, R7, #0x118+buf ; buf
ADD.W           R3, R7, #0x118+chain
LDRB            R0, [R3] ; chain
MOV             R3, R5  ; len
BL              eeprom_read
MOV             R3, R0
ANDS            R3, R4
CMP             R3, #0
ITE NE
MOVNE           R3, #1
MOVEQ           R3, #0
STRB.W          R3, [R7,#0x118+ret]
LDRB.W          R3, [R7,#0x118+ret]
EOR.W           R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
BEQ             loc_10DA2
MOV             R0, #aWriteError ; "write error!"
BLX             puts
MOV.W           R3, #0xFFFFFFFF
B               loc_10DEE

loc_10DA2
MOVS            R3, #0
STR.W           R3, [R7,#0x118+i]
B               loc_10DE0

loc_10DAA
ADD.W           R3, R7, #0x118+chain
LDRB            R1, [R3]
ADD.W           R3, R7, #0x118+addr
LDR             R2, [R3]
LDR.W           R3, [R7,#0x118+i]
ADDS            R0, R2, R3
ADD.W           R2, R7, #0x118+buf
LDR.W           R3, [R7,#0x118+i]
ADD             R3, R2
LDRB            R3, [R3]
MOV             R2, R0
MOV             R0, #aChainD0x02x0x0 ; "[chain%d] [0x%02x] : 0x%02x\n"
BLX             printf
LDR.W           R3, [R7,#0x118+i]
ADDS            R3, #1
STR.W           R3, [R7,#0x118+i]

loc_10DE0
ADDS            R3, R7, #0x118+len
LDR.W           R2, [R7,#0x118+i]
LDR             R3, [R3]
CMP             R2, R3
BLT             loc_10DAA
MOVS            R3, #0

loc_10DEE
MOV             R0, R3
ADD.W           R7, R7, #0x118
MOV             SP, R7
POP             {R4,R5,R7,PC}
; End of function read_eeprom



; Attributes: bp-based frame fpd=0x228

; int __fastcall main(int argc, const char **argv, const char **envp)
EXPORT main
main

var_230= -0x230
offset= -0x22C
argv= -0x228
argc= -0x224
buf= -0x220
path= -0x120
fd= -0x20
i= -0x1C
bom= -0x16
pcb= -0x15
len= -0x14
addr= -0x10
chain= -9
option= -8
ret= -4

PUSH            {R7,LR}
SUB.W           SP, SP, #0x230
ADD             R7, SP, #8
ADDS            R3, R7, #0x228+argc
STR             R0, [R3]
MOV             R3, R7
STR             R1, [R3]
MOVS            R3, #0
STR.W           R3, [R7,#0x228+ret]
MOVS            R3, #0
STR.W           R3, [R7,#0x228+option]
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
CMP             R3, #0
BEQ             loc_10E58
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aHelp ; "--help"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BEQ             loc_10E58
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aH ; "-h"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_10E5E

loc_10E58
BL              print_usage
B               close_0

loc_10E5E               ; oflag
MOVS            R1, #2
MOV             R0, #aDevAxiFpgaDev ; "/dev/axi_fpga_dev"
BLX             open
STR.W           R0, [R7,#0x228+fd]
LDR.W           R3, [R7,#0x228+fd]
CMP             R3, #0
BGE             loc_10E9A
LDR.W           R1, [R7,#0x228+fd]
MOV             R0, #aDevAxiFpgaDevO ; "/dev/axi_fpga_dev open failed. fd = %d"...
BLX             printf
MOV             R0, #aOpen ; "open"
BLX             perror
MOV.W           R3, #0xFFFFFFFF
B               loc_1128E

loc_10E9A
MOVS            R3, #0
STR             R3, [SP,#0x230+offset] ; offset
LDR.W           R3, [R7,#0x228+fd]
STR             R3, [SP,#0x230+var_230] ; fd
MOVS            R3, #1  ; flags
MOVS            R2, #3  ; prot
MOV.W           R1, #0x160 ; len
MOVS            R0, #0  ; addr
BLX             mmap
MOV             R2, R0
MOV             R3, #axi_fpga_addr
STR             R2, [R3]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_10EEA
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
MOV             R1, R3
MOV             R0, #aMmapAxiFpgaAdd ; "mmap axi_fpga_addr failed. axi_fpga_add"...
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_1128E

loc_10EEA
BL              check_chain_num
MOV             R2, R0
MOV             R3, #chain_num
STR             R2, [R3]
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aD ; "-d"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_10F3C
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
CMP             R3, #3
BNE.W           loc_11172
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+chain]
MOVS            R3, #1
STR.W           R3, [R7,#0x228+option]
B               loc_1118A

loc_10F3C
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aL ; "-l"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_10F7E
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
CMP             R3, #3
BNE.W           loc_11176
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+chain]
MOVS            R3, #2
STR.W           R3, [R7,#0x228+option]
B               loc_1118A

loc_10F7E
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aI ; "-i"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_10FC0
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
CMP             R3, #3
BNE.W           loc_1117A
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #8
LDR             R2, [R3]
ADD.W           R3, R7, #0x228+path
MOV             R1, R2  ; src
MOV             R0, R3  ; dest
BLX             strcpy
MOVS            R3, #3
STR.W           R3, [R7,#0x228+option]
B               loc_1118A

loc_10FC0
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aE ; "-e"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_11002
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
CMP             R3, #3
BNE.W           loc_1117E
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+chain]
MOVS            R3, #4
STR.W           R3, [R7,#0x228+option]
B               loc_1118A

loc_11002
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aW ; "-w"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_110A6
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
CMP             R3, #3
BLE.W           loc_11182
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+chain]
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #0xC
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
STR.W           R0, [R7,#0x228+addr]
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
SUBS            R3, #4
STR.W           R3, [R7,#0x228+len]
MOVS            R3, #0
STR.W           R3, [R7,#0x228+i]
B               loc_11092

loc_11060
LDR.W           R3, [R7,#0x228+i]
ADDS            R3, #4
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
UXTB            R1, R3
ADD.W           R2, R7, #0x228+buf
LDR.W           R3, [R7,#0x228+i]
ADD             R3, R2
MOV             R2, R1
STRB            R2, [R3]
LDR.W           R3, [R7,#0x228+i]
ADDS            R3, #1
STR.W           R3, [R7,#0x228+i]

loc_11092
LDR.W           R2, [R7,#0x228+i]
LDR.W           R3, [R7,#0x228+len]
CMP             R2, R3
BLT             loc_11060
MOVS            R3, #5
STR.W           R3, [R7,#0x228+option]
B               loc_1118A

loc_110A6
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aR ; "-r"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_1110A
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
CMP             R3, #5
BNE             loc_11186
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+chain]
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #0xC
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
STR.W           R0, [R7,#0x228+addr]
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #0x10
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
STR.W           R0, [R7,#0x228+len]
MOVS            R3, #6
STR.W           R3, [R7,#0x228+option]
B               loc_1118A

loc_1110A
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #4
LDR             R3, [R3]
MOV             R1, #aP ; "-p"
MOV             R0, R3  ; s1
BLX             strcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_1118A
ADDS            R3, R7, #0x228+argc
LDR             R3, [R3]
CMP             R3, #5
BNE             loc_1118E
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+chain]
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #0xC
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+pcb]
MOV             R3, R7
LDR             R3, [R3]
ADDS            R3, #0x10
LDR             R3, [R3]
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R3, R0
STRB.W          R3, [R7,#0x228+bom]
MOVS            R3, #7
STR.W           R3, [R7,#0x228+option]
B               loc_1118A

loc_11172
NOP
B               loc_11190

loc_11176
NOP
B               loc_11190

loc_1117A
NOP
B               loc_11190

loc_1117E
NOP
B               loc_11190

loc_11182
NOP
B               loc_11190

loc_11186
NOP
B               loc_11190

loc_1118A
NOP
B               loc_11190

loc_1118E
NOP

loc_11190
LDR.W           R3, [R7,#0x228+option]
CMP             R3, #7  ; switch 8 cases
BHI             def_1119A ; jumptable 0001119A default case
ADR             R2, jpt_1119A
LDR.W           PC, [R2,R3,LSL#2] ; switch jump
NOP
jpt_1119A DCD loc_111C0+1 ; jump table for switch statement
DCD loc_111CC+1
DCD loc_111DC+1
DCD loc_111EC+1
DCD loc_111FC+1
DCD loc_1120C+1
DCD loc_11226+1
DCD loc_1123E+1

loc_111C0               ; jumptable 0001119A case 0
BL              print_usage
MOVS            R3, #0
STR.W           R3, [R7,#0x228+ret]
B               loc_11262

loc_111CC               ; jumptable 0001119A case 1
LDRB.W          R3, [R7,#0x228+chain]
MOV             R0, R3  ; chain
BL              dump_eeprom
STR.W           R0, [R7,#0x228+ret]
B               loc_11262

loc_111DC               ; jumptable 0001119A case 2
LDRB.W          R3, [R7,#0x228+chain]
MOV             R0, R3  ; chain
BL              tarverse_eeprom
STR.W           R0, [R7,#0x228+ret]
B               loc_11262

loc_111EC               ; jumptable 0001119A case 3
ADD.W           R3, R7, #0x228+path
MOV             R0, R3  ; path
BL              init_eeprom_all
STR.W           R0, [R7,#0x228+ret]
B               loc_11262

loc_111FC               ; jumptable 0001119A case 4
LDRB.W          R3, [R7,#0x228+chain]
MOV             R0, R3  ; chain
BL              erase_eeprom
STR.W           R0, [R7,#0x228+ret]
B               loc_11262

loc_1120C               ; jumptable 0001119A case 5
ADD.W           R2, R7, #0x228+buf
LDRB.W          R0, [R7,#0x228+chain] ; chain
LDR.W           R3, [R7,#0x228+len] ; len
LDR.W           R1, [R7,#0x228+addr] ; addr
BL              write_eeprom
STR.W           R0, [R7,#0x228+ret]
B               loc_11262

loc_11226               ; jumptable 0001119A case 6
LDRB.W          R3, [R7,#0x228+chain]
LDR.W           R2, [R7,#0x228+len] ; len
LDR.W           R1, [R7,#0x228+addr] ; addr
MOV             R0, R3  ; chain
BL              read_eeprom
STR.W           R0, [R7,#0x228+ret]
B               loc_11262

loc_1123E               ; jumptable 0001119A case 7
LDRB.W          R2, [R7,#0x228+bom]
LDRB.W          R1, [R7,#0x228+pcb] ; pcb
LDRB.W          R3, [R7,#0x228+chain]
MOV             R0, R3  ; chain
BL              update_version_info
STR.W           R0, [R7,#0x228+ret]
B               loc_11262

def_1119A               ; jumptable 0001119A default case
BL              print_usage
MOVS            R3, #0
STR.W           R3, [R7,#0x228+ret]
NOP

loc_11262               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_destroy
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
MOV.W           R1, #0x160 ; len
MOV             R0, R3  ; addr
BLX             munmap
LDR.W           R0, [R7,#0x228+fd] ; fd
BLX             close

close_0
LDR.W           R3, [R7,#0x228+ret]

loc_1128E
MOV             R0, R3
ADD.W           R7, R7, #0x228
MOV             SP, R7
POP             {R7,PC}
; End of function main



; Attributes: bp-based frame fpd=0x14

; uint16_t __cdecl CRC16(const uint8_t *p_data, uint16_t w_len)
EXPORT CRC16
CRC16

w_len= -0x12
p_data= -0x10
wIndex= -8
chCRCLo= -6
chCRCHi= -5

PUSH            {R7}
SUB             SP, SP, #0x14
ADD             R7, SP, #0
STR             R0, [R7,#0x14+p_data]
MOV             R3, R1
STRH            R3, [R7,#0x14+w_len]
MOVS            R3, #0xFF
STRB            R3, [R7,#0x14+chCRCHi]
MOVS            R3, #0xFF
STRB            R3, [R7,#0x14+chCRCLo]
MOVS            R3, #0
STRH            R3, [R7,#0x14+wIndex]
B               loc_112E2

loc_112B2
LDR             R3, [R7,#0x14+p_data]
ADDS            R2, R3, #1
STR             R2, [R7,#0x14+p_data]
LDRB            R2, [R3]
LDRB            R3, [R7,#0x14+chCRCLo]
EORS            R3, R2
UXTB            R3, R3
STRH            R3, [R7,#0x14+wIndex]
LDRH            R2, [R7,#0x14+wIndex]
MOV             R3, #chCRCHTalbe
LDRB            R2, [R3,R2]
LDRB            R3, [R7,#0x14+chCRCHi]
EORS            R3, R2
STRB            R3, [R7,#0x14+chCRCLo]
LDRH            R2, [R7,#0x14+wIndex]
MOV             R3, #chCRCLTalbe
LDRB            R3, [R3,R2]
STRB            R3, [R7,#0x14+chCRCHi]

loc_112E2
LDRH            R3, [R7,#0x14+w_len]
SUBS            R2, R3, #1
STRH            R2, [R7,#0x14+w_len]
CMP             R3, #0
BNE             loc_112B2
LDRB            R3, [R7,#0x14+chCRCHi]
LSLS            R3, R3, #8
SXTH            R2, R3
LDRB            R3, [R7,#0x14+chCRCLo]
SXTH            R3, R3
ORRS            R3, R2
SXTH            R3, R3
UXTH            R3, R3
MOV             R0, R3
ADDS            R7, #0x14
MOV             SP, R7
POP.W           {R7}
BX              LR
; End of function CRC16



; Attributes: bp-based frame fpd=0x10

; int check_chain_num()
EXPORT check_chain_num
check_chain_num

ret= -0xC
chain_num= -8
i= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV.W           R3, #0xFFFFFFFF
STR             R3, [R7,#0x10+ret]
MOVS            R3, #0
STR             R3, [R7,#0x10+chain_num]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
STR             R3, [R7,#0x10+ret]
LDR             R3, [R7,#0x10+ret]
CMP             R3, #0
BGE             loc_11332
MOVS            R3, #0
B               loc_1139A

loc_11332
MOVS            R3, #0
STR             R3, [R7,#0x10+i]
B               loc_11384

loc_11338
LDR             R2, [R7,#0x10+ret]
LDR             R3, [R7,#0x10+i]
ASR.W           R3, R2, R3
AND.W           R3, R3, #1
CMP             R3, #0
BEQ             loc_1136E
MOV             R3, #chain_list
LDR             R2, [R7,#0x10+i]
MOVS            R1, #1
STR.W           R1, [R3,R2,LSL#2]
LDR             R1, [R7,#0x10+i]
MOV             R0, #aChainD ; "chain[%d] "
BLX             printf
LDR             R3, [R7,#0x10+chain_num]
ADDS            R3, #1
STR             R3, [R7,#0x10+chain_num]
B               loc_1137E

loc_1136E
MOV             R3, #chain_list
LDR             R2, [R7,#0x10+i]
MOVS            R1, #0
STR.W           R1, [R3,R2,LSL#2]

loc_1137E
LDR             R3, [R7,#0x10+i]
ADDS            R3, #1
STR             R3, [R7,#0x10+i]

loc_11384
LDR             R3, [R7,#0x10+i]
CMP             R3, #0xF
BLE             loc_11338
LDR             R1, [R7,#0x10+chain_num]
MOV             R0, #aFoundDChainTot ; "found, %d chain total\n"
BLX             printf
LDR             R3, [R7,#0x10+chain_num]

loc_1139A
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function check_chain_num

ALIGN 4


; Attributes: bp-based frame fpd=0xC

; unsigned int get_iic()
EXPORT get_iic
get_iic

ret= -8

PUSH            {R7}
SUB             SP, SP, #0xC
ADD             R7, SP, #0
MOV.W           R3, #0xFFFFFFFF
STR             R3, [R7,#0xC+ret]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #0x30 ; '0'
LDR             R3, [R3]
STR             R3, [R7,#0xC+ret]
LDR             R3, [R7,#0xC+ret]
MOV             R0, R3
ADDS            R7, #0xC
MOV             SP, R7
POP.W           {R7}
BX              LR
; End of function get_iic

ALIGN 0x10


; Attributes: bp-based frame fpd=0x18

; unsigned __int8 __cdecl set_iic(unsigned int data)
EXPORT set_iic
set_iic

data= -0x14
ret_data= -9
ret= -8
wait_counter= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #0
STR             R0, [R7,#0x18+data]
MOVS            R3, #0
STR             R3, [R7,#0x18+ret]
MOVS            R3, #0
STRB            R3, [R7,#0x18+ret_data]
MOVS            R3, #0
STR             R3, [R7,#0x18+wait_counter]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #0x30 ; '0'
LDR             R2, [R7,#0x18+data]
BIC.W           R2, R2, #0xC0000000
STR             R2, [R3]

loc_113F8
BL              get_iic
STR             R0, [R7,#0x18+ret]
LDR             R3, [R7,#0x18+ret]
CMP             R3, #0
BGE             loc_1140C
LDR             R3, [R7,#0x18+ret]
STRB            R3, [R7,#0x18+ret_data]
LDRB            R3, [R7,#0x18+ret_data]
B               loc_11432

loc_1140C
LDR             R3, [R7,#0x18+wait_counter]
ADDS            R2, R3, #1
STR             R2, [R7,#0x18+wait_counter]
CMP             R3, #0x64 ; 'd'
BLE             loc_11428
LDR             R1, [R7,#0x18+ret]
MOV             R0, #aCouldNotGetIic ; "could not get iic, ret = 0x%08x\n"
BLX             printf
MOVS            R3, #0
B               loc_11432

loc_11428               ; useconds
MOVW            R0, #0x1388
BLX             usleep
B               loc_113F8

loc_11432
MOV             R0, R3
ADDS            R7, #0x18
MOV             SP, R7
POP             {R7,PC}
; End of function set_iic

ALIGN 4


; Attributes: bp-based frame fpd=0x14

; uint8_t __cdecl znyq_set_iic(unsigned __int8 dev_addr, unsigned __int8 which_iic, bool read, bool reg_addr_valid, unsigned __int8 reg_addr, unsigned __int8 data)
EXPORT znyq_set_iic
znyq_set_iic

reg_addr_valid= -0x10
read= -0xF
which_iic= -0xE
dev_addr= -0xD
value= -8
reg_addr=  0xC
data=  0x10

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x14
ADD             R7, SP, #0
MOV             R4, R0
MOV             R0, R1
MOV             R1, R2
MOV             R2, R3
MOV             R3, R4
STRB            R3, [R7,#0x14+dev_addr]
MOV             R3, R0
STRB            R3, [R7,#0x14+which_iic]
MOV             R3, R1
STRB            R3, [R7,#0x14+read]
MOV             R3, R2
STRB            R3, [R7,#0x14+reg_addr_valid]
MOVS            R3, #0
STR             R3, [R7,#0x14+value]
LDRB            R3, [R7,#0x14+read]
CMP             R3, #0
BEQ             loc_1146C
LDR             R3, [R7,#0x14+value]
ORR.W           R3, R3, #0x2000000
STR             R3, [R7,#0x14+value]

loc_1146C
LDRB            R3, [R7,#0x14+reg_addr_valid]
CMP             R3, #0
BEQ             loc_11488
LDRB.W          R3, [R7,#0x14+reg_addr]
LSLS            R3, R3, #8
MOV             R2, R3
LDR             R3, [R7,#0x14+value]
ORRS            R3, R2
STR             R3, [R7,#0x14+value]
LDR             R3, [R7,#0x14+value]
ORR.W           R3, R3, #0x1000000
STR             R3, [R7,#0x14+value]

loc_11488
LDRB            R3, [R7,#0x14+which_iic]
AND.W           R3, R3, #3
LSLS            R3, R3, #0x1A
MOV             R2, R3
LDR             R3, [R7,#0x14+value]
ORRS            R3, R2
STR             R3, [R7,#0x14+value]
LDRB            R3, [R7,#0x14+dev_addr]
LSRS            R3, R3, #3
UXTB            R3, R3
AND.W           R3, R3, #0xF
LSLS            R3, R3, #0x14
MOV             R2, R3
LDR             R3, [R7,#0x14+value]
ORRS            R3, R2
STR             R3, [R7,#0x14+value]
LDRB            R3, [R7,#0x14+dev_addr]
AND.W           R3, R3, #7
LSLS            R3, R3, #0x10
MOV             R2, R3
LDR             R3, [R7,#0x14+value]
ORRS            R3, R2
STR             R3, [R7,#0x14+value]
LDRB.W          R3, [R7,#0x14+data]
LDR             R2, [R7,#0x14+value]
ORRS            R3, R2
STR             R3, [R7,#0x14+value]
LDR             R0, [R7,#0x14+value] ; data
BL              set_iic
MOV             R3, R0
MOV             R0, R3
ADDS            R7, #0x14
MOV             SP, R7
POP             {R4,R7,PC}
; End of function znyq_set_iic

ALIGN 4


; Attributes: bp-based frame fpd=0x10

; uint8_t __cdecl write_eeprom_iic(uint8_t chain, uint8_t reg_addr, uint8_t data)
EXPORT write_eeprom_iic
write_eeprom_iic

var_18= -0x18
var_14= -0x14
data= -0xB
reg_addr= -0xA
chain= -9
reg_addr_valid= -3
which_iic= -2
dev_addr= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #8
MOV             R3, R0
STRB            R3, [R7,#0x10+chain]
MOV             R3, R1
STRB            R3, [R7,#0x10+reg_addr]
MOV             R3, R2
STRB            R3, [R7,#0x10+data]
MOVS            R3, #0
STRB            R3, [R7,#0x10+dev_addr]
MOVS            R3, #0
STRB            R3, [R7,#0x10+which_iic]
MOVS            R3, #1
STRB            R3, [R7,#0x10+reg_addr_valid]
LDRSB.W         R3, [R7,#0x10+chain]
AND.W           R3, R3, #7
SXTB            R3, R3
ORR.W           R3, R3, #0x50 ; 'P'
SXTB            R3, R3
STRB            R3, [R7,#0x10+dev_addr]
LDRB            R2, [R7,#0x10+reg_addr_valid]
LDRB            R1, [R7,#0x10+which_iic] ; which_iic
LDRB            R0, [R7,#0x10+dev_addr] ; dev_addr
LDRB            R3, [R7,#0x10+data]
STR             R3, [SP,#0x18+var_14] ; data
LDRB            R3, [R7,#0x10+reg_addr]
STR             R3, [SP,#0x18+var_18] ; reg_addr
MOV             R3, R2  ; reg_addr_valid
MOVS            R2, #0  ; read
BL              znyq_set_iic
MOV             R3, R0
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function write_eeprom_iic



; Attributes: bp-based frame fpd=0x10

; uint8_t __cdecl read_eeprom_iic(uint8_t chain, uint8_t reg_addr)
EXPORT read_eeprom_iic
read_eeprom_iic

var_18= -0x18
data= -0x14
reg_addr= -0xA
chain= -9
reg_addr_valid= -3
which_iic= -2
dev_addr= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #8
MOV             R3, R0
MOV             R2, R1
STRB            R3, [R7,#0x10+chain]
MOV             R3, R2
STRB            R3, [R7,#0x10+reg_addr]
MOVS            R3, #0
STRB            R3, [R7,#0x10+dev_addr]
MOVS            R3, #0
STRB            R3, [R7,#0x10+which_iic]
MOVS            R3, #1
STRB            R3, [R7,#0x10+reg_addr_valid]
LDRSB.W         R3, [R7,#0x10+chain]
AND.W           R3, R3, #7
SXTB            R3, R3
ORR.W           R3, R3, #0x50 ; 'P'
SXTB            R3, R3
STRB            R3, [R7,#0x10+dev_addr]
LDRB            R2, [R7,#0x10+reg_addr_valid]
LDRB            R1, [R7,#0x10+which_iic] ; which_iic
LDRB            R0, [R7,#0x10+dev_addr] ; dev_addr
MOVS            R3, #0
STR             R3, [SP,#0x18+data] ; data
LDRB            R3, [R7,#0x10+reg_addr]
STR             R3, [SP,#0x18+var_18] ; reg_addr
MOV             R3, R2  ; reg_addr_valid
MOVS            R2, #1  ; read
BL              znyq_set_iic
MOV             R3, R0
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function read_eeprom_iic

ALIGN 4


; Attributes: bp-based frame fpd=8

; void __cdecl eeprom_write_one_byte(uint8_t address, uint8_t data, uint8_t chain)
EXPORT eeprom_write_one_byte
eeprom_write_one_byte

chain= -3
data= -2
address= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#8+address]
MOV             R3, R1
STRB            R3, [R7,#8+data]
MOV             R3, R2
STRB            R3, [R7,#8+chain]
LDRB            R2, [R7,#8+data] ; data
LDRB            R1, [R7,#8+address] ; reg_addr
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              write_eeprom_iic
NOP
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_write_one_byte

ALIGN 0x10


; Attributes: bp-based frame fpd=0x10

; uint8_t __cdecl eeprom_read_one_byte(uint8_t address, uint8_t chain)
EXPORT eeprom_read_one_byte
eeprom_read_one_byte

chain= -0xA
address= -9
data= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
MOV             R2, R1
STRB            R3, [R7,#0x10+address]
MOV             R3, R2
STRB            R3, [R7,#0x10+chain]
MOVS            R3, #0
STRB            R3, [R7,#0x10+data]
LDRB            R2, [R7,#0x10+address]
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R2  ; reg_addr
MOV             R0, R3  ; chain
BL              read_eeprom_iic
MOV             R3, R0
STRB            R3, [R7,#0x10+data]
LDRB            R3, [R7,#0x10+data]
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_read_one_byte

ALIGN 0x10


; Attributes: bp-based frame fpd=0x10

; void __cdecl eeprom_write_bytes(uint8_t address, uint8_t *buf, uint8_t chain, uint8_t length)
EXPORT eeprom_write_bytes
eeprom_write_bytes

buf= -0x10
length= -0xB
chain= -0xA
address= -9
i= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
STR             R1, [R7,#0x10+buf]
MOV             R1, R2
MOV             R2, R3
MOV             R3, R0
STRB            R3, [R7,#0x10+address]
MOV             R3, R1
STRB            R3, [R7,#0x10+chain]
MOV             R3, R2
STRB            R3, [R7,#0x10+length]
MOVS            R3, #0
STRB            R3, [R7,#0x10+i]
LDRB            R2, [R7,#0x10+address]
LDRB            R3, [R7,#0x10+length]
ADD             R3, R2
CMP.W           R3, #0x100
BGT             loc_11626
MOVS            R3, #0
STRB            R3, [R7,#0x10+i]
B               loc_1161C

loc_115FE
LDRB            R2, [R7,#0x10+address]
LDRB            R3, [R7,#0x10+i]
ADD             R3, R2
UXTB            R0, R3  ; address
LDRB            R3, [R7,#0x10+i]
LDR             R2, [R7,#0x10+buf]
ADD             R3, R2
LDRB            R3, [R3]
LDRB            R2, [R7,#0x10+chain] ; chain
MOV             R1, R3  ; data
BL              eeprom_write_one_byte
LDRB            R3, [R7,#0x10+i]
ADDS            R3, #1
STRB            R3, [R7,#0x10+i]

loc_1161C
LDRB            R2, [R7,#0x10+i]
LDRB            R3, [R7,#0x10+length]
CMP             R2, R3
BCC             loc_115FE
B               loc_11628

loc_11626
NOP

loc_11628
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_write_bytes

ALIGN 0x10


; Attributes: bp-based frame fpd=0x14

; void __cdecl eeprom_read_bytes(uint8_t address, uint8_t *buf, uint8_t chain, uint8_t length)
EXPORT eeprom_read_bytes
eeprom_read_bytes

buf= -0x14
length= -0xF
chain= -0xE
address= -0xD
i= -5

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x14
ADD             R7, SP, #0
STR             R1, [R7,#0x14+buf]
MOV             R1, R2
MOV             R2, R3
MOV             R3, R0
STRB            R3, [R7,#0x14+address]
MOV             R3, R1
STRB            R3, [R7,#0x14+chain]
MOV             R3, R2
STRB            R3, [R7,#0x14+length]
MOVS            R3, #0
STRB            R3, [R7,#0x14+i]
LDRB            R2, [R7,#0x14+address]
LDRB            R3, [R7,#0x14+length]
ADD             R3, R2
CMP.W           R3, #0x100
BGT             loc_1168A
MOVS            R3, #0
STRB            R3, [R7,#0x14+i]
B               loc_11680

loc_1165E
LDRB            R3, [R7,#0x14+i]
LDR             R2, [R7,#0x14+buf]
ADDS            R4, R2, R3
LDRB            R2, [R7,#0x14+address]
LDRB            R3, [R7,#0x14+i]
ADD             R3, R2
UXTB            R3, R3
LDRB            R2, [R7,#0x14+chain]
MOV             R1, R2  ; chain
MOV             R0, R3  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
STRB            R3, [R4]
LDRB            R3, [R7,#0x14+i]
ADDS            R3, #1
STRB            R3, [R7,#0x14+i]

loc_11680
LDRB            R2, [R7,#0x14+i]
LDRB            R3, [R7,#0x14+length]
CMP             R2, R3
BCC             loc_1165E
B               loc_1168C

loc_1168A
NOP

loc_1168C
ADDS            R7, #0x14
MOV             SP, R7
POP             {R4,R7,PC}
; End of function eeprom_read_bytes

ALIGN 4


; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_update_crc(uint8_t chain)
EXPORT eeprom_update_crc
eeprom_update_crc

chain= -9
crc= -6
buf= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x10+chain]
MOVS            R0, #0xFE ; size
BLX             malloc
MOV             R3, R0
STR             R3, [R7,#0x10+buf]
LDR             R3, [R7,#0x10+buf]
CMP             R3, #0
BNE             loc_116BE
MOV             R0, #aErrorAllocateM ; "error: allocate memory failed\n"
BLX             perror
MOVS            R3, #0
B               loc_11712

loc_116BE               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R2, [R7,#0x10+chain] ; chain
MOVS            R3, #0xFE ; length
LDR             R1, [R7,#0x10+buf] ; buf
MOVS            R0, #0  ; address
BL              eeprom_read_bytes
MOVS            R1, #0xFE ; w_len
LDR             R0, [R7,#0x10+buf] ; p_data
BL              CRC16
MOV             R3, R0
STRH            R3, [R7,#0x10+crc]
LDRB            R2, [R7,#0x10+chain] ; chain
ADD.W           R1, R7, #0x10+crc ; buf
MOVS            R3, #2  ; length
MOVS            R0, #0xFE ; address
BL              eeprom_write_bytes
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDR             R3, [R7,#0x10+buf]
CMP             R3, #0
BEQ             loc_11710
LDR             R0, [R7,#0x10+buf] ; ptr
BLX             free

loc_11710
MOVS            R3, #1

loc_11712
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_update_crc

ALIGN 4


; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_check_crc(uint8_t chain)
EXPORT eeprom_check_crc
eeprom_check_crc

chain= -9
_crc_= -8
crc= -6
buf= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x10+chain]
MOVS            R0, #0xFE ; size
BLX             malloc
MOV             R3, R0
STR             R3, [R7,#0x10+buf]
LDR             R3, [R7,#0x10+buf]
CMP             R3, #0
BNE             loc_11746
MOV             R0, #aErrorAllocateM ; "error: allocate memory failed\n"
BLX             perror
MOVS            R3, #0
B               loc_117A6

loc_11746               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R2, [R7,#0x10+chain] ; chain
MOVS            R3, #0xFE ; length
LDR             R1, [R7,#0x10+buf] ; buf
MOVS            R0, #0  ; address
BL              eeprom_read_bytes
MOVS            R1, #0xFE ; w_len
LDR             R0, [R7,#0x10+buf] ; p_data
BL              CRC16
MOV             R3, R0
STRH            R3, [R7,#0x10+crc]
LDRB            R2, [R7,#0x10+chain] ; chain
ADD.W           R1, R7, #0x10+_crc_ ; buf
MOVS            R3, #2  ; length
MOVS            R0, #0xFE ; address
BL              eeprom_read_bytes
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDR             R3, [R7,#0x10+buf]
CMP             R3, #0
BEQ             loc_11798
LDR             R0, [R7,#0x10+buf] ; ptr
BLX             free

loc_11798
LDRH            R3, [R7,#0x10+_crc_]
LDRH            R2, [R7,#0x10+crc]
CMP             R2, R3
BEQ             loc_117A4
MOVS            R3, #0
B               loc_117A6

loc_117A4
MOVS            R3, #1

loc_117A6
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_check_crc

ALIGN 0x10


; Attributes: bp-based frame fpd=8

; bool __cdecl eeprom_set_magic(uint8_t chain, uint8_t magic_num)
EXPORT eeprom_set_magic
eeprom_set_magic

magic_num= -2
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
MOV             R2, R1
STRB            R3, [R7,#8+chain]
MOV             R3, R2
STRB            R3, [R7,#8+magic_num]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_117E6
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_1181C

loc_117E6               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R2, [R7,#8+chain] ; chain
LDRB            R3, [R7,#8+magic_num]
MOV             R1, R3  ; data
MOVS            R0, #0  ; address
BL              eeprom_write_one_byte
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_1181C
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_set_magic



; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_get_magic(uint8_t chain, uint8_t *magic_num)
EXPORT eeprom_get_magic
eeprom_get_magic

magic_num= -0x10
chain= -9
ret= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x10+magic_num]
STRB            R3, [R7,#0x10+chain]
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11856
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_1188E

loc_11856               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3  ; chain
MOVS            R0, #0  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
STRB            R3, [R7,#0x10+ret]
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x10+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_1188E
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_get_magic

ALIGN 4


; Attributes: bp-based frame fpd=8

; void __cdecl write_eeprom_store_into_at24c02(eeprom_store_t *eeprom, uint8_t chain)
EXPORT write_eeprom_store_into_at24c02
write_eeprom_store_into_at24c02

chain= -5
eeprom= -4

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
STR             R0, [R7,#8+eeprom]
MOV             R3, R1
STRB            R3, [R7,#8+chain]
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDR             R3, [R7,#8+eeprom]
LDRB            R3, [R3]
LDRB            R2, [R7,#8+chain] ; chain
MOV             R1, R3  ; data
MOVS            R0, #0  ; address
BL              eeprom_write_one_byte
LDR             R3, [R7,#8+eeprom]
LDRB            R3, [R3,#1]
LDRB            R2, [R7,#8+chain] ; chain
MOV             R1, R3  ; data
MOVS            R0, #1  ; address
BL              eeprom_write_one_byte
LDR             R3, [R7,#8+eeprom]
ADDS            R1, R3, #2 ; buf
LDRB            R2, [R7,#8+chain] ; chain
MOVS            R3, #0x6C ; 'l' ; length
MOVS            R0, #2  ; address
BL              eeprom_write_bytes
LDR             R3, [R7,#8+eeprom]
ADD.W           R1, R3, #0x6E ; 'n' ; buf
LDRB            R2, [R7,#8+chain] ; chain
MOVS            R3, #4  ; length
MOVS            R0, #0x6E ; 'n' ; address
BL              eeprom_write_bytes
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
NOP
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function write_eeprom_store_into_at24c02

ALIGN 4


; Attributes: bp-based frame fpd=0x10

; eeprom_store_t *__cdecl read_eeprom_store_from_at24c02(eeprom_store_t *eeprom_store, uint8_t chain)
EXPORT read_eeprom_store_from_at24c02
read_eeprom_store_from_at24c02

chain= -0xD
eeprom_store= -0xC
eeprom= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
STR             R0, [R7,#0x10+eeprom_store]
MOV             R3, R1
STRB            R3, [R7,#0x10+chain]
LDR             R3, [R7,#0x10+eeprom_store]
STR             R3, [R7,#0x10+eeprom]
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3  ; chain
MOVS            R0, #0  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
MOV             R2, R3
LDR             R3, [R7,#0x10+eeprom]
STRB            R2, [R3]
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3  ; chain
MOVS            R0, #1  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
MOV             R2, R3
LDR             R3, [R7,#0x10+eeprom]
STRB            R2, [R3,#1]
LDR             R3, [R7,#0x10+eeprom]
ADDS            R1, R3, #2 ; buf
LDRB            R2, [R7,#0x10+chain] ; chain
MOVS            R3, #0x6C ; 'l' ; length
MOVS            R0, #2  ; address
BL              eeprom_read_bytes
LDR             R3, [R7,#0x10+eeprom]
ADD.W           R1, R3, #0x6E ; 'n' ; buf
LDRB            R2, [R7,#0x10+chain] ; chain
MOVS            R3, #4  ; length
MOVS            R0, #0x6E ; 'n' ; address
BL              eeprom_read_bytes
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDR             R3, [R7,#0x10+eeprom]
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function read_eeprom_store_from_at24c02



; Attributes: bp-based frame fpd=0x24

; bool __cdecl eeprom_set_freq(uint8_t chain, uint32_t *buf)
EXPORT eeprom_set_freq
eeprom_set_freq

buf= -0x24
chain= -0x1D
receive_buf= -0x18
send_buf= -0x14
i= -0x10
ret= -9
try_time= -8

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x24
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x24+buf]
STRB            R3, [R7,#0x24+chain]
MOVS            R3, #0
STR             R3, [R7,#0x24+try_time]
LDRB            R2, [R7,#0x24+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_119BA
LDRB            R3, [R7,#0x24+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11AB6

loc_119BA               ; size
MOVS            R0, #0x6C ; 'l'
BLX             malloc
MOV             R3, R0
STR             R3, [R7,#0x24+send_buf]
LDR             R3, [R7,#0x24+send_buf]
CMP             R3, #0
BNE             loc_119DA
MOV             R0, #aFetalErrorAllo ; "fetal error: allocate memory failed!\n"
BLX             perror
MOVS            R3, #0
B               loc_11AB6

loc_119DA               ; size
MOVS            R0, #0x6C ; 'l'
BLX             malloc
MOV             R3, R0
STR             R3, [R7,#0x24+receive_buf]
LDR             R3, [R7,#0x24+receive_buf]
CMP             R3, #0
BNE             loc_119FA
MOV             R0, #aFetalErrorAllo ; "fetal error: allocate memory failed!\n"
BLX             perror
MOVS            R3, #0
B               loc_11AB6

loc_119FA
MOVS            R3, #0
STR             R3, [R7,#0x24+i]
B               loc_11A1E

loc_11A00
LDR             R3, [R7,#0x24+i]
LDR             R2, [R7,#0x24+send_buf]
ADD             R3, R2
LDR             R2, [R7,#0x24+i]
LSLS            R2, R2, #2
LDR             R1, [R7,#0x24+buf]
ADD             R2, R1
LDR             R2, [R2]
UXTB            R2, R2
ADDS            R2, #0x38 ; '8'
UXTB            R2, R2
STRB            R2, [R3]
LDR             R3, [R7,#0x24+i]
ADDS            R3, #1
STR             R3, [R7,#0x24+i]

loc_11A1E
LDR             R3, [R7,#0x24+i]
CMP             R3, #0x6B ; 'k'
BLE             loc_11A00

loc_11A24               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R2, [R7,#0x24+chain] ; chain
MOVS            R3, #0x6C ; 'l' ; length
LDR             R1, [R7,#0x24+send_buf] ; buf
MOVS            R0, #2  ; address
BL              eeprom_write_bytes
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R2, [R7,#0x24+chain] ; chain
MOVS            R3, #0x6C ; 'l' ; length
LDR             R1, [R7,#0x24+receive_buf] ; buf
MOVS            R0, #2  ; address
BL              eeprom_read_bytes
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
MOVS            R2, #0x6C ; 'l' ; n
LDR             R1, [R7,#0x24+receive_buf] ; s2
LDR             R0, [R7,#0x24+buf] ; s1
BLX             memcmp
MOV             R3, R0
CMP             R3, #0
BNE             loc_11A72
MOVS            R3, #1
STRB            R3, [R7,#0x24+ret]
B               loc_11A86

loc_11A72
LDR             R3, [R7,#0x24+try_time]
CMP             R3, #2
BNE             loc_11A7E
MOVS            R3, #0
STRB            R3, [R7,#0x24+ret]
B               loc_11A86

loc_11A7E
LDR             R3, [R7,#0x24+try_time]
ADDS            R3, #1
STR             R3, [R7,#0x24+try_time]
B               loc_11A24

loc_11A86
LDR             R3, [R7,#0x24+receive_buf]
CMP             R3, #0
BEQ             loc_11A92
LDR             R0, [R7,#0x24+receive_buf] ; ptr
BLX             free

loc_11A92
LDR             R3, [R7,#0x24+send_buf]
CMP             R3, #0
BEQ             loc_11A9E
LDR             R0, [R7,#0x24+send_buf] ; ptr
BLX             free

loc_11A9E
LDRB            R4, [R7,#0x24+ret]
LDRB            R3, [R7,#0x24+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0
ANDS            R3, R4
CMP             R3, #0
ITE NE
MOVNE           R3, #1
MOVEQ           R3, #0
UXTB            R3, R3

loc_11AB6
MOV             R0, R3
ADDS            R7, #0x24 ; '$'
MOV             SP, R7
POP             {R4,R7,PC}
; End of function eeprom_set_freq

ALIGN 0x10


; Attributes: bp-based frame fpd=0x14

; bool __cdecl eeprom_get_freq(uint8_t chain, uint32_t *buf)
EXPORT eeprom_get_freq
eeprom_get_freq

buf= -0x14
chain= -0xD
i= -8

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x14
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x14+buf]
STRB            R3, [R7,#0x14+chain]
LDRB            R2, [R7,#0x14+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11AF2
LDRB            R3, [R7,#0x14+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11B4E

loc_11AF2               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOVS            R3, #0
STR             R3, [R7,#0x14+i]
B               loc_11B32

loc_11B0C
LDR             R3, [R7,#0x14+i]
LSLS            R3, R3, #2
LDR             R2, [R7,#0x14+buf]
ADDS            R4, R2, R3
LDR             R3, [R7,#0x14+i]
UXTB            R3, R3
ADDS            R3, #2
UXTB            R3, R3
LDRB            R2, [R7,#0x14+chain]
MOV             R1, R2  ; chain
MOV             R0, R3  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
ADDS            R3, #0xC8
STR             R3, [R4]
LDR             R3, [R7,#0x14+i]
ADDS            R3, #1
STR             R3, [R7,#0x14+i]

loc_11B32
LDR             R3, [R7,#0x14+i]
CMP             R3, #0x6B ; 'k'
BLE             loc_11B0C
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x14+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_11B4E
MOV             R0, R3
ADDS            R7, #0x14
MOV             SP, R7
POP             {R4,R7,PC}
; End of function eeprom_get_freq

ALIGN 4


; Attributes: bp-based frame fpd=8

; bool __cdecl eeprom_set_freq_one_chain(uint8_t chain, uint8_t *buf, uint8_t buf_len)
EXPORT eeprom_set_freq_one_chain
eeprom_set_freq_one_chain

buf= -8
buf_len= -2
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#8+buf]
STRB            R3, [R7,#8+chain]
MOV             R3, R2
STRB            R3, [R7,#8+buf_len]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11B8E
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11BD0

loc_11B8E               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R3, [R7,#8+chain]
MOV             R2, R3  ; chain
MOVS            R1, #0x7D ; '}' ; data
MOVS            R0, #0  ; address
BL              eeprom_write_one_byte
LDRB            R3, [R7,#8+buf_len] ; length
LDRB            R2, [R7,#8+chain] ; chain
LDR             R1, [R7,#8+buf] ; buf
MOVS            R0, #2  ; address
BL              eeprom_write_bytes
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_11BD0
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_set_freq_one_chain



; Attributes: bp-based frame fpd=8

; bool __cdecl eeprom_get_freq_one_chain(uint8_t chain, uint8_t *buf, uint8_t buf_len)
EXPORT eeprom_get_freq_one_chain
eeprom_get_freq_one_chain

buf= -8
buf_len= -2
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#8+buf]
STRB            R3, [R7,#8+chain]
MOV             R3, R2
STRB            R3, [R7,#8+buf_len]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11C0E
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11C44

loc_11C0E               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R3, [R7,#8+buf_len] ; length
LDRB            R2, [R7,#8+chain] ; chain
LDR             R1, [R7,#8+buf] ; buf
MOVS            R0, #2  ; address
BL              eeprom_read_bytes
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_11C44
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_get_freq_one_chain



; Attributes: bp-based frame fpd=0x18

; bool __cdecl eeprom_set_voltage(uint8_t chain, double voltage)
EXPORT eeprom_set_voltage
eeprom_set_voltage

voltage= -0x18
var_10= -0x10
chain= -9
vol= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #0
MOV             R3, R0
VSTR            D0, [R7,#0x18+voltage]
STRB            R3, [R7,#0x18+chain]
LDRB            R2, [R7,#0x18+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11C80
LDRB            R3, [R7,#0x18+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11CDE

loc_11C80
VLDR            D7, [R7,#0x18+voltage]
VLDR            D6, =100.0
VMUL.F64        D6, D7, D6
VMOV.F64        D5, #5.0
VDIV.F64        D7, D6, D5
VLDR            D6, =200.0
VSUB.F64        D7, D7, D6
VCVT.U32.F64    S15, D7
VSTR            S15, [R7,#0x18+var_10]
LDRB            R3, [R7,#0x18+var_10]
STRB            R3, [R7,#0x18+vol]
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R2, [R7,#0x18+chain] ; chain
LDRB            R3, [R7,#0x18+vol]
MOV             R1, R3  ; data
MOVS            R0, #1  ; address
BL              eeprom_write_one_byte
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x18+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_11CDE
MOV             R0, R3
ADDS            R7, #0x18
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_set_voltage

ALIGN 4
dbl_11CE8 DCFD 100.0
dbl_11CF0 DCFD 200.0


; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_get_voltage(uint8_t chain, double *voltage)
EXPORT eeprom_get_voltage
eeprom_get_voltage

voltage= -0x10
chain= -9
vol= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x10+voltage]
STRB            R3, [R7,#0x10+chain]
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11D2A
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11D84

loc_11D2A               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3  ; chain
MOVS            R0, #1  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
STR             R3, [R7,#0x10+vol]
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDR             R3, [R7,#0x10+vol]
ADDS            R3, #0xC8
VMOV            S15, R3
VCVT.F64.U32    D7, S15
VMOV.F64        D6, #5.0
VMUL.F64        D6, D7, D6
VLDR            D5, =100.0
VDIV.F64        D7, D6, D5
LDR             R3, [R7,#0x10+voltage]
VSTR            D7, [R3]
LDRB            R3, [R7,#0x10+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_11D84
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_get_voltage

ALIGN 0x10
dbl_11D90 DCFD 100.0


; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_set_hashrate(uint8_t chain, uint32_t hash)
EXPORT eeprom_set_hashrate
eeprom_set_hashrate

hash= -0x10
chain= -9
hash_rate= -8
i= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x10+hash]
STRB            R3, [R7,#0x10+chain]
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11DCA
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11E3E

loc_11DCA
LDR             R3, [R7,#0x10+hash]
UXTB            R3, R3
STRB            R3, [R7,#0x10+hash_rate]
LDR             R3, [R7,#0x10+hash]
LSRS            R3, R3, #8
UXTB            R3, R3
STRB            R3, [R7,#0x10+hash_rate+1]
LDR             R3, [R7,#0x10+hash]
LSRS            R3, R3, #0x10
UXTB            R3, R3
STRB            R3, [R7,#0x10+hash_rate+2]
LDR             R3, [R7,#0x10+hash]
LSRS            R3, R3, #0x18
UXTB            R3, R3
STRB            R3, [R7,#0x10+hash_rate+3]
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOVS            R3, #0
STR             R3, [R7,#0x10+i]
B               loc_11E22

loc_11E02
LDR             R3, [R7,#0x10+i]
UXTB            R3, R3
ADDS            R3, #0x6E ; 'n'
UXTB            R0, R3  ; address
ADD.W           R2, R7, #0x10+hash_rate
LDR             R3, [R7,#0x10+i]
ADD             R3, R2
LDRB            R3, [R3]
LDRB            R2, [R7,#0x10+chain] ; chain
MOV             R1, R3  ; data
BL              eeprom_write_one_byte
LDR             R3, [R7,#0x10+i]
ADDS            R3, #1
STR             R3, [R7,#0x10+i]

loc_11E22
LDR             R3, [R7,#0x10+i]
CMP             R3, #3
BLS             loc_11E02
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x10+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_11E3E
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_set_hashrate

ALIGN 4


; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_get_hashrate(uint8_t chain, uint32_t *hash)
EXPORT eeprom_get_hashrate
eeprom_get_hashrate

hash= -0x10
chain= -9
hash_rate= -8
i= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x10+hash]
STRB            R3, [R7,#0x10+chain]
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11E7A
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_11EF2

loc_11E7A               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOVS            R3, #0
STR             R3, [R7,#0x10+i]
B               loc_11EBC

loc_11E94
LDR             R3, [R7,#0x10+i]
UXTB            R3, R3
ADDS            R3, #0x6E ; 'n'
UXTB            R3, R3
LDRB            R2, [R7,#0x10+chain]
MOV             R1, R2  ; chain
MOV             R0, R3  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
MOV             R1, R3
ADD.W           R2, R7, #0x10+hash_rate
LDR             R3, [R7,#0x10+i]
ADD             R3, R2
MOV             R2, R1
STRB            R2, [R3]
LDR             R3, [R7,#0x10+i]
ADDS            R3, #1
STR             R3, [R7,#0x10+i]

loc_11EBC
LDR             R3, [R7,#0x10+i]
CMP             R3, #3
BLS             loc_11E94
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x10+hash_rate]
MOV             R2, R3
LDRB            R3, [R7,#0x10+hash_rate+1]
LSLS            R3, R3, #8
ADD             R2, R3
LDRB            R3, [R7,#0x10+hash_rate+2]
LSLS            R3, R3, #0x10
ADD             R2, R3
LDRB            R3, [R7,#0x10+hash_rate+3]
LSLS            R3, R3, #0x18
ADD             R2, R3
LDR             R3, [R7,#0x10+hash]
STR             R2, [R3]
LDRB            R3, [R7,#0x10+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_11EF2
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_get_hashrate

ALIGN 4


; Attributes: bp-based frame fpd=0x10

; void __cdecl convert_freq_array(uint8_t *chain_freq, uint16_t (*array)[9])
EXPORT convert_freq_array
convert_freq_array

array= -0x10
chain_freq= -0xC
i= -8
j= -4

PUSH            {R4,R7}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
STR             R0, [R7,#0x10+chain_freq]
STR             R1, [R7,#0x10+array]
MOVS            R3, #0
STR             R3, [R7,#0x10+j]
B               loc_11F66

loc_11F0C
MOVS            R3, #0
STR             R3, [R7,#0x10+i]
B               loc_11F5A

loc_11F12
LDR             R3, [R7,#0x10+j]
MOVS            R2, #0x6C ; 'l'
MUL             R2, R2, R3
MOV             R3, #0x2AAAAAAB
SMULL           R3, R4, R2, R3
ASRS            R1, R4, #1
ASRS            R3, R2, #0x1F
SUBS            R3, R1, R3
MOV             R2, R3
LDR             R3, [R7,#0x10+i]
ADD             R3, R2
LDR             R2, [R7,#0x10+chain_freq]
ADDS            R1, R2, R3
LDR             R2, [R7,#0x10+j]
MOV             R3, R2
LSLS            R3, R3, #3
ADD             R3, R2
LSLS            R3, R3, #1
MOV             R2, R3
LDR             R3, [R7,#0x10+array]
ADD             R3, R2
LDR             R2, [R7,#0x10+i]
LDRH.W          R3, [R3,R2,LSL#1]
UXTB            R3, R3
ADDS            R3, #0x38 ; '8'
UXTB            R3, R3
STRB            R3, [R1]
LDR             R3, [R7,#0x10+i]
ADDS            R3, #1
STR             R3, [R7,#0x10+i]

loc_11F5A
LDR             R3, [R7,#0x10+i]
CMP             R3, #8
BLE             loc_11F12
LDR             R3, [R7,#0x10+j]
ADDS            R3, #1
STR             R3, [R7,#0x10+j]

loc_11F66
LDR             R3, [R7,#0x10+j]
CMP             R3, #0xB
BLE             loc_11F0C
NOP
ADDS            R7, #0x10
MOV             SP, R7
POP             {R4,R7}
BX              LR
; End of function convert_freq_array

ALIGN 4


; Attributes: bp-based frame fpd=0x18

; void __cdecl travel_eeprom_store(uint8_t chain)
EXPORT travel_eeprom_store
travel_eeprom_store

chain= -0x11
hast_rate= -0x10
eeprom= -0xC
k= -8
l= -4

PUSH            {R4,R5,R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x18+chain]
LDRB            R2, [R7,#0x18+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_11FA6
LDRB            R3, [R7,#0x18+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
B               loc_12108

loc_11FA6               ; size
MOVS            R0, #0x72 ; 'r'
BLX             malloc
MOV             R3, R0
STR             R3, [R7,#0x18+eeprom]
LDR             R3, [R7,#0x18+eeprom]
CMP             R3, #0
BNE             loc_11FC8
MOV             R0, #aFetalErrorFail ; "fetal error: failed to allocate memory "...
BLX             puts
MOVS            R3, #0
STR             R3, [R7,#0x18+eeprom]
B               loc_12108

loc_11FC8               ; n
MOVS            R2, #0x72 ; 'r'
MOVS            R1, #0  ; c
LDR             R0, [R7,#0x18+eeprom] ; s
BLX             memset
LDRB            R3, [R7,#0x18+chain]
MOV             R1, R3  ; chain
LDR             R0, [R7,#0x18+eeprom] ; eeprom_store
BL              read_eeprom_store_from_at24c02
STR             R0, [R7,#0x18+eeprom]
LDRB            R3, [R7,#0x18+chain]
MOV             R1, R3
MOV             R0, #aChainDDataInEe ; "chain[%d] data in eeprom is:\n"
BLX             printf
LDR             R3, [R7,#0x18+eeprom]
LDRB            R3, [R3]
MOV             R1, R3
MOV             R0, #aMagicNumber0x0 ; "magic number: 0x%02x\n"
BLX             printf
MOV             R0, #aFreqDataPerAsi ; "freq data per ASIC:"
BLX             puts
MOVS            R3, #0
STR             R3, [R7,#0x18+l]
B               loc_12088

loc_12012
MOVS            R3, #0
STR             R3, [R7,#0x18+k]
B               loc_12076

loc_12018
LDR             R3, [R7,#0x18+l]
MOVS            R2, #0x6C ; 'l'
MUL             R2, R2, R3
MOV             R3, #0x2AAAAAAB
SMULL           R3, R4, R2, R3
ASRS            R1, R4, #1
ASRS            R3, R2, #0x1F
SUBS            R2, R1, R3
LDR             R3, [R7,#0x18+k]
ADDS            R5, R2, R3
LDR             R3, [R7,#0x18+eeprom]
ADDS            R1, R3, #2
LDR             R3, [R7,#0x18+l]
MOVS            R2, #0x6C ; 'l'
MUL             R2, R2, R3
MOV             R3, #0x2AAAAAAB
SMULL           R3, R4, R2, R3
ASRS            R0, R4, #1
ASRS            R3, R2, #0x1F
SUBS            R3, R0, R3
MOV             R2, R3
LDR             R3, [R7,#0x18+k]
ADD             R3, R2
ADD             R3, R1
LDRB            R3, [R3]
ADDS            R3, #0xC8
MOV             R2, R3
MOV             R1, R5
MOV             R0, #aIc03dD ; "IC[%03d]:%d "
BLX             printf
LDR             R3, [R7,#0x18+k]
ADDS            R3, #1
STR             R3, [R7,#0x18+k]

loc_12076
LDR             R3, [R7,#0x18+k]
CMP             R3, #8
BLE             loc_12018
MOVS            R0, #0xA ; c
BLX             putchar
LDR             R3, [R7,#0x18+l]
ADDS            R3, #1
STR             R3, [R7,#0x18+l]

loc_12088
LDR             R3, [R7,#0x18+l]
CMP             R3, #0xB
BLE             loc_12012
LDR             R3, [R7,#0x18+eeprom]
LDRB            R3, [R3,#1]
MOV             R2, R3
MOV             R3, R2
LSLS            R3, R3, #2
ADD             R3, R2
ADD.W           R3, R3, #0x3E8
VMOV            S15, R3
VCVT.F32.U32    S14, S15
VLDR            S13, =100.0
VDIV.F32        S15, S14, S13
VCVT.F64.F32    D7, S15
VMOV            R2, R3, D7
MOV             R0, #aVoltage02fV ; "voltage: %.02f V\n"
BLX             printf
LDR             R3, [R7,#0x18+eeprom]
LDRB.W          R3, [R3,#0x6E]
MOV             R2, R3
LDR             R3, [R7,#0x18+eeprom]
LDRB.W          R3, [R3,#0x6F]
LSLS            R3, R3, #8
ADD             R2, R3
LDR             R3, [R7,#0x18+eeprom]
LDRB.W          R3, [R3,#0x70]
LSLS            R3, R3, #0x10
ADD             R2, R3
LDR             R3, [R7,#0x18+eeprom]
LDRB.W          R3, [R3,#0x71]
LSLS            R3, R3, #0x18
ADD             R3, R2
STR             R3, [R7,#0x18+hast_rate]
LDR             R1, [R7,#0x18+hast_rate]
MOV             R0, #aHashRate05dGhS ; "hash rate: %05d GH/s\n"
BLX             printf
LDR             R3, [R7,#0x18+eeprom]
CMP             R3, #0
BEQ             loc_12108
LDR             R0, [R7,#0x18+eeprom] ; ptr
BLX             free
MOVS            R3, #0
STR             R3, [R7,#0x18+eeprom]

loc_12108
ADDS            R7, #0x18
MOV             SP, R7
POP             {R4,R5,R7,PC}
; End of function travel_eeprom_store

ALIGN 0x10
flt_12110 DCFS 100.0


; Attributes: bp-based frame fpd=0xDB0

; bool __cdecl eeprom_store_init(char *path, eeprom_store_t **eeprom)
EXPORT eeprom_store_init
eeprom_store_init

eeprom= -0xDB0
path= -0xDAC
freq= -0xDA8
msg= -0x28
i= -8
ret= -1

PUSH            {R7,LR}
SUB.W           SP, SP, #0xDB0
ADD             R7, SP, #0
ADDS            R3, R7, #0xDB0+path
STR             R0, [R3]
MOV             R3, R7
STR             R1, [R3]
ADDS            R3, R7, #0xDB0+path
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_12146
ADD.W           R3, R7, #0xDB0+freq
MOV             R1, R3  ; freq_data
MOV             R0, #eeprom_conf_file ; conf_file_path
BL              scan_eeprom_config_file
MOV             R3, R0
STRB.W          R3, [R7,#0xDB0+ret]
B               loc_1215A

loc_12146
ADD.W           R2, R7, #0xDB0+freq
ADDS            R3, R7, #0xDB0+path
MOV             R1, R2  ; freq_data
LDR             R0, [R3] ; conf_file_path
BL              scan_eeprom_config_file
MOV             R3, R0
STRB.W          R3, [R7,#0xDB0+ret]

loc_1215A
LDRB.W          R3, [R7,#0xDB0+ret]
EOR.W           R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
BEQ             loc_1216C
MOVS            R3, #0
B               loc_12250

loc_1216C
MOVS            R3, #0
STR.W           R3, [R7,#0xDB0+i]
B               loc_12244

loc_12174
MOV             R3, #chain_list
LDR.W           R2, [R7,#0xDB0+i]
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_1223A
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOVS            R2, #0x72 ; 'r' ; n
MOVS            R1, #0  ; c
MOV             R0, R3  ; s
BLX             memset
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
ADDS            R0, R3, #2 ; chain_freq
ADD.W           R2, R7, #0xDB0+freq
LDR.W           R3, [R7,#0xDB0+i]
MOVS            R1, #0xD8
MUL             R3, R1, R3
ADD             R3, R2
MOV             R1, R3  ; array
BL              convert_freq_array
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOVS            R2, #0x7D ; '}'
STRB            R2, [R3]
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOVS            R2, #0xA5
STRB            R2, [R3,#1]
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOVS            R2, #0x44 ; 'D'
STRB.W          R2, [R3,#0x6E]
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOVS            R2, #0x48 ; 'H'
STRB.W          R2, [R3,#0x6F]
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOVS            R2, #0
STRB.W          R2, [R3,#0x70]
LDR.W           R3, [R7,#0xDB0+i]
LSLS            R3, R3, #2
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
LDR             R3, [R3]
MOVS            R2, #0
STRB.W          R2, [R3,#0x71]

loc_1223A
LDR.W           R3, [R7,#0xDB0+i]
ADDS            R3, #1
STR.W           R3, [R7,#0xDB0+i]

loc_12244
LDR.W           R3, [R7,#0xDB0+i]
CMP             R3, #0xF
BLE             loc_12174
LDRB.W          R3, [R7,#0xDB0+ret]

loc_12250
MOV             R0, R3
ADD.W           R7, R7, #0xDB0
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_store_init

ALIGN 4


; Attributes: bp-based frame fpd=0x60

; bool __cdecl eeprom_init(char *path)
EXPORT eeprom_init
eeprom_init

path= -0x5C
eeprom= -0x54
ret= -0x11
i_2= -0x10
i_1= -0xC
i_0= -8
i= -4
var_s0=  0

PUSH            {R7,LR}
SUB             SP, SP, #0x60
ADD             R7, SP, #0
STR             R0, [R7,#0x60+path]
MOVS            R3, #0
STR             R3, [R7,#0x60+i]
B               loc_122BA

loc_1226A               ; size
MOVS            R0, #0x72 ; 'r'
BLX             malloc
MOV             R3, R0
MOV             R2, R3
LDR             R3, [R7,#0x60+i]
LSLS            R3, R3, #2
ADD.W           R1, R7, #0x60+var_s0
ADD             R3, R1
STR.W           R2, [R3,#-0x54]
LDR             R3, [R7,#0x60+i]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x60+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0x54]
CMP             R3, #0
BNE             loc_122B4
MOV             R0, #aFailedToAlloca ; "failed to allocate memory for eeprom"
BLX             perror
LDR             R3, [R7,#0x60+i]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x60+var_s0
ADD             R3, R2
MOVS            R2, #0
STR.W           R2, [R3,#-0x54]
MOVS            R3, #0
B               loc_123AA

loc_122B4
LDR             R3, [R7,#0x60+i]
ADDS            R3, #1
STR             R3, [R7,#0x60+i]

loc_122BA
LDR             R3, [R7,#0x60+i]
CMP             R3, #0xF
BLE             loc_1226A
ADD.W           R3, R7, #0x60+eeprom
MOV             R1, R3  ; eeprom
LDR             R0, [R7,#0x60+path] ; path
BL              eeprom_store_init
MOV             R3, R0
STRB.W          R3, [R7,#0x60+ret]
LDRB.W          R3, [R7,#0x60+ret]
EOR.W           R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
BEQ             loc_122EE
MOV             R0, #aFailedToInitia ; "failed to initialize eeprom"
BLX             puts
B               fail_init

loc_122EE
MOVS            R3, #0
STR             R3, [R7,#0x60+i_0]
B               loc_12326

loc_122F4
MOV             R3, #chain_list
LDR             R2, [R7,#0x60+i_0]
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_12320
LDR             R3, [R7,#0x60+i_0]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x60+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0x54]
LDR             R2, [R7,#0x60+i_0]
UXTB            R2, R2
MOV             R1, R2  ; chain
MOV             R0, R3  ; eeprom
BL              write_eeprom_store_into_at24c02

loc_12320
LDR             R3, [R7,#0x60+i_0]
ADDS            R3, #1
STR             R3, [R7,#0x60+i_0]

loc_12326
LDR             R3, [R7,#0x60+i_0]
CMP             R3, #0xF
BLE             loc_122F4
MOVS            R3, #0
STR             R3, [R7,#0x60+i_1]
B               loc_12356

loc_12332
LDR             R3, [R7,#0x60+i_1]
UXTB            R3, R3
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0
STRB.W          R3, [R7,#0x60+ret]
LDRB.W          R3, [R7,#0x60+ret]
EOR.W           R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
BNE             loc_1235E
LDR             R3, [R7,#0x60+i_1]
ADDS            R3, #1
STR             R3, [R7,#0x60+i_1]

loc_12356
LDR             R3, [R7,#0x60+i_1]
CMP             R3, #0xF
BLE             loc_12332
B               fail_init

loc_1235E
NOP

fail_init
MOVS            R3, #0
STR             R3, [R7,#0x60+i_2]
B               loc_123A2

loc_12366
LDR             R3, [R7,#0x60+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x60+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0x54]
CMP             R3, #0
BEQ             loc_1239C
LDR             R3, [R7,#0x60+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x60+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0x54]
MOV             R0, R3  ; ptr
BLX             free
LDR             R3, [R7,#0x60+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x60+var_s0
ADD             R3, R2
MOVS            R2, #0
STR.W           R2, [R3,#-0x54]

loc_1239C
LDR             R3, [R7,#0x60+i_2]
ADDS            R3, #1
STR             R3, [R7,#0x60+i_2]

loc_123A2
LDR             R3, [R7,#0x60+i_2]
CMP             R3, #0xF
BLE             loc_12366
MOVS            R3, #1

loc_123AA
MOV             R0, R3
ADDS            R7, #0x60 ; '`'
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_init

ALIGN 4


; Attributes: bp-based frame fpd=0x1C

; void __cdecl eeprom_dump(uint8_t chain)
EXPORT _eeprom_dump
_eeprom_dump

chain= -0x15
temp= -0x10
i_0= -0xC
i= -8

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x1C
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x1C+chain]
MOV.W           R0, #0x100 ; size
BLX             malloc
MOV             R3, R0
STR             R3, [R7,#0x1C+temp]
LDR             R3, [R7,#0x1C+temp]
CMP             R3, #0
BNE             loc_123DE
MOV             R0, #aAllocatMemoryF ; "allocat memory failed"
BLX             perror
B               loc_124A8

loc_123DE               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVS            R3, #0
STR             R3, [R7,#0x1C+i]
B               loc_1240E

loc_123F0
LDR             R3, [R7,#0x1C+i]
LDR             R2, [R7,#0x1C+temp]
ADDS            R4, R2, R3
LDR             R3, [R7,#0x1C+i]
UXTB            R3, R3
LDRB            R2, [R7,#0x1C+chain]
MOV             R1, R2  ; chain
MOV             R0, R3  ; address
BL              eeprom_read_one_byte
MOV             R3, R0
STRB            R3, [R4]
LDR             R3, [R7,#0x1C+i]
ADDS            R3, #1
STR             R3, [R7,#0x1C+i]

loc_1240E
LDR             R3, [R7,#0x1C+i]
CMP             R3, #0xFF
BLE             loc_123F0
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x1C+chain]
MOV             R1, R3
MOV             R0, #aEepromDataInCh ; "eeprom data in chain[%d]:\n"
BLX             printf
MOV             R0, #aOffset00010203 ; "offset: 00 01 02 03 04 05 06 07 08 09 0"...
BLX             puts
MOVS            R3, #0
STR             R3, [R7,#0x1C+i_0]
B               loc_12490

loc_1244A
LDR             R3, [R7,#0x1C+i_0]
AND.W           R3, R3, #0xF
CMP             R3, #0
BNE             loc_12462
LDR             R1, [R7,#0x1C+i_0]
MOV             R0, #a06x ; "%06x: "
BLX             printf

loc_12462
LDR             R3, [R7,#0x1C+i_0]
LDR             R2, [R7,#0x1C+temp]
ADD             R3, R2
LDRB            R3, [R3]
MOV             R1, R3
MOV             R0, #a02x ; "%02x "
BLX             printf
LDR             R3, [R7,#0x1C+i_0]
ADDS            R3, #1
AND.W           R3, R3, #0xF
CMP             R3, #0
BNE             loc_1248A
MOVS            R0, #0xA ; c
BLX             putchar

loc_1248A
LDR             R3, [R7,#0x1C+i_0]
ADDS            R3, #1
STR             R3, [R7,#0x1C+i_0]

loc_12490
LDR             R3, [R7,#0x1C+i_0]
CMP             R3, #0xFF
BLE             loc_1244A
LDR             R3, [R7,#0x1C+temp]
CMP             R3, #0
BEQ             loc_124A2
LDR             R0, [R7,#0x1C+temp] ; ptr
BLX             free

loc_124A2               ; c
MOVS            R0, #0xA
BLX             putchar

loc_124A8
ADDS            R7, #0x1C
MOV             SP, R7
POP             {R4,R7,PC}
; End of function _eeprom_dump

ALIGN 0x10


; Attributes: bp-based frame fpd=8

; void __cdecl eeprom_dump_raw(uint8_t chain)
EXPORT eeprom_dump_raw
eeprom_dump_raw

chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#8+chain]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_124D4
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              _eeprom_dump

loc_124D4
NOP
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_dump_raw



; Attributes: bp-based frame fpd=0x20

; void __cdecl eeprom_dump(uint8_t chain)
EXPORT eeprom_dump
eeprom_dump

chain= -0x19
bom= -0x12
pcb= -0x11
buf= -0x10
len= -8
i= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x20
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x20+chain]
LDRB            R2, [R7,#0x20+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_12584
LDRB            R3, [R7,#0x20+chain]
MOV             R0, R3  ; chain
BL              travel_eeprom_store
ADD.W           R2, R7, #0x20+len ; len
ADD.W           R1, R7, #0x20+buf ; buf
LDRB            R3, [R7,#0x20+chain]
MOV             R0, R3  ; chain
BL              eeprom_get_inbalance_info
MOV             R0, #aInbalanceAsicI ; "inbalance ASIC info: "
BLX             printf
LDR             R3, [R7,#0x20+len]
CMP             R3, #6
BHI             loc_1254E
MOVS            R3, #0
STR             R3, [R7,#0x20+i]
B               loc_12546

loc_12528
ADD.W           R2, R7, #0x20+buf
LDR             R3, [R7,#0x20+i]
ADD             R3, R2
LDRB            R3, [R3]
MOV             R1, R3
MOV             R0, #aIc03d ; "IC[%03d] "
BLX             printf
LDR             R3, [R7,#0x20+i]
ADDS            R3, #1
STR             R3, [R7,#0x20+i]

loc_12546
LDR             R2, [R7,#0x20+i]
LDR             R3, [R7,#0x20+len]
CMP             R2, R3
BCC             loc_12528

loc_1254E               ; c
MOVS            R0, #0xA
BLX             putchar
ADD.W           R2, R7, #0x20+pcb
LDRB            R3, [R7,#0x20+chain]
MOV             R1, R2  ; pcb_version
MOV             R0, R3  ; chain
BL              eeprom_get_pcb_version
ADD.W           R2, R7, #0x20+bom
LDRB            R3, [R7,#0x20+chain]
MOV             R1, R2  ; bom_version
MOV             R0, R3  ; chain
BL              eeprom_get_bom_version
LDRB            R3, [R7,#0x20+pcb]
MOV             R1, R3
LDRB            R3, [R7,#0x20+bom]
MOV             R2, R3
MOV             R0, #aPcbVer0x02xBom ; "PCB_Ver:0x%02x  BOM_Ver:0x%02x\n"
BLX             printf

loc_12584
NOP
ADDS            R7, #0x20 ; ' '
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_dump



; Attributes: bp-based frame fpd=0x10

; void __cdecl eeprom_erase(uint8_t chain)
EXPORT eeprom_erase
eeprom_erase

chain= -9
i= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x10+chain]
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_125BA
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
B               loc_125FA

loc_125BA               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
MOVS            R3, #0
STR             R3, [R7,#0x10+i]
B               loc_125E0

loc_125CC
LDR             R3, [R7,#0x10+i]
UXTB            R3, R3
LDRB            R2, [R7,#0x10+chain] ; chain
MOVS            R1, #0  ; data
MOV             R0, R3  ; address
BL              eeprom_write_one_byte
LDR             R3, [R7,#0x10+i]
ADDS            R3, #1
STR             R3, [R7,#0x10+i]

loc_125E0
LDR             R3, [R7,#0x10+i]
CMP             R3, #0xFF
BLE             loc_125CC
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock

loc_125FA
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_erase



; Attributes: bp-based frame fpd=8

; void eeprom_erase_all()
EXPORT eeprom_erase_all
eeprom_erase_all

j= -8
i= -4

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_lock
MOVS            R3, #0
STR             R3, [R7,#8+i]
B               loc_12652

loc_12618
MOV             R3, #chain_list
LDR             R2, [R7,#8+i]
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_1264C
MOVS            R3, #0
STR             R3, [R7,#8+j]
B               loc_12646

loc_12630
LDR             R3, [R7,#8+j]
UXTB            R3, R3
LDR             R2, [R7,#8+i]
UXTB            R2, R2  ; chain
MOVS            R1, #0  ; data
MOV             R0, R3  ; address
BL              eeprom_write_one_byte
LDR             R3, [R7,#8+j]
ADDS            R3, #1
STR             R3, [R7,#8+j]

loc_12646
LDR             R3, [R7,#8+j]
CMP             R3, #0xFF
BLE             loc_12630

loc_1264C
LDR             R3, [R7,#8+i]
ADDS            R3, #1
STR             R3, [R7,#8+i]

loc_12652
LDR             R3, [R7,#8+i]
CMP             R3, #0xF
BLE             loc_12618
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
NOP
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_erase_all



; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_write(uint8_t chain, uint32_t addr, uint8_t *buf, uint32_t len)
EXPORT eeprom_write
eeprom_write

len= -0x10
buf= -0xC
addr= -8
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
STR             R1, [R7,#0x10+addr]
STR             R2, [R7,#0x10+buf]
STR             R3, [R7,#0x10+len]
MOV             R3, R0
STRB            R3, [R7,#0x10+chain]
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_126AA
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_126E4

loc_126AA               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDR             R3, [R7,#0x10+addr]
UXTB            R0, R3  ; address
LDR             R3, [R7,#0x10+len]
UXTB            R3, R3  ; length
LDRB            R2, [R7,#0x10+chain] ; chain
LDR             R1, [R7,#0x10+buf] ; buf
BL              eeprom_write_bytes
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x10+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_126E4
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_write



; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_read(uint8_t chain, uint32_t addr, uint8_t *buf, uint32_t len)
EXPORT eeprom_read
eeprom_read

len= -0x10
buf= -0xC
addr= -8
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
STR             R1, [R7,#0x10+addr]
STR             R2, [R7,#0x10+buf]
STR             R3, [R7,#0x10+len]
MOV             R3, R0
STRB            R3, [R7,#0x10+chain]
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_12722
LDRB            R3, [R7,#0x10+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_0 ; "chain[%d] does not exist!\n"
BLX             printf
MOVS            R3, #0
B               loc_1275C

loc_12722               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDR             R3, [R7,#0x10+addr]
UXTB            R0, R3  ; address
LDR             R3, [R7,#0x10+len]
UXTB            R3, R3  ; length
LDRB            R2, [R7,#0x10+chain] ; chain
LDR             R1, [R7,#0x10+buf] ; buf
BL              eeprom_read_bytes
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x10+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_1275C
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_read



; Attributes: bp-based frame fpd=0x10

; bool __cdecl eeprom_set_inbalance_info(uint8_t chain, uint8_t *buf, uint32_t len)
EXPORT eeprom_set_inbalance_info
eeprom_set_inbalance_info

len= -0xC
buf= -8
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x10+buf]
STR             R2, [R7,#0x10+len]
STRB            R3, [R7,#0x10+chain]
LDR             R3, [R7,#0x10+len]
CMP             R3, #6
BLS             loc_1278A
MOVS            R1, #6
MOV             R0, #aErrorInbalance ; "error: inbalance data are more than %d"...
BLX             printf
MOVS            R3, #0
B               loc_127E2

loc_1278A               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R2, [R7,#0x10+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_127C4
LDR             R3, [R7,#0x10+len]
UXTB            R3, R3
LDRB            R2, [R7,#0x10+chain] ; chain
MOV             R1, R3  ; data
MOVS            R0, #0x72 ; 'r' ; address
BL              eeprom_write_one_byte
LDR             R3, [R7,#0x10+len]
UXTB            R3, R3  ; length
LDRB            R2, [R7,#0x10+chain] ; chain
LDR             R1, [R7,#0x10+buf] ; buf
MOVS            R0, #0x73 ; 's' ; address
BL              eeprom_write_bytes

loc_127C4               ; useconds
MOVW            R0, #0x2710
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x10+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_127E2
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_set_inbalance_info

ALIGN 4


; Attributes: bp-based frame fpd=0x18

; bool __cdecl eeprom_get_inbalance_info(uint8_t chain, uint8_t *buf, uint32_t *len)
EXPORT eeprom_get_inbalance_info
eeprom_get_inbalance_info

len= -0x14
buf= -0x10
chain= -9
inbalance_num= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#0x18+buf]
STR             R2, [R7,#0x18+len]
STRB            R3, [R7,#0x18+chain]
LDRB            R2, [R7,#0x18+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_12820
LDRB            R3, [R7,#0x18+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_1 ; "chain[%d] does not exist\n"
BLX             printf
MOVS            R3, #0
B               loc_1286A

loc_12820               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R3, [R7,#0x18+chain]
MOV             R1, R3  ; chain
MOVS            R0, #0x72 ; 'r' ; address
BL              eeprom_read_one_byte
MOV             R3, R0
STRB            R3, [R7,#0x18+inbalance_num]
LDRB            R2, [R7,#0x18+inbalance_num]
LDR             R3, [R7,#0x18+len]
STR             R2, [R3]
LDRB            R3, [R7,#0x18+inbalance_num] ; length
LDRB            R2, [R7,#0x18+chain] ; chain
LDR             R1, [R7,#0x18+buf] ; buf
MOVS            R0, #0x73 ; 's' ; address
BL              eeprom_write_bytes
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#0x18+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_1286A
MOV             R0, R3
ADDS            R7, #0x18
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_get_inbalance_info

ALIGN 4


; Attributes: bp-based frame fpd=8

; bool __cdecl eeprom_set_pcb_version(uint8_t chain, uint8_t pcb_version)
EXPORT eeprom_set_pcb_version
eeprom_set_pcb_version

pcb_version= -2
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
MOV             R2, R1
STRB            R3, [R7,#8+chain]
MOV             R3, R2
STRB            R3, [R7,#8+pcb_version]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_128AA
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_1 ; "chain[%d] does not exist\n"
BLX             printf
MOVS            R3, #0
B               loc_128E0

loc_128AA               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R2, [R7,#8+chain] ; chain
LDRB            R3, [R7,#8+pcb_version]
MOV             R1, R3  ; data
MOVS            R0, #0xFC ; address
BL              eeprom_write_one_byte
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_128E0
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_set_pcb_version



; Attributes: bp-based frame fpd=8

; bool __cdecl eeprom_set_bom_version(uint8_t chain, uint8_t bom_version)
EXPORT eeprom_set_bom_version
eeprom_set_bom_version

bom_version= -2
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
MOV             R2, R1
STRB            R3, [R7,#8+chain]
MOV             R3, R2
STRB            R3, [R7,#8+bom_version]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_1291E
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_1 ; "chain[%d] does not exist\n"
BLX             printf
MOVS            R3, #0
B               loc_12954

loc_1291E               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R2, [R7,#8+chain] ; chain
LDRB            R3, [R7,#8+bom_version]
MOV             R1, R3  ; data
MOVS            R0, #0xFD ; address
BL              eeprom_write_one_byte
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_update_crc
MOV             R3, R0

loc_12954
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_set_bom_version



; Attributes: bp-based frame fpd=8

; bool __cdecl eeprom_get_pcb_version(uint8_t chain, uint8_t *pcb_version)
EXPORT eeprom_get_pcb_version
eeprom_get_pcb_version

pcb_version= -8
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#8+pcb_version]
STRB            R3, [R7,#8+chain]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_1298E
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_1 ; "chain[%d] does not exist\n"
BLX             printf
MOVS            R3, #0
B               loc_129CA

loc_1298E               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R3, [R7,#8+chain]
MOV             R1, R3  ; chain
MOVS            R0, #0xFC ; address
BL              eeprom_read_one_byte
MOV             R3, R0
MOV             R2, R3
LDR             R3, [R7,#8+pcb_version]
STRB            R2, [R3]
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_129CA
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_get_pcb_version

ALIGN 4


; Attributes: bp-based frame fpd=8

; bool __cdecl eeprom_get_bom_version(uint8_t chain, uint8_t *bom_version)
EXPORT eeprom_get_bom_version
eeprom_get_bom_version

bom_version= -8
chain= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STR             R1, [R7,#8+bom_version]
STRB            R3, [R7,#8+chain]
LDRB            R2, [R7,#8+chain]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BNE             loc_12A06
LDRB            R3, [R7,#8+chain]
MOV             R1, R3
MOV             R0, #aChainDDoesNotE_1 ; "chain[%d] does not exist\n"
BLX             printf
MOVS            R3, #0
B               loc_12A42

loc_12A06               ; mutex
MOV             R0, #iic_mutex
BLX             pthread_mutex_lock
LDRB            R3, [R7,#8+chain]
MOV             R1, R3  ; chain
MOVS            R0, #0xFD ; address
BL              eeprom_read_one_byte
MOV             R3, R0
MOV             R2, R3
LDR             R3, [R7,#8+bom_version]
STRB            R2, [R3]
MOVW            R0, #0x2710 ; useconds
BLX             usleep
MOV             R0, #iic_mutex ; mutex
BLX             pthread_mutex_unlock
LDRB            R3, [R7,#8+chain]
MOV             R0, R3  ; chain
BL              eeprom_check_crc
MOV             R3, R0

loc_12A42
MOV             R0, R3
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function eeprom_get_bom_version

ALIGN 0x10


; Attributes: bp-based frame fpd=0x24

; bool __cdecl set_freq_array(int flag, uint16_t (*freq_data)[9], int freq)
EXPORT set_freq_array
set_freq_array

freq= -0x20
freq_data= -0x1C
flag= -0x18
j_0= -0x10
i= -0xC
j= -8

PUSH            {R7}
SUB             SP, SP, #0x24
ADD             R7, SP, #0
STR             R0, [R7,#0x24+flag]
STR             R1, [R7,#0x24+freq_data]
STR             R2, [R7,#0x24+freq]
LDR             R3, [R7,#0x24+flag]
CMP             R3, #0
BLT             loc_12A68
LDR             R3, [R7,#0x24+flag]
CMP             R3, #0xC
BLE             loc_12A6C

loc_12A68
MOVS            R3, #0
B               loc_12AE6

loc_12A6C
LDR             R3, [R7,#0x24+flag]
CMP             R3, #0
BNE             loc_12AB2
MOVS            R3, #0
STR             R3, [R7,#0x24+j]
B               loc_12AAA

loc_12A78
MOVS            R3, #0
STR             R3, [R7,#0x24+i]
B               loc_12A9E

loc_12A7E
LDR             R2, [R7,#0x24+j]
MOV             R3, R2
LSLS            R3, R3, #3
ADD             R3, R2
LSLS            R3, R3, #1
MOV             R2, R3
LDR             R3, [R7,#0x24+freq_data]
ADD             R3, R2
LDR             R2, [R7,#0x24+freq]
UXTH            R1, R2
LDR             R2, [R7,#0x24+i]
STRH.W          R1, [R3,R2,LSL#1]
LDR             R3, [R7,#0x24+i]
ADDS            R3, #1
STR             R3, [R7,#0x24+i]

loc_12A9E
LDR             R3, [R7,#0x24+i]
CMP             R3, #8
BLE             loc_12A7E
LDR             R3, [R7,#0x24+j]
ADDS            R3, #1
STR             R3, [R7,#0x24+j]

loc_12AAA
LDR             R3, [R7,#0x24+j]
CMP             R3, #0xB
BLE             loc_12A78
B               loc_12AE4

loc_12AB2
LDR             R3, [R7,#0x24+flag]
SUBS            R3, #1
STR             R3, [R7,#0x24+flag]
MOVS            R3, #0
STR             R3, [R7,#0x24+j_0]
B               loc_12ADE

loc_12ABE
LDR             R2, [R7,#0x24+flag]
MOV             R3, R2
LSLS            R3, R3, #3
ADD             R3, R2
LSLS            R3, R3, #1
MOV             R2, R3
LDR             R3, [R7,#0x24+freq_data]
ADD             R3, R2
LDR             R2, [R7,#0x24+freq]
UXTH            R1, R2
LDR             R2, [R7,#0x24+j_0]
STRH.W          R1, [R3,R2,LSL#1]
LDR             R3, [R7,#0x24+j_0]
ADDS            R3, #1
STR             R3, [R7,#0x24+j_0]

loc_12ADE
LDR             R3, [R7,#0x24+j_0]
CMP             R3, #8
BLE             loc_12ABE

loc_12AE4
MOVS            R3, #1

loc_12AE6
MOV             R0, R3
ADDS            R7, #0x24 ; '$'
MOV             SP, R7
POP.W           {R7}
BX              LR
; End of function set_freq_array

ALIGN 4


; Attributes: bp-based frame fpd=0x3E4

; bool __cdecl conf_process(int chain, uint16_t (*freq_data)[9], const char *str)
EXPORT conf_process
conf_process

str= -0x3E0
freq_data= -0x3DC
chain= -0x3D8
chain_stamp= -0x3D0
temp_index= -0x3C0
temp_freq= -0x3B0
temp_str= -0x3A0
stamp_flag= -0x390
line_flag= -0x1D8
str_len= -0x20
i_1= -0x1C
i_0= -0x18
i= -0x14
stamp_num= -0x10
line_num= -0xC
ret= -5

PUSH            {R4,R7,LR}
SUB.W           SP, SP, #0x3E4
ADD             R7, SP, #0
ADD.W           R3, R7, #0x3E4+chain
STR             R0, [R3]
ADD.W           R3, R7, #0x3E4+freq_data
STR             R1, [R3]
ADDS            R3, R7, #0x3E4+str
STR             R2, [R3]
MOVS            R3, #0
STR.W           R3, [R7,#0x3E4+line_num]
MOVS            R3, #0
STR.W           R3, [R7,#0x3E4+stamp_num]
ADDS            R3, R7, #0x3E4+str
LDR             R0, [R3] ; s
BLX             strlen
MOV             R3, R0
ADDS            R3, #1
STR.W           R3, [R7,#0x3E4+str_len]
ADD.W           R3, R7, #0x3E4+chain
LDR             R3, [R3]
ADDS            R2, R3, #1
ADD.W           R3, R7, #0x3E4+chain_stamp
MOV             R1, #aChainD_0 ; "chain %d"
MOV             R0, R3  ; s
BLX             sprintf
ADD.W           R2, R7, #0x3E4+chain_stamp
ADDS            R3, R7, #0x3E4+str
MOV             R1, R2  ; needle
LDR             R0, [R3] ; haystack
BLX             strstr
MOV             R3, R0
CMP             R3, #0
BNE             loc_12B66
MOV             R0, #aConfFileFormat ; "conf file format is incorrect, please c"...
BLX             puts
MOVS            R3, #0
B               loc_12D48

loc_12B66
ADD.W           R3, R7, #0x3E4+chain_stamp
MOV             R1, R3
MOV             R0, #aNowSetSFreqArr ; "now set: %s freq array ...\n"
BLX             printf
MOVS            R3, #0
STR.W           R3, [R7,#0x3E4+i]
B               loc_12BC4

loc_12B80
LDR.W           R3, [R7,#0x3E4+i]
ADDS            R2, R7, #0x3E4+str
LDR             R2, [R2]
ADD             R3, R2
LDRB            R3, [R3]
CMP             R3, #0xA
BEQ             loc_12BA0
LDR.W           R3, [R7,#0x3E4+i]
ADDS            R2, R7, #0x3E4+str
LDR             R2, [R2]
ADD             R3, R2
LDRB            R3, [R3]
CMP             R3, #0
BNE             loc_12BBA

loc_12BA0
ADD.W           R3, R7, #0x3E4+line_flag
LDR.W           R2, [R7,#0x3E4+line_num]
LDR.W           R1, [R7,#0x3E4+i]
STR.W           R1, [R3,R2,LSL#2]
LDR.W           R3, [R7,#0x3E4+line_num]
ADDS            R3, #1
STR.W           R3, [R7,#0x3E4+line_num]

loc_12BBA
LDR.W           R3, [R7,#0x3E4+i]
ADDS            R3, #1
STR.W           R3, [R7,#0x3E4+i]

loc_12BC4
LDR.W           R2, [R7,#0x3E4+i]
LDR.W           R3, [R7,#0x3E4+str_len]
CMP             R2, R3
BLT             loc_12B80
MOVS            R3, #0
STR.W           R3, [R7,#0x3E4+i_0]
B               loc_12C0C

loc_12BD8
LDR.W           R3, [R7,#0x3E4+i_0]
ADDS            R2, R7, #0x3E4+str
LDR             R2, [R2]
ADD             R3, R2
LDRB            R3, [R3]
CMP             R3, #0x3A ; ':'
BNE             loc_12C02
ADD.W           R3, R7, #0x3E4+stamp_flag
LDR.W           R2, [R7,#0x3E4+stamp_num]
LDR.W           R1, [R7,#0x3E4+i_0]
STR.W           R1, [R3,R2,LSL#2]
LDR.W           R3, [R7,#0x3E4+stamp_num]
ADDS            R3, #1
STR.W           R3, [R7,#0x3E4+stamp_num]

loc_12C02
LDR.W           R3, [R7,#0x3E4+i_0]
ADDS            R3, #1
STR.W           R3, [R7,#0x3E4+i_0]

loc_12C0C
LDR.W           R2, [R7,#0x3E4+i_0]
LDR.W           R3, [R7,#0x3E4+str_len]
CMP             R2, R3
BLT             loc_12BD8
MOVS            R3, #0
STR.W           R3, [R7,#0x3E4+i_1]
B               loc_12D36

loc_12C20
ADD.W           R3, R7, #0x3E4+temp_freq
MOVS            R2, #0x10 ; n
MOVS            R1, #0  ; c
MOV             R0, R3  ; s
BLX             memset
ADD.W           R3, R7, #0x3E4+stamp_flag
LDR.W           R2, [R7,#0x3E4+i_1]
LDR.W           R3, [R3,R2,LSL#2]
ADDS            R3, #1
ADDS            R2, R7, #0x3E4+str
LDR             R2, [R2]
ADDS            R0, R2, R3
LDR.W           R3, [R7,#0x3E4+i_1]
ADDS            R2, R3, #1
ADD.W           R3, R7, #0x3E4+line_flag
LDR.W           R2, [R3,R2,LSL#2]
ADD.W           R3, R7, #0x3E4+stamp_flag
LDR.W           R1, [R7,#0x3E4+i_1]
LDR.W           R3, [R3,R1,LSL#2]
SUBS            R3, R2, R3
SUBS            R3, #1
MOV             R2, R3  ; n
ADD.W           R3, R7, #0x3E4+temp_freq
MOV             R1, R0  ; src
MOV             R0, R3  ; dest
BLX             strncpy
LDR.W           R3, [R7,#0x3E4+i_1]
ADDS            R2, R3, #1
ADD.W           R3, R7, #0x3E4+line_flag
LDR.W           R2, [R3,R2,LSL#2]
ADD.W           R3, R7, #0x3E4+stamp_flag
LDR.W           R1, [R7,#0x3E4+i_1]
LDR.W           R3, [R3,R1,LSL#2]
SUBS            R3, R2, R3
ADD.W           R2, R7, #0x3E4+temp_freq
MOVS            R1, #0
STRB            R1, [R2,R3]
ADD.W           R3, R7, #0x3E4+temp_index
MOVS            R2, #0x10 ; n
MOVS            R1, #0  ; c
MOV             R0, R3  ; s
BLX             memset
ADD.W           R3, R7, #0x3E4+line_flag
LDR.W           R2, [R7,#0x3E4+i_1]
LDR.W           R3, [R3,R2,LSL#2]
ADDS            R3, #1
ADDS            R2, R7, #0x3E4+str
LDR             R2, [R2]
ADDS            R0, R2, R3
ADD.W           R3, R7, #0x3E4+stamp_flag
LDR.W           R2, [R7,#0x3E4+i_1]
LDR.W           R2, [R3,R2,LSL#2]
ADD.W           R3, R7, #0x3E4+line_flag
LDR.W           R1, [R7,#0x3E4+i_1]
LDR.W           R3, [R3,R1,LSL#2]
SUBS            R3, R2, R3
SUBS            R3, #1
MOV             R2, R3  ; n
ADD.W           R3, R7, #0x3E4+temp_index
MOV             R1, R0  ; src
MOV             R0, R3  ; dest
BLX             strncpy
LDR.W           R3, [R7,#0x3E4+i_1]
ADDS            R2, R3, #1
ADD.W           R3, R7, #0x3E4+line_flag
LDR.W           R2, [R3,R2,LSL#2]
ADD.W           R3, R7, #0x3E4+stamp_flag
LDR.W           R1, [R7,#0x3E4+i_1]
LDR.W           R3, [R3,R1,LSL#2]
SUBS            R3, R2, R3
ADD.W           R2, R7, #0x3E4+temp_index
MOVS            R1, #0
STRB            R1, [R2,R3]
ADD.W           R3, R7, #0x3E4+temp_index
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R4, R0
ADD.W           R3, R7, #0x3E4+temp_freq
MOV             R0, R3  ; nptr
BLX             atoi
MOV             R2, R0  ; freq
ADD.W           R3, R7, #0x3E4+freq_data
LDR             R1, [R3] ; freq_data
MOV             R0, R4  ; flag
BL              set_freq_array
MOV             R3, R0
STRB.W          R3, [R7,#0x3E4+ret]
LDR.W           R3, [R7,#0x3E4+i_1]
ADDS            R3, #1
STR.W           R3, [R7,#0x3E4+i_1]

loc_12D36
LDR.W           R2, [R7,#0x3E4+i_1]
LDR.W           R3, [R7,#0x3E4+stamp_num]
CMP             R2, R3
BLT.W           loc_12C20
LDRB.W          R3, [R7,#0x3E4+ret]

loc_12D48
MOV             R0, R3
ADD.W           R7, R7, #0x3E4
MOV             SP, R7
POP             {R4,R7,PC}
; End of function conf_process

ALIGN 4


; Attributes: bp-based frame fpd=0x14

; void __cdecl travel_array(uint16_t (*array)[9])
EXPORT travel_array
travel_array

array= -0x10
i= -0xC
j= -8

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x14
ADD             R7, SP, #0
STR             R0, [R7,#0x14+array]
MOVS            R3, #0
STR             R3, [R7,#0x14+j]
B               loc_12DC2

loc_12D62
MOVS            R3, #0
STR             R3, [R7,#0x14+i]
B               loc_12DB0

loc_12D68
LDR             R3, [R7,#0x14+j]
MOVS            R2, #0x6C ; 'l'
MUL             R2, R2, R3
MOV             R3, #0x2AAAAAAB
SMULL           R3, R4, R2, R3
ASRS            R1, R4, #1
ASRS            R3, R2, #0x1F
SUBS            R2, R1, R3
LDR             R3, [R7,#0x14+i]
ADDS            R1, R2, R3
LDR             R2, [R7,#0x14+j]
MOV             R3, R2
LSLS            R3, R3, #3
ADD             R3, R2
LSLS            R3, R3, #1
MOV             R2, R3
LDR             R3, [R7,#0x14+array]
ADD             R3, R2
LDR             R2, [R7,#0x14+i]
LDRH.W          R3, [R3,R2,LSL#1]
MOV             R2, R3
MOV             R0, #aIc03dD_0 ; "IC[%03d]:%d "
BLX             printf
LDR             R3, [R7,#0x14+i]
ADDS            R3, #1
STR             R3, [R7,#0x14+i]

loc_12DB0
LDR             R3, [R7,#0x14+i]
CMP             R3, #8
BLE             loc_12D68
MOVS            R0, #0xA ; c
BLX             putchar
LDR             R3, [R7,#0x14+j]
ADDS            R3, #1
STR             R3, [R7,#0x14+j]

loc_12DC2
LDR             R3, [R7,#0x14+j]
CMP             R3, #0xB
BLE             loc_12D62
NOP
ADDS            R7, #0x14
MOV             SP, R7
POP             {R4,R7,PC}
; End of function travel_array



; Attributes: bp-based frame fpd=0x4C0

; bool __cdecl scan_eeprom_config_file(const char *conf_file_path, uint16_t (*freq_data)[12][9])
EXPORT scan_eeprom_config_file
scan_eeprom_config_file

freq_data= -0x4C0
conf_file_path= -0x4BC
msg= -0x4B4
chain_msg_ptr= -0xB4
chain_msg_len= -0x74
file_buf= -0x30
file_length= -0x2C
fp= -0x28
i_4= -0x24
i_3= -0x20
i_2= -0x1C
j= -0x18
i_1= -0x14
i_0= -0x10
i= -0xC
freq_set_num= -8
ret= -1
var_s0=  0

PUSH            {R7,LR}
SUB.W           SP, SP, #0x4C0
ADD             R7, SP, #0
ADDS            R3, R7, #0x4C0+conf_file_path
STR             R0, [R3]
MOV             R3, R7
STR             R1, [R3]
ADDS            R3, R7, #0x4C0+conf_file_path
MOV             R1, #aR_0 ; "r"
LDR             R0, [R3] ; filename
BLX             fopen
STR.W           R0, [R7,#0x4C0+fp]
LDR.W           R3, [R7,#0x4C0+fp]
CMP             R3, #0
BNE             loc_12E84
ADDS            R3, R7, #0x4C0+conf_file_path
LDR             R1, [R3]
MOV             R0, #aSDoseNotExistW ; "%s : dose not exist, will use default f"...
BLX             printf
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+i]
B               loc_12E78

loc_12E14
MOV             R3, #chain_list
LDR.W           R2, [R7,#0x4C0+i]
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_12E6E
LDR.W           R1, [R7,#0x4C0+i]
MOV             R0, #aNowSetChainDFr ; "now set: chain %d freq array ...\n"
BLX             printf
LDR.W           R3, [R7,#0x4C0+i]
MOVS            R2, #0xD8
MUL             R3, R2, R3
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
MOVS            R2, #0xD8 ; n
MOV             R1, #def_freq_data ; src
MOV             R0, R3  ; dest
BLX             memcpy
LDR.W           R3, [R7,#0x4C0+i]
MOVS            R2, #0xD8
MUL             R3, R2, R3
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
MOV             R0, R3  ; array
BL              travel_array

loc_12E6E
LDR.W           R3, [R7,#0x4C0+i]
ADDS            R3, #1
STR.W           R3, [R7,#0x4C0+i]

loc_12E78
LDR.W           R3, [R7,#0x4C0+i]
CMP             R3, #0xF
BLE             loc_12E14
MOVS            R3, #1
B               loc_131DE

loc_12E84               ; whence
MOVS            R2, #2
MOVS            R1, #0  ; off
LDR.W           R0, [R7,#0x4C0+fp] ; stream
BLX             fseek
LDR.W           R0, [R7,#0x4C0+fp] ; stream
BLX             ftell
STR.W           R0, [R7,#0x4C0+file_length]
MOVS            R2, #0  ; whence
MOVS            R1, #0  ; off
LDR.W           R0, [R7,#0x4C0+fp] ; stream
BLX             fseek
LDR.W           R3, [R7,#0x4C0+file_length]
MOV             R0, R3  ; size
BLX             malloc
MOV             R3, R0
STR.W           R3, [R7,#0x4C0+file_buf]
LDR.W           R3, [R7,#0x4C0+file_buf]
CMP             R3, #0
BNE             loc_12ED0
MOV             R0, #aFailedToAlloca_0 ; "failed to allocate memory for file_buf!"...
BLX             perror
MOVS            R3, #0
B               loc_131DE

loc_12ED0
LDR.W           R3, [R7,#0x4C0+file_length]
MOV             R2, R3  ; n
MOVS            R1, #0  ; c
LDR.W           R0, [R7,#0x4C0+file_buf] ; s
BLX             memset
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+i_0]
B               loc_12F4E

loc_12EE8               ; size
MOV.W           R0, #0x400
BLX             malloc
MOV             R3, R0
MOV             R2, R3
LDR.W           R3, [R7,#0x4C0+i_0]
LSLS            R3, R3, #2
ADD.W           R1, R7, #0x4C0+var_s0
ADD             R3, R1
STR.W           R2, [R3,#-0xB4]
LDR.W           R3, [R7,#0x4C0+i_0]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0xB4]
CMP             R3, #0
BNE             loc_12F28
MOV             R0, #aFailedToAlloca_1 ; "failed to allocate memory for chain_msg"...
BLX             perror
MOVS            R3, #0
B               loc_131DE

loc_12F28
LDR.W           R3, [R7,#0x4C0+i_0]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0xB4]
MOV.W           R2, #0x400 ; n
MOVS            R1, #0  ; c
MOV             R0, R3  ; s
BLX             memset
LDR.W           R3, [R7,#0x4C0+i_0]
ADDS            R3, #1
STR.W           R3, [R7,#0x4C0+i_0]

loc_12F4E
LDR.W           R3, [R7,#0x4C0+i_0]
CMP             R3, #0xF
BLE             loc_12EE8
LDR.W           R1, [R7,#0x4C0+file_length] ; size
LDR.W           R3, [R7,#0x4C0+fp] ; stream
MOVS            R2, #1  ; n
LDR.W           R0, [R7,#0x4C0+file_buf] ; ptr
BLX             fread
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+i_1]
MOVS            R3, #1
STR.W           R3, [R7,#0x4C0+j]
B               loc_12FCE

loc_12F76
LDR.W           R3, [R7,#0x4C0+i_1]
LDR.W           R2, [R7,#0x4C0+file_buf]
ADD             R3, R2
LDRB            R3, [R3]
CMP             R3, #0xA
BNE             loc_12FC4
LDR.W           R3, [R7,#0x4C0+i_1]
ADDS            R3, #1
LDR.W           R2, [R7,#0x4C0+file_buf]
ADD             R3, R2
LDRB            R3, [R3]
CMP             R3, #0xA
BNE             loc_12FC4
LDR.W           R3, [R7,#0x4C0+j]
LSLS            R3, R3, #2
ADDW            R2, R7, #0x4C0+chain_msg_len
ADD             R3, R2
LDR.W           R2, [R7,#0x4C0+i_1]
STR             R2, [R3]
LDR.W           R3, [R7,#0x4C0+j]
ADDS            R3, #1
STR.W           R3, [R7,#0x4C0+j]
LDR.W           R3, [R7,#0x4C0+j]
STR.W           R3, [R7,#0x4C0+freq_set_num]
LDR.W           R3, [R7,#0x4C0+j]
CMP             R3, #0x10
BGT             loc_12FDC

loc_12FC4
LDR.W           R3, [R7,#0x4C0+i_1]
ADDS            R3, #1
STR.W           R3, [R7,#0x4C0+i_1]

loc_12FCE
LDR.W           R2, [R7,#0x4C0+i_1]
LDR.W           R3, [R7,#0x4C0+file_length]
CMP             R2, R3
BLT             loc_12F76
B               loc_12FDE

loc_12FDC
NOP

loc_12FDE
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+chain_msg_len]
LDR.W           R0, [R7,#0x4C0+file_buf] ; s
BLX             strlen
MOV             R3, R0
MOV             R2, R3
LDR.W           R3, [R7,#0x4C0+freq_set_num]
LSLS            R3, R3, #2
ADD.W           R1, R7, #0x4C0+var_s0
ADD             R3, R1
STR.W           R2, [R3,#-0x74]
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+i_2]
B               loc_130D4

loc_13008
LDR.W           R3, [R7,#0x4C0+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R0, [R3,#-0xB4] ; dest
LDR.W           R3, [R7,#0x4C0+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0x74]
MOV             R2, R3
LDR.W           R3, [R7,#0x4C0+file_buf]
ADDS            R1, R3, R2 ; src
LDR.W           R3, [R7,#0x4C0+i_2]
ADDS            R3, #1
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R2, [R3,#-0x74]
LDR.W           R3, [R7,#0x4C0+i_2]
LSLS            R3, R3, #2
ADD.W           LR, R7, #0x4C0+var_s0
ADD             R3, LR
LDR.W           R3, [R3,#-0x74]
SUBS            R3, R2, R3
MOV             R2, R3  ; n
BLX             strncpy
LDR.W           R3, [R7,#0x4C0+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0xB4]
MOV             R1, #asc_13BB8 ; "\n\n"
MOV             R0, R3  ; haystack
BLX             strstr
MOV             R3, R0
CMP             R3, #0
BEQ             loc_130CA
LDR.W           R3, [R7,#0x4C0+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R0, [R3,#-0xB4] ; dest
LDR.W           R3, [R7,#0x4C0+i_2]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0xB4]
ADDS            R1, R3, #2 ; src
LDR.W           R3, [R7,#0x4C0+i_2]
ADDS            R3, #1
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R2, [R3,#-0x74]
LDR.W           R3, [R7,#0x4C0+i_2]
LSLS            R3, R3, #2
ADD.W           LR, R7, #0x4C0+var_s0
ADD             R3, LR
LDR.W           R3, [R3,#-0x74]
SUBS            R3, R2, R3
MOV             R2, R3  ; n
BLX             strncpy

loc_130CA
LDR.W           R3, [R7,#0x4C0+i_2]
ADDS            R3, #1
STR.W           R3, [R7,#0x4C0+i_2]

loc_130D4
LDR.W           R2, [R7,#0x4C0+i_2]
LDR.W           R3, [R7,#0x4C0+freq_set_num]
CMP             R2, R3
BLT             loc_13008
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+i_3]
B               loc_1315E

loc_130E8
MOV             R3, #chain_list
LDR.W           R2, [R7,#0x4C0+i_3]
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_13154
LDR.W           R3, [R7,#0x4C0+i_3]
MOVS            R2, #0xD8
MUL             R3, R2, R3
MOV             R2, R7
LDR             R2, [R2]
ADDS            R1, R2, R3 ; freq_data
LDR.W           R3, [R7,#0x4C0+i_3]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0xB4]
MOV             R2, R3  ; str
LDR.W           R0, [R7,#0x4C0+i_3] ; chain
BL              conf_process
MOV             R3, R0
STRB.W          R3, [R7,#0x4C0+ret]
LDRB.W          R3, [R7,#0x4C0+ret]
EOR.W           R3, R3, #1
UXTB            R3, R3
CMP             R3, #0
BEQ             loc_1313E
MOVS            R3, #0
B               loc_131DE

loc_1313E
LDR.W           R3, [R7,#0x4C0+i_3]
MOVS            R2, #0xD8
MUL             R3, R2, R3
MOV             R2, R7
LDR             R2, [R2]
ADD             R3, R2
MOV             R0, R3  ; array
BL              travel_array

loc_13154
LDR.W           R3, [R7,#0x4C0+i_3]
ADDS            R3, #1
STR.W           R3, [R7,#0x4C0+i_3]

loc_1315E
LDR.W           R3, [R7,#0x4C0+i_3]
CMP             R3, #0xF
BLE             loc_130E8
LDR.W           R3, [R7,#0x4C0+file_buf]
CMP             R3, #0
BEQ             loc_1317C
LDR.W           R0, [R7,#0x4C0+file_buf] ; ptr
BLX             free
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+file_buf]

loc_1317C
MOVS            R3, #0
STR.W           R3, [R7,#0x4C0+i_4]
B               loc_131CA

loc_13184
LDR.W           R3, [R7,#0x4C0+i_4]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0xB4]
CMP             R3, #0
BEQ             loc_131C0
LDR.W           R3, [R7,#0x4C0+i_4]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
LDR.W           R3, [R3,#-0xB4]
MOV             R0, R3  ; ptr
BLX             free
LDR.W           R3, [R7,#0x4C0+i_4]
LSLS            R3, R3, #2
ADD.W           R2, R7, #0x4C0+var_s0
ADD             R3, R2
MOVS            R2, #0
STR.W           R2, [R3,#-0xB4]

loc_131C0
LDR.W           R3, [R7,#0x4C0+i_4]
ADDS            R3, #1
STR.W           R3, [R7,#0x4C0+i_4]

loc_131CA
LDR.W           R3, [R7,#0x4C0+i_4]
CMP             R3, #0xF
BLE             loc_13184
LDR.W           R0, [R7,#0x4C0+fp] ; stream
BLX             fclose
LDRB.W          R3, [R7,#0x4C0+ret]

loc_131DE
MOV             R0, R3
ADD.W           R7, R7, #0x4C0
MOV             SP, R7
POP             {R7,PC}
; End of function scan_eeprom_config_file




; void __fastcall init(int argc, char **argv, char **envp)
EXPORT init
init
argc = R0               ; int
argv = R1               ; char **
envp = R2               ; char **
PUSH.W          {R3-R9,LR}
MOV             R6, argc
LDR             R5, =(__do_global_dtors_aux_fini_array_entry - 0x131FC)
MOV             R7, argv
MOV             R8, envp
LDR.W           R9, =(__frame_dummy_init_array_entry - 0x13202)
ADD             R5, PC  ; __do_global_dtors_aux_fini_array_entry
BLX             .init_proc
ADD             R9, PC  ; __frame_dummy_init_array_entry
SUB.W           R5, R5, R9
ASRS            R5, R5, #2
BEQ             locret_1321C
MOVS            R4, #0

loc_1320A
i = R4                  ; size_t
LDR.W           R3, [R9,i,LSL#2]
MOV             R2, envp
ADDS            i, #1
MOV             R1, argv
MOV             R0, argc
BLX             R3
i = R4                  ; size_t
CMP             i, R5
BNE             loc_1320A

locret_1321C
POP.W           {R3-R9,PC}
; End of function init

off_13220 DCD __do_global_dtors_aux_fini_array_entry - 0x131FC
off_13224 DCD __frame_dummy_init_array_entry - 0x13202



; void _libc_csu_fini()
EXPORT __libc_csu_fini
__libc_csu_fini
BX              LR
; End of function __libc_csu_fini

ALIGN 4
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x1322C
CODE32


; Alternative name is '_fini'

; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x13234
EXPORT _IO_stdin_used
; const int IO_stdin_used
_IO_stdin_used DCD 0x20001
aEepromTestHelp DCB "eeprom_test help:",0
ALIGN 4
aDChainDumpEepr DCB " -d [chain]                       "
DCB "  dump eeprom",0
aLChainTraverse DCB " -l [chain]                       "
DCB "  traverse eeprom friendly",0
ALIGN 4
aIConfigFilePat DCB " -i [config file path]            "
DCB "  init all eeprom with config file"
DCB 0
ALIGN 4
aEChainEraseEep DCB " -e [chain]                       "
DCB "  erase eeprom",0
ALIGN 4
aWChainEepromAd DCB " -w [chain] [eeprom addr] [data0 ."
DCB "..]    write eeprom",0
ALIGN 0x10
aRChainEepromAd DCB " -r [chain] [eeprom addr] [length]"
DCB "  read eeprom",0
aPChainPcbVerBo DCB " -p [chain] [pcb_ver] [bom_ver]   "
DCB "   update PCB & BOM version",0
ALIGN 0x10
aChainDDoesNotE DCB "chain[%d] does not exist!",0xA,0
ALIGN 4
aWriteError DCB "write error!",0
ALIGN 4
aChainD0x02x0x0 DCB "[chain%d] [0x%02x] : 0x%02x",0xA,0
ALIGN 4
aHelp DCB "--help",0
ALIGN 4
aH DCB "-h",0
ALIGN 4
aDevAxiFpgaDev DCB "/dev/axi_fpga_dev",0
ALIGN 4
aDevAxiFpgaDevO DCB "/dev/axi_fpga_dev open failed. fd "
DCB "= %d",0xA,0
aOpen DCB "open",0
ALIGN 4
aMmapAxiFpgaAdd DCB "mmap axi_fpga_addr failed. axi_fpg"
DCB "a_addr = 0x%lsx",0xA,0
ALIGN 0x10
aD DCB "-d",0
ALIGN 4
aL DCB "-l",0
ALIGN 4
aI DCB "-i",0
ALIGN 4
aE DCB "-e",0
ALIGN 0x10
aW DCB "-w",0
ALIGN 4
aR DCB "-r",0
ALIGN 4
aP DCB "-p",0
ALIGN 4
; const char eeprom_conf_file[64]
eeprom_conf_file DCB 0x2F, 0x63, 0x6F, 0x6E, 0x66, 0x69, 0x67
DCB 0x2F, 0x65, 0x65, 0x70, 0x72, 0x6F, 0x6D
DCB 0x2E, 0x63, 0x6F, 0x6E, 0x66, 0, 0, 0
DCB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DCB 0, 0, 0
EXPORT def_freq_data
; const uint16_t def_freq_data[12][9]
def_freq_data DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
DCW 0x113, 0x113, 0x113, 0x113, 0x113, 0x113
EXPORT chCRCHTalbe
; const uint8_t chCRCHTalbe[256]
chCRCHTalbe DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 0, 0xC1, 0x81, 0x40, 1, 0xC0, 0x80, 0x41
DCB 1, 0xC0, 0x80, 0x41, 0, 0xC1, 0x81, 0x40
EXPORT chCRCLTalbe
; const uint8_t chCRCLTalbe[256]
chCRCLTalbe DCB 0, 0xC0, 0xC1, 1, 0xC3, 3, 2, 0xC2, 0xC6
DCB 6, 7, 0xC7, 5, 0xC5, 0xC4, 4, 0xCC, 0xC
DCB 0xD, 0xCD, 0xF, 0xCF, 0xCE, 0xE, 0xA
DCB 0xCA, 0xCB, 0xB, 0xC9, 9, 8, 0xC8, 0xD8
DCB 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A
DCB 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C
DCB 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17
DCB 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11
DCB 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1
DCB 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7
DCB 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC
DCB 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA
DCB 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38
DCB 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A
DCB 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED
DCB 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27
DCB 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23
DCB 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61
DCB 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6
DCB 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C
DCB 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE
DCB 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8
DCB 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B
DCB 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D
DCB 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5
DCB 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3
DCB 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90
DCB 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96
DCB 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54
DCB 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E
DCB 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59
DCB 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B
DCB 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F
DCB 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85
DCB 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42
DCB 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
aChainD DCB "chain[%d] ",0
ALIGN 0x10
aFoundDChainTot DCB "found, %d chain total",0xA,0
ALIGN 4
aCouldNotGetIic DCB "could not get iic, ret = 0x%08x",0xA
DCB 0
ALIGN 4
aErrorAllocateM DCB "error: allocate memory failed",0xA
DCB 0
ALIGN 4
aChainDDoesNotE_0 DCB "chain[%d] does not exist!",0xA,0
ALIGN 4
aFetalErrorAllo DCB "fetal error: allocate memory faile"
DCB "d!",0xA,0
ALIGN 0x10
aFetalErrorFail DCB "fetal error: failed to allocate me"
DCB "mory for eeprom!",0
ALIGN 4
aChainDDataInEe DCB "chain[%d] data in eeprom is:",0xA,0
ALIGN 4
aMagicNumber0x0 DCB "magic number: 0x%02x",0xA,0
ALIGN 4
aFreqDataPerAsi DCB "freq data per ASIC:",0
aIc03dD DCB "IC[%03d]:%d ",0
ALIGN 0x10
aVoltage02fV DCB "voltage: %.02f V",0xA,0
ALIGN 4
aHashRate05dGhS DCB "hash rate: %05d GH/s",0xA,0
ALIGN 4
aFailedToAlloca DCB "failed to allocate memory for eepr"
DCB "om",0
ALIGN 4
aFailedToInitia DCB "failed to initialize eeprom",0
aAllocatMemoryF DCB "allocat memory failed",0
ALIGN 4
aEepromDataInCh DCB "eeprom data in chain[%d]:",0xA,0
ALIGN 4
aOffset00010203 DCB "offset: 00 01 02 03 04 05 06 07 08"
DCB " 09 0a 0b 0c 0d 0e 0d",0
a06x DCB "%06x: ",0
ALIGN 4
a02x DCB "%02x ",0
ALIGN 4
aInbalanceAsicI DCB "inbalance ASIC info: ",0
ALIGN 4
aIc03d DCB "IC[%03d] ",0
ALIGN 0x10
aPcbVer0x02xBom DCB "PCB_Ver:0x%02x  BOM_Ver:0x%02x",0xA
DCB 0
aErrorInbalance DCB "error: inbalance data are more tha"
DCB "n %d",0xA,0
aChainDDoesNotE_1 DCB "chain[%d] does not exist",0xA,0
ALIGN 4
aChainD_0 DCB "chain %d",0
ALIGN 0x10
aConfFileFormat DCB "conf file format is incorrect, ple"
DCB "ase check!",0
ALIGN 0x10
aNowSetSFreqArr DCB "now set: %s freq array ...",0xA,0
aIc03dD_0 DCB "IC[%03d]:%d ",0
ALIGN 4
aR_0 DCB "r",0
ALIGN 0x10
aSDoseNotExistW DCB "%s : dose not exist, will use defa"
DCB "ult freq configure",0xA,0
ALIGN 4
aNowSetChainDFr DCB "now set: chain %d freq array ...",0xA
DCB 0
ALIGN 4
aFailedToAlloca_0 DCB "failed to allocate memory for file"
DCB "_buf!",0xA,0
ALIGN 4
aFailedToAlloca_1 DCB "failed to allocate memory for chai"
DCB "n_msg_ptr!",0xA,0
ALIGN 4
asc_13BB8 DCB 0xA
DCB 0xA,0
ALIGN 4
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x13BBC
unk_13BBC DCB 0xAC
DCB 0xCD
DCB 0xFF
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x13BC4
__FRAME_END__ ALIGN 8
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x23BC8
__frame_dummy_init_array_entry DCD frame_dummy+1 ; Alternative name is '__init_array_start'
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x23BCC
__do_global_dtors_aux_fini_array_entry DCD __do_global_dtors_aux+1 ; Alternative name is '__init_array_end'
; .fini_array ends


; Segment type: Pure data
AREA .jcr, DATA
; ORG 0x23BD0
__JCR_LIST__ DCD 0      ; Alternative name is '__JCR_END__'
; .jcr ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x23BD4
_DYNAMIC Elf32_Dyn <1, <1>> ; DT_NEEDED libm.so.6
Elf32_Dyn <1, <0x64>>   ; DT_NEEDED librt.so.1
Elf32_Dyn <1, <0x6F>>   ; DT_NEEDED libpthread.so.0
Elf32_Dyn <1, <0xBD>>   ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x107C4>> ; DT_INIT
Elf32_Dyn <0xD, <0x1322C>> ; DT_FINI
Elf32_Dyn <0x19, <0x23BC8>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x23BCC>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x10194>> ; DT_HASH
Elf32_Dyn <5, <0x104B0>> ; DT_STRTAB
Elf32_Dyn <6, <0x10270>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0x181>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x23CD4>> ; DT_PLTGOT
Elf32_Dyn <2, <0x100>>  ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x106C4>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x106BC>> ; DT_REL
Elf32_Dyn <0x12, <8>>   ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x1067C>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <2>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x10632>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x10
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
DCB    0
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x23CD4
_GLOBAL_OFFSET_TABLE_ DCD _DYNAMIC
DCD 0
off_23CDC DCD 0
pthread_mutex_unlock_ptr DCD __imp_pthread_mutex_unlock
strstr_ptr DCD __imp_strstr
strcmp_ptr DCD __imp_strcmp
printf_ptr DCD __imp_printf
fopen_ptr DCD __imp_fopen
pthread_mutex_destroy_ptr DCD __imp_pthread_mutex_destroy
free_ptr DCD __imp_free
pthread_mutex_lock_ptr DCD __imp_pthread_mutex_lock
memcpy_ptr DCD __imp_memcpy
ftell_ptr DCD __imp_ftell
memcmp_ptr DCD __imp_memcmp
perror_ptr DCD __imp_perror
usleep_ptr DCD __imp_usleep
strcpy_ptr DCD __imp_strcpy
fread_ptr DCD __imp_fread
puts_ptr DCD __imp_puts
malloc_ptr DCD __imp_malloc
__libc_start_main_ptr DCD __imp___libc_start_main
__gmon_start___ptr DCD __imp___gmon_start__
open_ptr DCD __imp_open
strlen_ptr DCD __imp_strlen
mmap_ptr DCD __imp_mmap
memset_ptr DCD __imp_memset
putchar_ptr DCD __imp_putchar
strncpy_ptr DCD __imp_strncpy
fclose_ptr DCD __imp_fclose
munmap_ptr DCD __imp_munmap
sprintf_ptr DCD __imp_sprintf
atoi_ptr DCD __imp_atoi
fseek_ptr DCD __imp_fseek
abort_ptr DCD __imp_abort
close_ptr DCD __imp_close
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x23D64
EXPORT __data_start
__data_start ALIGN 8
EXPORT __dso_handle
__dso_handle DCB    0
DCB    0
DCB    0
DCB    0
; uint16_t def_volt_data
def_volt_data DCW 0x721
; .data ends


; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x23D6E
EXPORT __bss_start__
__bss_start__ % 1       ; Alternative name is '_edata'
                        ; Alternative name is '__bss_start'
% 1
; LOAD ends


; Segment type: Uninitialized
AREA .bss, DATA
; ORG 0x23D70
EXPORT __TMC_END__
__TMC_END__ % 1         ; Alternative name is 'completed.9251'
ALIGN 4
EXPORT iic_mutex
; pthread_mutex_t iic_mutex
iic_mutex pthread_mutex_t <?>
EXPORT chain_num
; int chain_num
chain_num % 4
EXPORT axi_fpga_addr
; unsigned int *axi_fpga_addr
axi_fpga_addr % 4
EXPORT chain_list
; int chain_list[16]
chain_list % 0x40
; .bss ends


; Segment type: Zero-length
AREA .prgend, DATA, ALIGN=0
; ORG 0x23DD4
_end
; .prgend ends


; Segment type: Externs
; int pthread_mutex_unlock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_unlock
; char *strstr(const char *haystack, const char *needle)
IMPORT __imp_strstr
; int strcmp(const char *s1, const char *s2)
IMPORT __imp_strcmp
; int printf(const char *format, ...)
IMPORT __imp_printf
; FILE *fopen(const char *filename, const char *modes)
IMPORT __imp_fopen
; int pthread_mutex_destroy(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_destroy
; void free(void *ptr)
IMPORT __imp_free
; int pthread_mutex_lock(pthread_mutex_t *mutex)
IMPORT __imp_pthread_mutex_lock
; void *memcpy(void *dest, const void *src, size_t n)
IMPORT __imp_memcpy
; int ftell(FILE *stream)
IMPORT __imp_ftell
; int memcmp(const void *s1, const void *s2, size_t n)
IMPORT __imp_memcmp
; void perror(const char *s)
IMPORT __imp_perror
; int usleep(__useconds_t useconds)
IMPORT __imp_usleep
; char *strcpy(char *dest, const char *src)
IMPORT __imp_strcpy
; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
IMPORT __imp_fread
; int puts(const char *s)
IMPORT __imp_puts
; void *malloc(size_t size)
IMPORT __imp_malloc
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; int open(const char *file, int oflag, ...)
IMPORT __imp_open
; size_t strlen(const char *s)
IMPORT __imp_strlen
; void *mmap(void *addr, size_t len, int prot, int flags, int fd, __off_t offset)
IMPORT __imp_mmap
; void *memset(void *s, int c, size_t n)
IMPORT __imp_memset
; int putchar(int c)
IMPORT __imp_putchar
; char *strncpy(char *dest, const char *src, size_t n)
IMPORT __imp_strncpy
; int fclose(FILE *stream)
IMPORT __imp_fclose
; int munmap(void *addr, size_t len)
IMPORT __imp_munmap
; int sprintf(char *s, const char *format, ...)
IMPORT __imp_sprintf
; int atoi(const char *nptr)
IMPORT __imp_atoi
; int fseek(FILE *stream, int off, int whence)
IMPORT __imp_fseek
; void abort(void)
IMPORT __imp_abort
; int close(int fd)
IMPORT __imp_close
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT __imp___gmon_start__, WEAK
IMPORT _Jv_RegisterClasses, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END _start

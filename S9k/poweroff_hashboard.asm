;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2025 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-2137-ACAB-99                      |
; |                              elf <elv@ven>                              |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : A3D60C8B3D69E32F26CC363B270CF51AC358228AF685B311F990FE3187E1513F
; Input MD5    : 5850F085895D6FF6BA3E29C88EC58F43
; Input CRC32  : BB94D2B6
; Compiler     : GNU C++

; File Name   : /home/danielsokil/Lab/HashSource/bitmain_antminer_binaries/S9k/poweroff_hashboard
; Format      : ELF for ARM (Executable)
; Imagebase   : 10000
; Interpreter '/lib/ld-linux-armhf.so.3'
; Needed Library 'libpthread.so.0'
; Needed Library 'libc.so.6'
;
; Options     : EF_ARM_VFP_FLOAT
; EABI version: 5
;
; Source File : '/home/tcwg-buildslave/workspace/tcwg-make-release_0/_build/builds/x86_64-unknown-linux-gnu/arm-linux-gnueabihf/glibc.git~release~2.25~master/csu/abi-note.o'
; Source File : '/home/tcwg-buildslave/workspace/tcwg-make-release_0/_build/builds/x86_64-unknown-linux-gnu/arm-linux-gnueabihf/glibc.git~release~2.25~master/csu/start.o'
; Source File : 'init.c'
; Source File : '/opt/toolchain/gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf/bin/../arm-linux-gnueabihf/libc/usr/lib/crti.o'
; Source File : '/opt/toolchain/gcc-linaro-7.4.1-2019.02-x86_64_arm-linux-gnueabihf/bin/../arm-linux-gnueabihf/libc/usr/lib/crtn.o'
; Source File : 'crtstuff.c'
; Source File : 'poweroff_hashboard.c'
; Source File : 'elf-init.c'
; Source File : 'crtstuff.c'

; Processor       : ARM
; ARM architecture: ARMv7-A
; Target assembler: Generic assembler for ARM
; Byte sex        : Little endian


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10000
CODE32
dword_10000 DCD 0x464C457F ; File format: \x7FELF
DCB 1                   ; File class: 32-bit
DCB 1                   ; Data encoding: little-endian
DCB 1                   ; File version
DCB 0                   ; OS/ABI: UNIX System V ABI
DCB 0                   ; ABI Version
DCB 0, 0, 0, 0, 0, 0, 0 ; Padding
DCW 2                   ; File type: Executable
DCW 0x28                ; Machine: ARM
DCD 1                   ; File version
DCD _start+1            ; Entry point
DCD 0x34                ; PHT file offset
DCD 0x2DD4              ; SHT file offset
DCD 0x5000400           ; Processor-specific flags
DCW 0x34                ; ELF header size
DCW 0x20                ; PHT entry size
DCW 9                   ; Number of entries in PHT
DCW 0x28                ; SHT entry size
DCW 0x25                ; Number of entries in SHT
DCW 0x24                ; SHT entry index for string table
; LOAD ends

; ELF32 Program Header
; PHT Entry 0

; Segment type: Pure code
AREA PHDR, CODE
; ORG 0x10034
CODE32
dword_10034 DCD 0x70000001 ; Type: EXIDX
DCD 0xD9C               ; File offset
DCD unk_10D9C           ; Virtual address
DCD 0x10D9C             ; Physical address
DCD 8                   ; Size in file image
DCD 8                   ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 1
DCD 6                   ; Type: PHDR
DCD 0x34                ; File offset
DCD dword_10034         ; Virtual address
DCD 0x10034             ; Physical address
DCD 0x120               ; Size in file image
DCD 0x120               ; Size in memory image
DCD 5                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 2
DCD 3                   ; Type: INTERP
DCD 0x154               ; File offset
DCD aLibLdLinuxArmh     ; Virtual address
DCD 0x10154             ; Physical address
DCD 0x19                ; Size in file image
DCD 0x19                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHT Entry 3
DCD 1                   ; Type: LOAD
DCD 0                   ; File offset
DCD dword_10000         ; Virtual address
DCD 0x10000             ; Physical address
DCD 0xDA8               ; Size in file image
DCD 0xDA8               ; Size in memory image
DCD 5                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 4
DCD 1                   ; Type: LOAD
DCD 0xF08               ; File offset
DCD __frame_dummy_init_array_entry ; Virtual address
DCD 0x20F08             ; Physical address
DCD 0x140               ; Size in file image
DCD 0x18C               ; Size in memory image
DCD 6                   ; Flags
DCD 0x10000             ; Alignment
; PHT Entry 5
DCD 2                   ; Type: DYNAMIC
DCD 0xF10               ; File offset
DCD _DYNAMIC            ; Virtual address
DCD 0x20F10             ; Physical address
DCD 0xF0                ; Size in file image
DCD 0xF0                ; Size in memory image
DCD 6                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 6
DCD 4                   ; Type: NOTE
DCD 0x170               ; File offset
DCD dword_10170         ; Virtual address
DCD 0x10170             ; Physical address
DCD 0x44                ; Size in file image
DCD 0x44                ; Size in memory image
DCD 4                   ; Flags
DCD 4                   ; Alignment
; PHT Entry 7
DCD 0x6474E551          ; Type: STACK
DCD 0                   ; File offset
DCD 0                   ; Virtual address
DCD 0                   ; Physical address
DCD 0                   ; Size in file image
DCD 0                   ; Size in memory image
DCD 6                   ; Flags
DCD 0x10                ; Alignment
; PHT Entry 8
DCD 0x6474E552          ; Type: RO-AFTER
DCD 0xF08               ; File offset
DCD __frame_dummy_init_array_entry ; Virtual address
DCD 0x20F08             ; Physical address
DCD 0xF8                ; Size in file image
DCD 0xF8                ; Size in memory image
DCD 4                   ; Flags
DCD 1                   ; Alignment
; PHDR ends


; Segment type: Pure code
AREA LOAD, CODE, ALIGN=0
; ORG 0x10154
CODE32
aLibLdLinuxArmh DCB "/lib/ld-linux-armhf.so.3",0
DCB 0, 0, 0
; ELF Note Entry
dword_10170 DCD 4       ; Name Size
DCD 0x10                ; Desc Size
DCD 1                   ; Type: NT_GNU_ABI_TAG
aGnu DCB "GNU",0        ; Name
DCD 0, 3, 2, 0          ; ABI: Linux 3.2.0
; ELF Note Entry
DCD 4                   ; Name Size
DCD 0x14                ; Desc Size
DCD 3                   ; Type: NT_GNU_BUILD_ID
aGnu_0 DCB "GNU",0      ; Name
DCB 0x16, 0xA9, 0x12, 0xCA, 0x84, 0x70, 0x39 ; Desc
DCB 0x81, 0x47, 0xBE, 0x7D, 0x98, 0x42, 0xDE
DCB 0xF3, 0x94, 0x90, 0xBD, 0xF, 0x5E
; ELF Hash Table
elf_hash_nbucket DCD 3
elf_hash_nchain DCD 0xF
elf_hash_bucket DCD 0xE, 0xC, 0xD
elf_hash_chain DCD 0, 0, 0, 0, 3, 4, 1, 2, 5, 7, 6, 8, 0xA
DCD 9, 0xB
; ELF Symbol Table
Elf32_Sym <0>
Elf32_Sym <aItmDeregistert - byte_102F4,\ ; "_ITM_deregisterTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aPrintf - byte_102F4, 0, 0, \ ; "printf"
           0x12, 0, 0>
Elf32_Sym <aUsleep+1 - byte_102F4, 0, 0,\ ; "sleep"
           0x12, 0, 0>
Elf32_Sym <aPerror - byte_102F4, 0, 0, \ ; "perror"
           0x12, 0, 0>
Elf32_Sym <aUsleep - byte_102F4, 0, 0, \ ; "usleep"
           0x12, 0, 0>
Elf32_Sym <aLibcStartMain - byte_102F4, \ ; "__libc_start_main"
           0, 0, 0x12, 0, 0>
Elf32_Sym <aSystem - byte_102F4, 0, 0, \ ; "system"
           0x12, 0, 0>
Elf32_Sym <aGmonStart - byte_102F4, 0, \ ; "__gmon_start__"
           0, 0x20, 0, 0>
Elf32_Sym <aOpen - byte_102F4, 0, 0, \ ; "open"
           0x12, 0, 0>
Elf32_Sym <aMmap - byte_102F4, 0, 0, \ ; "mmap"
           0x12, 0, 0>
Elf32_Sym <aMunmap - byte_102F4, 0, 0, \ ; "munmap"
           0x12, 0, 0>
Elf32_Sym <aItmRegistertmc - byte_102F4,\ ; "_ITM_registerTMCloneTable"
           0, 0, 0x20, 0, 0>
Elf32_Sym <aAbort - byte_102F4, 0, 0, \ ; "abort"
           0x12, 0, 0>
Elf32_Sym <aClose - byte_102F4, 0, 0, \ ; "close"
           0x12, 0, 0>
; ELF String Table
byte_102F4 DCB 0
aLibpthreadSo0 DCB "libpthread.so.0",0
aItmDeregistert DCB "_ITM_deregisterTMCloneTable",0
aItmRegistertmc DCB "_ITM_registerTMCloneTable",0
aClose DCB "close",0
aOpen DCB "open",0
aLibcSo6 DCB "libc.so.6",0
aPerror DCB "perror",0
aAbort DCB "abort",0
aPrintf DCB "printf",0
aMmap DCB "mmap",0
aSystem DCB "system",0
aMunmap DCB "munmap",0
aUsleep DCB "usleep",0
aLibcStartMain DCB "__libc_start_main",0
aGmonStart DCB "__gmon_start__",0
aGlibc24 DCB "GLIBC_2.4",0
DCB 0
; ELF GNU Symbol Version Table
DCW 0
DCW 0                   ; local  symbol: _ITM_deregisterTMCloneTable
DCW 2                   ; printf@@GLIBC_2.4
DCW 2                   ; sleep@@GLIBC_2.4
DCW 2                   ; perror@@GLIBC_2.4
DCW 2                   ; usleep@@GLIBC_2.4
DCW 2                   ; __libc_start_main@@GLIBC_2.4
DCW 2                   ; system@@GLIBC_2.4
DCW 0                   ; local  symbol: __gmon_start__
DCW 3                   ; open@@GLIBC_2.4
DCW 2                   ; mmap@@GLIBC_2.4
DCW 2                   ; munmap@@GLIBC_2.4
DCW 0                   ; local  symbol: _ITM_registerTMCloneTable
DCW 2                   ; abort@@GLIBC_2.4
DCW 3                   ; close@@GLIBC_2.4
; ELF GNU Symbol Version Requirements
Elf32_Verneed <1, 1, \  ; "libpthread.so.0"
               aLibpthreadSo0 - byte_102F4,\
               0x10, 0x20>
Elf32_Vernaux <0xD696914, 0, 3, \ ; "GLIBC_2.4"
               aGlibc24 - byte_102F4, 0>
Elf32_Verneed <1, 1, \  ; "libc.so.6"
               aLibcSo6 - byte_102F4, \
               0x10, 0>
Elf32_Vernaux <0xD696914, 0, 2, \ ; "GLIBC_2.4"
               aGlibc24 - byte_102F4, 0>
; ELF REL Relocation Table
Elf32_Rel <0x2103C, 0x815> ; R_ARM_GLOB_DAT __gmon_start__
; ELF JMPREL Relocation Table
Elf32_Rel <0x2100C, 0x216> ; R_ARM_JUMP_SLOT printf
Elf32_Rel <0x21010, 0x316> ; R_ARM_JUMP_SLOT sleep
Elf32_Rel <0x21014, 0x416> ; R_ARM_JUMP_SLOT perror
Elf32_Rel <0x21018, 0x516> ; R_ARM_JUMP_SLOT usleep
Elf32_Rel <0x2101C, 0x616> ; R_ARM_JUMP_SLOT __libc_start_main
Elf32_Rel <0x21020, 0x716> ; R_ARM_JUMP_SLOT system
Elf32_Rel <0x21024, 0x816> ; R_ARM_JUMP_SLOT __gmon_start__
Elf32_Rel <0x21028, 0x916> ; R_ARM_JUMP_SLOT open
Elf32_Rel <0x2102C, 0xA16> ; R_ARM_JUMP_SLOT mmap
Elf32_Rel <0x21030, 0xB16> ; R_ARM_JUMP_SLOT munmap
Elf32_Rel <0x21034, 0xD16> ; R_ARM_JUMP_SLOT abort
Elf32_Rel <0x21038, 0xE16> ; R_ARM_JUMP_SLOT close
; LOAD ends


; Segment type: Pure code
AREA .init, CODE
; ORG 0x10470
CODE32


; Alternative name is '_init'

; int init_proc()
EXPORT .init_proc
.init_proc
PUSH            {R3,LR}
BL              call_weak_fn
POP             {R3,PC}
; End of function .init_proc

; .init ends


; Segment type: Pure code
AREA .plt, CODE
; ORG 0x1047C
CODE32



; void sub_1047C()
sub_1047C
PUSH            {LR}
LDR             LR, =_GLOBAL_OFFSET_TABLE_ ; PIC mode
NOP
LDR             PC, [LR,#(off_21008 - 0x21000)]!
; End of function sub_1047C

off_1048C DCD _GLOBAL_OFFSET_TABLE_
; [0000000C BYTES: COLLAPSED FUNCTION printf]
; [0000000C BYTES: COLLAPSED FUNCTION sleep]
; [0000000C BYTES: COLLAPSED FUNCTION perror]
; [0000000C BYTES: COLLAPSED FUNCTION usleep]
; [0000000C BYTES: COLLAPSED FUNCTION __libc_start_main]
; [0000000C BYTES: COLLAPSED FUNCTION system]
; [0000000C BYTES: COLLAPSED FUNCTION __gmon_start__]
; [0000000C BYTES: COLLAPSED FUNCTION open]
; [0000000C BYTES: COLLAPSED FUNCTION mmap]
; [0000000C BYTES: COLLAPSED FUNCTION munmap]
; [0000000C BYTES: COLLAPSED FUNCTION abort]
; [0000000C BYTES: COLLAPSED FUNCTION close]

; Segment type: Pure code
AREA .text, CODE
; ORG 0x10520
CODE16


; Attributes: noreturn

; void __noreturn start(void (*)(), int, int, int, ...)
EXPORT _start
_start

arg_0=  0

MOV.W           R11, #0
MOV.W           LR, #0
POP             {R1}    ; argc
MOV             R2, SP  ; ubp_av
PUSH            {R2}    ; stack_end
PUSH            {R0}    ; rtld_fini
LDR.W           R12, =(__libc_csu_fini+1)
PUSH.W          {R12}   ; fini
LDR             R0, =(main+1) ; main
LDR             R3, =(init+1) ; init
BLX             __libc_start_main
BLX             abort
; End of function _start

off_10544 DCD __libc_csu_fini+1
off_10548 DCD main+1
off_1054C DCD init+1
CODE32



; int call_weak_fn()
call_weak_fn
LDR             R3, =(_GLOBAL_OFFSET_TABLE_ - 0x10560)
LDR             R2, =(__gmon_start___ptr_0 - 0x21000)
ADD             R3, PC, R3 ; _GLOBAL_OFFSET_TABLE_
LDR             R2, [R3,R2] ; __imp___gmon_start__
CMP             R2, #0
BXEQ            LR
B               __gmon_start__
; End of function call_weak_fn

off_1056C DCD _GLOBAL_OFFSET_TABLE_ - 0x10560
off_10570 DCD __gmon_start___ptr_0 - 0x21000
CODE16



; char *deregister_tm_clones()
deregister_tm_clones
MOVW            R0, #:lower16:__TMC_END__
MOVW            R3, #:lower16:__TMC_END__
MOVT            R0, #:upper16:__TMC_END__
MOVT            R3, #:upper16:__TMC_END__
CMP             R3, R0
BEQ             locret_10594
MOV             R3, #0
CBZ             R3, locret_10594
BX              R3

locret_10594
BX              LR
; End of function deregister_tm_clones

ALIGN 4



; __int64 register_tm_clones()
register_tm_clones
MOVW            R0, #:lower16:__TMC_END__
MOVW            R1, #:lower16:__TMC_END__
MOVT            R0, #:upper16:__TMC_END__
MOVT            R1, #:upper16:__TMC_END__
SUBS            R1, R1, R0
ASRS            R1, R1, #2
ADD.W           R1, R1, R1,LSR#31
ASRS            R1, R1, #1
BEQ             locret_105C0
MOV             R3, #0
CBZ             R3, locret_105C0
BX              R3

locret_105C0
BX              LR
; End of function register_tm_clones

ALIGN 4



; char *_do_global_dtors_aux()
__do_global_dtors_aux
PUSH            {R4,LR}
MOV             R4, #__TMC_END__
LDRB            R3, [R4]
CBNZ            R3, locret_105DA
BL              deregister_tm_clones
MOVS            R3, #1
STRB            R3, [R4]

locret_105DA
POP             {R4,PC}
; End of function __do_global_dtors_aux




frame_dummy
B               register_tm_clones
; End of function frame_dummy

ALIGN 0x10


; Attributes: bp-based frame fpd=0x10

; int check_chain_num()
EXPORT check_chain_num
check_chain_num

var_C= -0xC
var_8= -8
var_4= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x10
ADD             R7, SP, #0
MOV.W           R3, #0xFFFFFFFF
STR             R3, [R7,#0x10+var_C]
MOVS            R3, #0
STR             R3, [R7,#0x10+var_8]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #8
LDR             R3, [R3]
STR             R3, [R7,#0x10+var_C]
LDR             R3, [R7,#0x10+var_C]
CMP             R3, #0
BGE             loc_1060A
MOVS            R3, #0
B               loc_10672

loc_1060A
MOVS            R3, #0
STR             R3, [R7,#0x10+var_4]
B               loc_1065C

loc_10610
LDR             R2, [R7,#0x10+var_C]
LDR             R3, [R7,#0x10+var_4]
ASR.W           R3, R2, R3
AND.W           R3, R3, #1
CMP             R3, #0
BEQ             loc_10646
MOV             R3, #chain_list
LDR             R2, [R7,#0x10+var_4]
MOVS            R1, #1
STR.W           R1, [R3,R2,LSL#2]
LDR             R1, [R7,#0x10+var_4]
MOV             R0, #aChainD ; "chain[%d] "
BLX             printf
LDR             R3, [R7,#0x10+var_8]
ADDS            R3, #1
STR             R3, [R7,#0x10+var_8]
B               loc_10656

loc_10646
MOV             R3, #chain_list
LDR             R2, [R7,#0x10+var_4]
MOVS            R1, #0
STR.W           R1, [R3,R2,LSL#2]

loc_10656
LDR             R3, [R7,#0x10+var_4]
ADDS            R3, #1
STR             R3, [R7,#0x10+var_4]

loc_1065C
LDR             R3, [R7,#0x10+var_4]
CMP             R3, #0xF
BLE             loc_10610
LDR             R1, [R7,#0x10+var_8]
MOV             R0, #aFoundDChainTot ; "found, %d chain total\n"
BLX             printf
LDR             R3, [R7,#0x10+var_8]

loc_10672
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function check_chain_num



; Attributes: bp-based frame fpd=0xC

; int get_iic()
EXPORT get_iic
get_iic

var_8= -8

PUSH            {R7}
SUB             SP, SP, #0xC
ADD             R7, SP, #0
MOV.W           R3, #0xFFFFFFFF
STR             R3, [R7,#0xC+var_8]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #0x30 ; '0'
LDR             R3, [R3]
STR             R3, [R7,#0xC+var_8]
LDR             R3, [R7,#0xC+var_8]
MOV             R0, R3
ADDS            R7, #0xC
MOV             SP, R7
POP.W           {R7}
BX              LR
; End of function get_iic



; Attributes: bp-based frame fpd=0x18

; int __fastcall set_iic(int)
EXPORT set_iic
set_iic

var_14= -0x14
var_9= -9
var_8= -8
var_4= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #0
STR             R0, [R7,#0x18+var_14]
MOVS            R3, #0
STR             R3, [R7,#0x18+var_8]
MOVS            R3, #0
STRB            R3, [R7,#0x18+var_9]
MOVS            R3, #0
STR             R3, [R7,#0x18+var_4]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #0x30 ; '0'
LDR             R2, [R7,#0x18+var_14]
BIC.W           R2, R2, #0xC0000000
STR             R2, [R3]

loc_106CC
BL              get_iic
STR             R0, [R7,#0x18+var_8]
LDR             R3, [R7,#0x18+var_8]
CMP             R3, #0
BGE             loc_106E0
LDR             R3, [R7,#0x18+var_8]
STRB            R3, [R7,#0x18+var_9]
LDRB            R3, [R7,#0x18+var_9]
B               loc_10706

loc_106E0
LDR             R3, [R7,#0x18+var_4]
ADDS            R2, R3, #1
STR             R2, [R7,#0x18+var_4]
CMP             R3, #0x64 ; 'd'
BLE             loc_106FC
LDR             R1, [R7,#0x18+var_8]
MOV             R0, #aCouldNotGetIic ; "could not get iic, ret = 0x%08x\n"
BLX             printf
MOVS            R3, #0
B               loc_10706

loc_106FC               ; useconds
MOVW            R0, #0x1388
BLX             usleep
B               loc_106CC

loc_10706
MOV             R0, R3
ADDS            R7, #0x18
MOV             SP, R7
POP             {R7,PC}
; End of function set_iic



; Attributes: bp-based frame fpd=0x14

; int __fastcall zynq_set_iic(unsigned __int8, unsigned __int8, char, char, unsigned __int8, unsigned __int8)
EXPORT zynq_set_iic
zynq_set_iic

var_10= -0x10
var_F= -0xF
var_E= -0xE
var_D= -0xD
var_8= -8
arg_0=  0xC
arg_4=  0x10

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x14
ADD             R7, SP, #0
MOV             R4, R0
MOV             R0, R1
MOV             R1, R2
MOV             R2, R3
MOV             R3, R4
STRB            R3, [R7,#0x14+var_D]
MOV             R3, R0
STRB            R3, [R7,#0x14+var_E]
MOV             R3, R1
STRB            R3, [R7,#0x14+var_F]
MOV             R3, R2
STRB            R3, [R7,#0x14+var_10]
MOVS            R3, #0
STR             R3, [R7,#0x14+var_8]
LDRB            R3, [R7,#0x14+var_F]
CMP             R3, #0
BEQ             loc_1073E
LDR             R3, [R7,#0x14+var_8]
ORR.W           R3, R3, #0x2000000
STR             R3, [R7,#0x14+var_8]

loc_1073E
LDRB            R3, [R7,#0x14+var_10]
CMP             R3, #0
BEQ             loc_1075A
LDRB.W          R3, [R7,#0x14+arg_0]
LSLS            R3, R3, #8
MOV             R2, R3
LDR             R3, [R7,#0x14+var_8]
ORRS            R3, R2
STR             R3, [R7,#0x14+var_8]
LDR             R3, [R7,#0x14+var_8]
ORR.W           R3, R3, #0x1000000
STR             R3, [R7,#0x14+var_8]

loc_1075A
LDRB            R3, [R7,#0x14+var_E]
LSLS            R3, R3, #0x1A
AND.W           R3, R3, #0xC000000
LDR             R2, [R7,#0x14+var_8]
ORRS            R3, R2
STR             R3, [R7,#0x14+var_8]
LDRB            R3, [R7,#0x14+var_D]
LSRS            R3, R3, #3
UXTB            R3, R3
LSLS            R3, R3, #0x14
AND.W           R3, R3, #0xF00000
LDR             R2, [R7,#0x14+var_8]
ORRS            R3, R2
STR             R3, [R7,#0x14+var_8]
LDRB            R3, [R7,#0x14+var_D]
LSLS            R3, R3, #0x10
AND.W           R3, R3, #0x70000
LDR             R2, [R7,#0x14+var_8]
ORRS            R3, R2
STR             R3, [R7,#0x14+var_8]
LDRB.W          R3, [R7,#0x14+arg_4]
LDR             R2, [R7,#0x14+var_8]
ORRS            R3, R2
STR             R3, [R7,#0x14+var_8]
LDR             R0, [R7,#0x14+var_8]
BL              set_iic
MOV             R3, R0
MOV             R0, R3
ADDS            R7, #0x14
MOV             SP, R7
POP             {R4,R7,PC}
; End of function zynq_set_iic



; Attributes: bp-based frame fpd=0x10

; int __fastcall write_pic_iic(char, unsigned __int8)
EXPORT write_pic_iic
write_pic_iic

var_18= -0x18
var_14= -0x14
var_A= -0xA
var_9= -9
var_4= -4
var_3= -3
var_2= -2
var_1= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #8
MOV             R3, R0
MOV             R2, R1
STRB            R3, [R7,#0x10+var_9]
MOV             R3, R2
STRB            R3, [R7,#0x10+var_A]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_1]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_2]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_3]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_4]
LDRB            R3, [R7,#0x10+var_9]
CMP             R3, #1
BNE             loc_107CE
MOVS            R3, #2
STRB            R3, [R7,#0x10+var_9]
B               loc_107D8

loc_107CE
LDRB            R3, [R7,#0x10+var_9]
CMP             R3, #2
BNE             loc_107D8
MOVS            R3, #1
STRB            R3, [R7,#0x10+var_9]

loc_107D8
LDRSB.W         R3, [R7,#0x10+var_9]
AND.W           R3, R3, #7
SXTB            R3, R3
ORR.W           R3, R3, #0x20 ; ' '
SXTB            R3, R3
STRB            R3, [R7,#0x10+var_1]
LDRB            R2, [R7,#0x10+var_3]
LDRB            R1, [R7,#0x10+var_2]
LDRB            R0, [R7,#0x10+var_1]
LDRB            R3, [R7,#0x10+var_A]
STR             R3, [SP,#0x18+var_14]
LDRB            R3, [R7,#0x10+var_4]
STR             R3, [SP,#0x18+var_18]
MOV             R3, R2
MOVS            R2, #0
BL              zynq_set_iic
MOV             R3, R0
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function write_pic_iic



; Attributes: bp-based frame fpd=0x10

; int __fastcall read_pic_iic(char)
EXPORT read_pic_iic
read_pic_iic

var_18= -0x18
var_14= -0x14
var_9= -9
var_4= -4
var_3= -3
var_2= -2
var_1= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #8
MOV             R3, R0
STRB            R3, [R7,#0x10+var_9]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_1]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_2]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_3]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_4]
LDRB            R3, [R7,#0x10+var_9]
CMP             R3, #1
BNE             loc_10830
MOVS            R3, #2
STRB            R3, [R7,#0x10+var_9]
B               loc_1083A

loc_10830
LDRB            R3, [R7,#0x10+var_9]
CMP             R3, #2
BNE             loc_1083A
MOVS            R3, #1
STRB            R3, [R7,#0x10+var_9]

loc_1083A
LDRSB.W         R3, [R7,#0x10+var_9]
AND.W           R3, R3, #7
SXTB            R3, R3
ORR.W           R3, R3, #0x20 ; ' '
SXTB            R3, R3
STRB            R3, [R7,#0x10+var_1]
LDRB            R2, [R7,#0x10+var_3]
LDRB            R1, [R7,#0x10+var_2]
LDRB            R0, [R7,#0x10+var_1]
MOVS            R3, #0
STR             R3, [SP,#0x18+var_14]
LDRB            R3, [R7,#0x10+var_4]
STR             R3, [SP,#0x18+var_18]
MOV             R3, R2
MOVS            R2, #1
BL              zynq_set_iic
MOV             R3, R0
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function read_pic_iic



; Attributes: bp-based frame fpd=0x1C

; int __fastcall send_pic_cmd(char, int, unsigned __int8, int, unsigned __int8)
EXPORT send_pic_cmd
send_pic_cmd

var_18= -0x18
var_14= -0x14
var_E= -0xE
var_D= -0xD
var_C= -0xC
var_A= -0xA
var_8= -8
arg_0=  0xC

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x1C
ADD             R7, SP, #0
STR             R1, [R7,#0x1C+var_14]
STR             R3, [R7,#0x1C+var_18]
MOV             R3, R0
STRB            R3, [R7,#0x1C+var_D]
MOV             R3, R2
STRB            R3, [R7,#0x1C+var_E]
MOVS            R3, #0
STR             R3, [R7,#0x1C+var_8]
MOV             R3, #word_10CA4
LDRH            R3, [R3]
STRH            R3, [R7,#0x1C+var_C]
MOVS            R3, #0
STRH            R3, [R7,#0x1C+var_A]
LDRB            R3, [R7,#0x1C+var_E]
UXTH            R2, R3
LDRH            R3, [R7,#0x1C+var_A]
ADD             R3, R2
UXTH            R3, R3
ADDS            R3, #3
STRH            R3, [R7,#0x1C+var_A]
MOVS            R3, #0
STR             R3, [R7,#0x1C+var_8]
B               loc_108BC

loc_108A6
LDR             R3, [R7,#0x1C+var_8]
LDR             R2, [R7,#0x1C+var_14]
ADD             R3, R2
LDRB            R3, [R3]
UXTH            R2, R3
LDRH            R3, [R7,#0x1C+var_A]
ADD             R3, R2
STRH            R3, [R7,#0x1C+var_A]
LDR             R3, [R7,#0x1C+var_8]
ADDS            R3, #1
STR             R3, [R7,#0x1C+var_8]

loc_108BC
LDRB            R3, [R7,#0x1C+var_E]
LDR             R2, [R7,#0x1C+var_8]
CMP             R2, R3
BLT             loc_108A6
LDRH            R3, [R7,#0x1C+var_A]
LSRS            R3, R3, #8
UXTH            R3, R3
UXTB            R3, R3
STRB            R3, [R7,#0x1C+var_C]
LDRH            R3, [R7,#0x1C+var_A]
UXTB            R3, R3
STRB            R3, [R7,#0x1C+var_C+1]
LDRB            R3, [R7,#0x1C+var_D]
MOVS            R1, #0x55 ; 'U'
MOV             R0, R3
BL              write_pic_iic
LDRB            R3, [R7,#0x1C+var_D]
MOVS            R1, #0xAA
MOV             R0, R3
BL              write_pic_iic
LDRB            R3, [R7,#0x1C+var_E]
ADDS            R3, #3
UXTB            R2, R3
LDRB            R3, [R7,#0x1C+var_D]
MOV             R1, R2
MOV             R0, R3
BL              write_pic_iic
MOVS            R3, #0
STR             R3, [R7,#0x1C+var_8]
B               loc_10916

loc_108FE
LDR             R3, [R7,#0x1C+var_8]
LDR             R2, [R7,#0x1C+var_14]
ADD             R3, R2
LDRB            R2, [R3]
LDRB            R3, [R7,#0x1C+var_D]
MOV             R1, R2
MOV             R0, R3
BL              write_pic_iic
LDR             R3, [R7,#0x1C+var_8]
ADDS            R3, #1
STR             R3, [R7,#0x1C+var_8]

loc_10916
LDRB            R3, [R7,#0x1C+var_E]
LDR             R2, [R7,#0x1C+var_8]
CMP             R2, R3
BLT             loc_108FE
LDRB            R2, [R7,#0x1C+var_C]
LDRB            R3, [R7,#0x1C+var_D]
MOV             R1, R2
MOV             R0, R3
BL              write_pic_iic
LDRB            R2, [R7,#0x1C+var_C+1]
LDRB            R3, [R7,#0x1C+var_D]
MOV             R1, R2
MOV             R0, R3
BL              write_pic_iic
MOV             R0, #0x86470 ; useconds
BLX             usleep
MOVS            R3, #0
STR             R3, [R7,#0x1C+var_8]
B               loc_10960

loc_10948
LDR             R3, [R7,#0x1C+var_8]
LDR             R2, [R7,#0x1C+var_18]
ADDS            R4, R2, R3
LDRB            R3, [R7,#0x1C+var_D]
MOV             R0, R3
BL              read_pic_iic
MOV             R3, R0
STRB            R3, [R4]
LDR             R3, [R7,#0x1C+var_8]
ADDS            R3, #1
STR             R3, [R7,#0x1C+var_8]

loc_10960
LDRB.W          R3, [R7,#0x1C+arg_0]
LDR             R2, [R7,#0x1C+var_8]
CMP             R2, R3
BLT             loc_10948
NOP
ADDS            R7, #0x1C
MOV             SP, R7
POP             {R4,R7,PC}
; End of function send_pic_cmd



; Attributes: bp-based frame fpd=0x18

; int __fastcall dsPIC33EP16GS202_enable_pic_dc_dc(unsigned __int8, unsigned __int8)
EXPORT dsPIC33EP16GS202_enable_pic_dc_dc
dsPIC33EP16GS202_enable_pic_dc_dc

var_20= -0x20
var_12= -0x12
var_11= -0x11
var_C= -0xC
var_B= -0xB
var_8= -8
var_7= -7
var_4= -4

PUSH            {R7,LR}
SUB             SP, SP, #0x20
ADD             R7, SP, #8
MOV             R3, R0
MOV             R2, R1
STRB            R3, [R7,#0x18+var_11]
MOV             R3, R2
STRB            R3, [R7,#0x18+var_12]
MOVS            R3, #0
STR             R3, [R7,#0x18+var_4]
MOVS            R3, #0x15
STRB            R3, [R7,#0x18+var_C]
LDRB            R3, [R7,#0x18+var_12]
STRB            R3, [R7,#0x18+var_B]

loc_1098E
LDR             R3, [R7,#0x18+var_4]
ADDS            R3, #1
STR             R3, [R7,#0x18+var_4]
ADD.W           R2, R7, #0x18+var_8
ADD.W           R1, R7, #0x18+var_C
LDRB            R0, [R7,#0x18+var_11]
MOVS            R3, #2
STR             R3, [SP,#0x20+var_20]
MOV             R3, R2
MOVS            R2, #2
BL              send_pic_cmd
LDRB            R3, [R7,#0x18+var_8]
CMP             R3, #0x15
BNE             loc_109CC
LDRB            R3, [R7,#0x18+var_7]
CMP             R3, #1
BNE             loc_109CC
LDRB            R3, [R7,#0x18+var_11]
LDRB            R2, [R7,#0x18+var_12]
MOV             R1, R3
MOV             R0, #aSetChainDDcPow ; "set chain[%d] dc power to [%d] ok!\n"
BLX             printf
MOVS            R3, #0
B               loc_10A06

loc_109CC
LDR             R3, [R7,#0x18+var_4]
CMP             R3, #2
BLE             loc_109FE
LDRB            R3, [R7,#0x18+var_11]
LDR             R2, [R7,#0x18+var_4]
MOV             R1, R3
MOV             R0, #aErrorFailedOnC ; "ERROR! failed on chain[%d] after %d tim"...
BLX             printf
LDRB            R3, [R7,#0x18+var_8]
MOV             R1, R3
LDRB            R3, [R7,#0x18+var_7]
MOV             R2, R3
MOV             R0, #aDebug0x08x0x08 ; "DEBUG! 0x%08x, 0x%08x\n"
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10A06

loc_109FE               ; seconds
MOVS            R0, #1
BLX             sleep
B               loc_1098E

loc_10A06
MOV             R0, R3
ADDS            R7, #0x18
MOV             SP, R7
POP             {R7,PC}
; End of function dsPIC33EP16GS202_enable_pic_dc_dc



; Attributes: bp-based frame fpd=8

; int __fastcall enable_pic_dac(unsigned __int8)
EXPORT enable_pic_dac
enable_pic_dac

var_1= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#8+var_1]
LDRB            R3, [R7,#8+var_1]
MOVS            R1, #1
MOV             R0, R3
BL              dsPIC33EP16GS202_enable_pic_dc_dc
NOP
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function enable_pic_dac



; Attributes: bp-based frame fpd=8

; int __fastcall disable_pic_dac(unsigned __int8)
EXPORT disable_pic_dac
disable_pic_dac

var_1= -1

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#8+var_1]
LDRB            R3, [R7,#8+var_1]
MOVS            R1, #0
MOV             R0, R3
BL              dsPIC33EP16GS202_enable_pic_dc_dc
NOP
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function disable_pic_dac



; Attributes: bp-based frame fpd=0xC

; int get_fan_control()
EXPORT get_fan_control
get_fan_control

var_8= -8

PUSH            {R7}
SUB             SP, SP, #0xC
ADD             R7, SP, #0
MOV.W           R3, #0xFFFFFFFF
STR             R3, [R7,#0xC+var_8]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #0x84
LDR             R3, [R3]
STR             R3, [R7,#0xC+var_8]
LDR             R3, [R7,#0xC+var_8]
MOV             R0, R3
ADDS            R7, #0xC
MOV             SP, R7
POP.W           {R7}
BX              LR
; End of function get_fan_control



; Attributes: bp-based frame fpd=8

; int __fastcall set_fan_control(int)
EXPORT set_fan_control
set_fan_control

var_4= -4

PUSH            {R7,LR}
SUB             SP, SP, #8
ADD             R7, SP, #0
STR             R0, [R7,#8+var_4]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
ADDS            R3, #0x84
LDR             R2, [R7,#8+var_4]
STR             R2, [R3]
BL              get_fan_control
NOP
ADDS            R7, #8
MOV             SP, R7
POP             {R7,PC}
; End of function set_fan_control



; Attributes: bp-based frame fpd=0x1C

; int __fastcall set_PWM(unsigned __int8)
EXPORT set_PWM
set_PWM

var_15= -0x15
var_10= -0x10
var_C= -0xC
var_8= -8
var_6= -6

PUSH            {R4,R7,LR}
SUB             SP, SP, #0x1C
ADD             R7, SP, #0
MOV             R3, R0
STRB            R3, [R7,#0x1C+var_15]
MOVS            R3, #0
STRH            R3, [R7,#0x1C+var_6]
MOVS            R3, #0
STRH            R3, [R7,#0x1C+var_8]
MOVS            R3, #0
STR             R3, [R7,#0x1C+var_C]
LDRB            R3, [R7,#0x1C+var_15]
STR             R3, [R7,#0x1C+var_C]
LDR             R3, [R7,#0x1C+var_C]
MOVS            R2, #0x32 ; '2'
MUL             R2, R2, R3
MOV             R3, #0x51EB851F
SMULL           R3, R4, R2, R3
ASRS            R1, R4, #5
ASRS            R3, R2, #0x1F
SUBS            R3, R1, R3
STRH            R3, [R7,#0x1C+var_6]
LDR             R3, [R7,#0x1C+var_C]
RSB.W           R3, R3, #0x64 ; 'd'
MOVS            R2, #0x32 ; '2'
MUL             R2, R2, R3
MOV             R3, #0x51EB851F
SMULL           R3, R4, R2, R3
ASRS            R1, R4, #5
ASRS            R3, R2, #0x1F
SUBS            R3, R1, R3
STRH            R3, [R7,#0x1C+var_8]
LDRH            R3, [R7,#0x1C+var_6]
LSLS            R2, R3, #0x10
LDRH            R3, [R7,#0x1C+var_8]
ORRS            R3, R2
STR             R3, [R7,#0x1C+var_10]
LDR             R0, [R7,#0x1C+var_10]
BL              set_fan_control
NOP
ADDS            R7, #0x1C
MOV             SP, R7
POP             {R4,R7,PC}
; End of function set_PWM



; Attributes: bp-based frame fpd=0x10

; int __fastcall main(int argc, const char **argv, const char **envp)
EXPORT main
main

fd= -0x18
offset= -0x14
var_10= -0x10
var_C= -0xC
var_8= -8
var_1= -1

PUSH            {R7,LR}
SUB             SP, SP, #0x18
ADD             R7, SP, #8
STR             R0, [R7,#0x10+var_C]
STR             R1, [R7,#0x10+var_10]
MOVS            R3, #0
STR             R3, [R7,#0x10+var_8]
MOVS            R1, #2  ; oflag
MOV             R0, #aDevAxiFpgaDev ; "/dev/axi_fpga_dev"
BLX             open
STR             R0, [R7,#0x10+var_8]
LDR             R3, [R7,#0x10+var_8]
CMP             R3, #0
BGE             loc_10B46
LDR             R1, [R7,#0x10+var_8]
MOV             R0, #aDevAxiFpgaDevO ; "/dev/axi_fpga_dev open failed. fd = %d"...
BLX             printf
MOV             R0, #aOpen_0 ; "open"
BLX             perror
MOV.W           R3, #0xFFFFFFFF
B               loc_10C08

loc_10B46
MOVS            R3, #0
STR             R3, [SP,#0x18+offset] ; offset
LDR             R3, [R7,#0x10+var_8]
STR             R3, [SP,#0x18+fd] ; fd
MOVS            R3, #1  ; flags
MOVS            R2, #3  ; prot
MOV.W           R1, #0x160 ; len
MOVS            R0, #0  ; addr
BLX             mmap
MOV             R2, R0
MOV             R3, #axi_fpga_addr
STR             R2, [R3]
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
CMP             R3, #0
BNE             loc_10B94
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
MOV             R1, R3
MOV             R0, #aMmapAxiFpgaAdd ; "mmap axi_fpga_addr failed. axi_fpga_add"...
BLX             printf
MOV.W           R3, #0xFFFFFFFF
B               loc_10C08

loc_10B94
MOV             R0, #aKillallCgminer ; "killall cgminer"
BLX             system
BL              check_chain_num
MOV             R2, R0
MOV             R3, #chain_num
STR             R2, [R3]
MOVS            R3, #0
STRB            R3, [R7,#0x10+var_1]
B               loc_10BD6

loc_10BB6
LDRB            R2, [R7,#0x10+var_1]
MOV             R3, #chain_list
LDR.W           R3, [R3,R2,LSL#2]
CMP             R3, #0
BEQ             loc_10BD0
LDRB            R3, [R7,#0x10+var_1]
MOV             R0, R3
BL              disable_pic_dac

loc_10BD0
LDRB            R3, [R7,#0x10+var_1]
ADDS            R3, #1
STRB            R3, [R7,#0x10+var_1]

loc_10BD6
LDRB            R2, [R7,#0x10+var_1]
MOV             R3, #chain_num
LDR             R3, [R3]
CMP             R2, R3
BLT             loc_10BB6
MOVS            R0, #0x64 ; 'd'
BL              set_PWM
MOV             R3, #axi_fpga_addr
LDR             R3, [R3]
MOV.W           R1, #0x160 ; len
MOV             R0, R3  ; addr
BLX             munmap
LDR             R0, [R7,#0x10+var_8] ; fd
BLX             close
MOVS            R3, #0

loc_10C08
MOV             R0, R3
ADDS            R7, #0x10
MOV             SP, R7
POP             {R7,PC}
; End of function main




; void __fastcall init(int argc, char **argv, char **envp)
EXPORT init
init
argc = R0               ; int
argv = R1               ; char **
envp = R2               ; char **
PUSH.W          {R3-R9,LR}
MOV             R7, argc
LDR             R6, =(__do_global_dtors_aux_fini_array_entry - 0x10C22)
MOV             R8, argv
MOV             R9, envp
LDR             R5, =(__frame_dummy_init_array_entry - 0x10C28)
ADD             R6, PC  ; __do_global_dtors_aux_fini_array_entry
BLX             .init_proc
ADD             R5, PC  ; __frame_dummy_init_array_entry
SUBS            R6, R6, R5
ASRS            R6, R6, #2
size = R6               ; const size_t
BEQ             locret_10C40
MOVS            R4, #0

loc_10C2E
i = R4                  ; size_t
ADDS            i, #1
LDR.W           R3, [R5],#4
MOV             R2, envp
MOV             R1, argv
MOV             R0, argc
BLX             R3
i = R4                  ; size_t
CMP             size, i
BNE             loc_10C2E

locret_10C40
POP.W           {R3-envp,PC}
; End of function init

off_10C44 DCD __do_global_dtors_aux_fini_array_entry - 0x10C22
off_10C48 DCD __frame_dummy_init_array_entry - 0x10C28



; void _libc_csu_fini()
EXPORT __libc_csu_fini
__libc_csu_fini
BX              LR
; End of function __libc_csu_fini

ALIGN 0x10
; .text ends


; Segment type: Pure code
AREA .fini, CODE
; ORG 0x10C50
CODE32


; Alternative name is '_fini'

; void term_proc()
EXPORT .term_proc
.term_proc
PUSH            {R3,LR}
POP             {R3,PC}
; End of function .term_proc

; .fini ends


; Segment type: Pure data
AREA .rodata, DATA, READONLY
; ORG 0x10C58
EXPORT _IO_stdin_used
; const int IO_stdin_used
_IO_stdin_used DCD 0x20001
aChainD DCB "chain[%d] ",0
ALIGN 4
aFoundDChainTot DCB "found, %d chain total",0xA,0
ALIGN 0x10
aCouldNotGetIic DCB "could not get iic, ret = 0x%08x",0xA
DCB 0
ALIGN 4
word_10CA4 DCW 0xFFFF
ALIGN 4
aSetChainDDcPow DCB "set chain[%d] dc power to [%d] ok!"
DCB 0xA,0
aErrorFailedOnC DCB "ERROR! failed on chain[%d] after %"
DCB "d times try!",0xA,0
aDebug0x08x0x08 DCB "DEBUG! 0x%08x, 0x%08x",0xA,0
ALIGN 4
aDevAxiFpgaDev DCB "/dev/axi_fpga_dev",0
ALIGN 4
aDevAxiFpgaDevO DCB "/dev/axi_fpga_dev open failed. fd "
DCB "= %d",0xA,0
aOpen_0 DCB "open",0
ALIGN 4
aMmapAxiFpgaAdd DCB "mmap axi_fpga_addr failed. axi_fpg"
DCB "a_addr = 0x%lsx",0xA,0
ALIGN 4
aKillallCgminer DCB "killall cgminer",0
; .rodata ends


; Segment type: Pure data
AREA .ARM.exidx, DATA, READONLY
; ORG 0x10D9C
unk_10D9C DCB 0x84
DCB 0xF7
DCB 0xFF
DCB 0x7F ; 
DCB    1
DCB    0
DCB    0
DCB    0
; .ARM.exidx ends


; Segment type: Pure data
AREA .eh_frame, DATA, READONLY
; ORG 0x10DA4
__FRAME_END__ ALIGN 8
; .eh_frame ends

; ELF Initialization Function Table

; Segment type: Pure data
AREA .init_array, DATA
; ORG 0x20F08
__frame_dummy_init_array_entry DCD frame_dummy+1 ; Alternative name is '__init_array_start'
; .init_array ends

; ELF Termination Function Table

; Segment type: Pure data
AREA .fini_array, DATA
; ORG 0x20F0C
__do_global_dtors_aux_fini_array_entry DCD __do_global_dtors_aux+1 ; Alternative name is '__init_array_end'
; .fini_array ends

; ELF Dynamic Information

; Segment type: Pure data
AREA LOAD, DATA, ALIGN=0
; ORG 0x20F10
_DYNAMIC Elf32_Dyn <1, <1>> ; DT_NEEDED libpthread.so.0
Elf32_Dyn <1, <0x52>>   ; DT_NEEDED libc.so.6
Elf32_Dyn <0xC, <0x10470>> ; DT_INIT
Elf32_Dyn <0xD, <0x10C50>> ; DT_FINI
Elf32_Dyn <0x19, <0x20F08>> ; DT_INIT_ARRAY
Elf32_Dyn <0x1B, <4>>   ; DT_INIT_ARRAYSZ
Elf32_Dyn <0x1A, <0x20F0C>> ; DT_FINI_ARRAY
Elf32_Dyn <0x1C, <4>>   ; DT_FINI_ARRAYSZ
Elf32_Dyn <4, <0x101B4>> ; DT_HASH
Elf32_Dyn <5, <0x102F4>> ; DT_STRTAB
Elf32_Dyn <6, <0x10204>> ; DT_SYMTAB
Elf32_Dyn <0xA, <0xB5>> ; DT_STRSZ
Elf32_Dyn <0xB, <0x10>> ; DT_SYMENT
Elf32_Dyn <0x15, <0>>   ; DT_DEBUG
Elf32_Dyn <3, <0x21000>> ; DT_PLTGOT
Elf32_Dyn <2, <0x60>>   ; DT_PLTRELSZ
Elf32_Dyn <0x14, <0x11>> ; DT_PLTREL
Elf32_Dyn <0x17, <0x10410>> ; DT_JMPREL
Elf32_Dyn <0x11, <0x10408>> ; DT_REL
Elf32_Dyn <0x12, <8>>   ; DT_RELSZ
Elf32_Dyn <0x13, <8>>   ; DT_RELENT
Elf32_Dyn <0x6FFFFFFE, <0x103C8>> ; DT_VERNEED
Elf32_Dyn <0x6FFFFFFF, <2>> ; DT_VERNEEDNUM
Elf32_Dyn <0x6FFFFFF0, <0x103AA>> ; DT_VERSYM
Elf32_Dyn <0>           ; DT_NULL
ALIGN 0x40
; LOAD ends


; Segment type: Pure data
AREA .got, DATA
; ORG 0x21000
_GLOBAL_OFFSET_TABLE_ DCD _DYNAMIC
DCD 0
off_21008 DCD 0
printf_ptr DCD __imp_printf
sleep_ptr DCD __imp_sleep
perror_ptr DCD __imp_perror
usleep_ptr DCD __imp_usleep
__libc_start_main_ptr DCD __imp___libc_start_main
system_ptr DCD __imp_system
__gmon_start___ptr DCD __imp___gmon_start__
open_ptr DCD __imp_open
mmap_ptr DCD __imp_mmap
munmap_ptr DCD __imp_munmap
abort_ptr DCD __imp_abort
close_ptr DCD __imp_close
__gmon_start___ptr_0 DCD __imp___gmon_start__
; .got ends


; Segment type: Pure data
AREA .data, DATA
; ORG 0x21040
EXPORT __data_start
__data_start DCB    0
DCB    0
DCB    0
DCB    0
EXPORT __dso_handle
__dso_handle ALIGN 8
; .data ends


; Segment type: Uninitialized
AREA .bss, DATA
; ORG 0x21048
EXPORT __TMC_END__
__TMC_END__ % 1         ; Alternative name is 'completed.10540'
                        ; Alternative name is '__bss_start__'
                        ; Alternative name is '_edata'
                        ; Alternative name is '__bss_start'
ALIGN 4
EXPORT chain_num
chain_num % 4
EXPORT axi_fpga_addr
axi_fpga_addr % 4
EXPORT chain_list
; _DWORD chain_list[16]
chain_list % 0x40
; .bss ends


; Segment type: Zero-length
AREA .prgend, DATA, ALIGN=0
; ORG 0x21094
_end
; .prgend ends


; Segment type: Externs
; int printf(const char *format, ...)
IMPORT __imp_printf
; unsigned int sleep(unsigned int seconds)
IMPORT __imp_sleep
; void perror(const char *s)
IMPORT __imp_perror
; int usleep(__useconds_t useconds)
IMPORT __imp_usleep
; int __libc_start_main(int (*main)(int, char **, char **), int argc, char **ubp_av, void (*init)(), void (*fini)(), void (*rtld_fini)(), void *stack_end)
IMPORT __imp___libc_start_main
; int system(const char *command)
IMPORT __imp_system
; int open(const char *file, int oflag, ...)
IMPORT __imp_open
; void *mmap(void *addr, size_t len, int prot, int flags, int fd, __off_t offset)
IMPORT __imp_mmap
; int munmap(void *addr, size_t len)
IMPORT __imp_munmap
; void abort(void)
IMPORT __imp_abort
; int close(int fd)
IMPORT __imp_close
IMPORT _ITM_deregisterTMCloneTable, WEAK
IMPORT __imp___gmon_start__, WEAK
IMPORT _ITM_registerTMCloneTable, WEAK

END _start
